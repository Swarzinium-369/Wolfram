(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    306900,       5964]
NotebookOptionsPosition[    303607,       5901]
NotebookOutlinePosition[    304104,       5919]
CellTagsIndexPosition[    304061,       5916]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Hands-on Start to Mathematica", "Title",
 CellChangeTimes->{{3.824077944274285*^9, 
  3.824077946180091*^9}},ExpressionUUID->"a8e46aeb-547c-45a6-97ef-\
c181ba25d846"],

Cell[CellGroupData[{

Cell["Text / documents", "Chapter",
 CellFrame->{{0, 0}, {0, 0.5}},
 CellChangeTimes->{{3.8240778340311317`*^9, 3.8240778541382637`*^9}, {
  3.824077899426122*^9, 3.824077922458395*^9}, {3.8240781505136886`*^9, 
  3.8240781894733534`*^9}, {3.8240782329853086`*^9, 
  3.8240782341778717`*^9}},ExpressionUUID->"9eb95ccd-aa04-41bf-a3ab-\
d43ea3af1d03"],

Cell["Notebooks", "Item",
 CellChangeTimes->{{3.8240782483858995`*^9, 
  3.8240782517400045`*^9}},ExpressionUUID->"401eb575-6a67-45ef-8337-\
40ac151800a1"],

Cell["Cells", "Item",
 CellChangeTimes->{{3.8240782483858995`*^9, 
  3.824078254683176*^9}},ExpressionUUID->"7e66ec6d-3aff-4f45-81fd-\
5b9787dee8d4"],

Cell["Stylesheets", "Item",
 CellChangeTimes->{{3.8240782483858995`*^9, 
  3.824078258057166*^9}},ExpressionUUID->"93a1be01-7ebf-4099-ae79-\
ecd9e4581e5a"],

Cell[CellGroupData[{

Cell["Means of starting", "Section",
 CellChangeTimes->{{3.824077955750225*^9, 
  3.8240779899548388`*^9}},ExpressionUUID->"ee11b776-e70e-4fc8-89e8-\
3e636b55ab08"],

Cell[CellGroupData[{

Cell["Free-form linguistic Input", "Item",
 CellChangeTimes->{{3.8240780455306273`*^9, 
  3.824078073651452*^9}},ExpressionUUID->"82c1ee75-39e2-42e5-ba80-\
4b6fe4428c3f"],

Cell[CellGroupData[{

Cell["integrate (1/(1-x^(3)))", "WolframAlphaLong",
 CellChangeTimes->{{3.8240782997318163`*^9, 3.8240783262183256`*^9}, 
   3.824078732316533*^9, {3.82407924340947*^9, 3.8240792452235594`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"200664b0-4b16-45c8-8f92-7721942454f7"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate (1/(1-x^(3)))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[1/(1 - x^3), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox["1", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["x", "3"]}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["x", "3"]}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["x", "3"]}]], "\",\"", "\" \""}, 
                    "RowDefault"], "\"use \"", "\"partial \"", 
                    "\"fractions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"x", "+", "2"}], 
                    RowBox[{"3", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}]], 
                    "-", 
                    FractionBox["1", 
                    RowBox[{"3", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}]}]]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Integrate \"", "\"the \"", "\"sum \"", "\"term \"", 
                    "\"by \"", "\"term \"", "\"and \"", "\"factor \"", 
                    "\"out \"", "\"constants:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"x", "+", "2"}], 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Rewrite \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"x", "+", "2"}], 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], "\" \""},
                     "RowDefault"], "\"as \"", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}]], 
                    "+", 
                    FractionBox["3", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], 
                    ")"}]}]]}], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}]], 
                    "+", 
                    FractionBox["3", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], 
                    ")"}]}]]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Integrate \"", "\"the \"", "\"sum \"", "\"term \"", 
                    "\"by \"", "\"term \"", "\"and \"", "\"factor \"", 
                    "\"out \"", "\"constants:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "6"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], "\",\"", 
                    "\" \""}, "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]}], 
                    "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], ")"}]}], 
                    "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "6"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", "u"], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    FractionBox["1", "u"], "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    RowBox[{"log", "(", "u", ")"}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "+", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]], "\",\"", 
                    "\" \""}, "RowDefault"], "\"complete \"", "\"the \"", 
                    "\"square:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "+", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    FractionBox["1", "2"]}], ")"}], "2"], "+", 
                    FractionBox["3", "4"]}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    FractionBox["1", "2"]}], ")"}], "2"], "+", 
                    FractionBox["3", "4"]}]], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"s", "\[LongEqual]", 
                    RowBox[{"x", "+", 
                    FractionBox["1", "2"]}]}], "\" \""}, "RowDefault"], 
                    "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "s"}], "\[LongEqual]", 
                    "\"\""}], "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "+", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["s", "2"], "+", 
                    FractionBox["3", "4"]}]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", 
                    TemplateBox[{
                    FractionBox["3", "4"], "\" \""}, "RowDefault"], 
                    "\"from \"", "\"the \"", "\"denominator:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "+", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["4", 
                    RowBox[{"3", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox["s", "2"]}], "3"], "+", "1"}], ")"}]}]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Factor \"", "\"out \"", "\"constants:\""},
                     "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "+", 
                    RowBox[{
                    FractionBox["2", "3"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox["s", "2"]}], "3"], "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox["s", "2"]}], "3"], "+", "1"}]], "\",\"", 
                    "\" \""}, "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"p", "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"2", " ", "s"}], 
                    SqrtBox["3"]]}], "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "p"}], "\[LongEqual]", 
                    FractionBox["2", 
                    SqrtBox["3"]]}], "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "s"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "+", 
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox["3"]], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["p", "2"], "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "p"}]}]}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["p", "2"], "+", "1"}]], "\" \""}, 
                    "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "p", ")"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "p", ")"}], 
                    SqrtBox["3"]], "+", 
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RowBox[{"x", "-", "1"}]], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"w", "\[LongEqual]", 
                    RowBox[{"x", "-", "1"}]}], "\" \""}, "RowDefault"], 
                    "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "w"}], "\[LongEqual]", 
                    "\"\""}], "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "p", ")"}], 
                    SqrtBox["3"]], "+", 
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", "w"], 
                    RowBox[{"\[DifferentialD]", "w"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    FractionBox["1", "w"], "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    RowBox[{"log", "(", "w", ")"}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "p", ")"}], 
                    SqrtBox["3"]], "+", 
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "-", 
                    FractionBox[
                    RowBox[{"log", "(", "w", ")"}], "3"]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"w", "\[LongEqual]", 
                    RowBox[{"x", "-", "1"}]}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "p", ")"}], 
                    SqrtBox["3"]], "+", 
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "-", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"p", "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"2", " ", "s"}], 
                    SqrtBox["3"]]}], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{"2", " ", "s"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]], "+", 
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "-", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"s", "\[LongEqual]", 
                    RowBox[{"x", "+", 
                    FractionBox["1", "2"]}]}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "u", ")"}], "6"], "-", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}]}], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                    "-", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Factor \"", "\"the \"", "\"answer \"", "\"a \"", 
                    "\"different \"", "\"way:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Which \"", "\"is \"", "\"equivalent \"", "\"for \"", 
                    "\"restricted \"", 
                    TemplateBox[{"x", "\" \""}, "RowDefault"], "\"values \"", 
                    "\"to:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "2"}, {
         XMLElement[
         "info", {"text" -> "tan^(-1)(x) is the inverse tangent function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/ArcTan.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://functions.wolfram.com/ElementaryFunctions/ArcTan", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/InverseTangent.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + x \
+ x^2])/6, {x, -2.1, 2.1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1324$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1323$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1324$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1761737$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1323$\
1761742$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1324$1761743$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1324$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1323$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1761737$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1323$\
1761742$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1324$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1324$\
1761743$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$1761714[
                    Plot[{
                    Re[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])], 
                    Im[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2]), \
{$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$], 
                    (
                    Piecewise[{{
                    0. + 2.2207808513229135` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2207808513229135` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$], \
-2.0773502691896257`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1324$$]], 
                    (
                    Piecewise[{{
                    0. + 2.2207808513229135` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2207808513229135` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1324$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$ + 
                    0.004154700538379252, 
                    CalculateUtilities`GraphicsUtilities`Private`max1324$$]], 
                    2.0773502691896257`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1323$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1324$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1761714]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1761714[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1761714[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkTrQ9gkJ1rExaUBJyvfeEiexcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPT0SQ9Hu9nr\
ppzAfB4mQLT8+MGYlZLgoevz/PJVGKCp7cwGf3jAmJ3icMfpDY+W4bcyDkDLQ7v8H3gUUFA02+\
asqopkRNDyXkGY1U7RlLemp+MmUiAkZ/\
khfD3Z3h7vaOg8FYxqA1kVy9aguZZxIUSXoIdMuYPQb8mzs+LY+\
fCsZC8r0gPCLqsfFOJMQGRnBgmI/\
3rdebqQeYmAYeg4yvnCYrz1HbC5SWlKcTMsvxjcvJGrYFBpkqx83Dkpt1CnLh38EHIrQxOY9N2p4tg\
X5hXDP6Lsrqn3M3wPPbtvBSnK0mDvN7x5A30PSUqGU6X7auk2Ok6lob/Zyrq5ovGw3y8ilT/\
y8dU6WXw9huGwaZnZgar9beMvzrtvAix66fi/uRMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5XfIfo9KlghROYOMt+\
sf3xpAKvN4UQazfdgHR4PQMCkhPjii23+zSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5Qs1B10lH35o+\
JWcrnQZMj7EdckJXKt6O9ifaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqUqC7pWBzY0pz7J9EvC3xMeKqz5o7tObq82xazCcRZrbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DVJFuI4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + x \
+ x^2])/6, {x, -12, 12}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1326$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1325$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1326$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1761834$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1325$\
1761835$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1326$1761836$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1326$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1325$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1761834$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1325$\
1761835$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1326$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1326$\
1761836$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$1761813[
                    Plot[{
                    Re[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])], 
                    Im[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2]), \
{$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$], 
                    (
                    Piecewise[{{
                    0. + 13.324685107937482` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    13.324685107937482` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$], \
-12.464101615137755`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1326$$]], 
                    (
                    Piecewise[{{
                    0. + 13.324685107937482` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    13.324685107937482` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1326$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$ + 
                    0.02492820323027551, 
                    CalculateUtilities`GraphicsUtilities`Private`max1326$$]], 
                    12.464101615137755`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1325$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1326$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1761813]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1761813[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1761813[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkboh4AsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+Gr14OX2/\
vOBiMZQxaE8nVTlvIPJOgSNJDoBvGvGPAv7nj4/\
L4qWAsJN8LwiOiHhrvREJsYAQHhvl433q1mbqHiWngMcj40mmy8hy1vUBpSXk6IbMc37iYrGFbYJCp\
ctzcL7lZpyAX/i18IEIbk/PYpO3ZEugXxhWj77ys/jl3Azy/bQsvxelq4jC/XYa8gaYnRC3T+\
bx1nRwjVdfa6OdcXdZ82WiQF0+Z+n/\
piCq9HMZ22zDI7NjUeLX2luFftIUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb17AuH4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateFormOfTheIntegral", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Apart[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}]}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigToExp[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + \
Log[1 + x + x^2])/6]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                  "-", 
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                  FractionBox[
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], ")"}]}], 
                    SqrtBox["3"]]}], ")"}]}], 
                   RowBox[{"2", " ", 
                    SqrtBox["3"]}]], "-", 
                  FractionBox[
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], ")"}]}], 
                    SqrtBox["3"]]}], ")"}]}], 
                   RowBox[{"2", " ", 
                    SqrtBox["3"]}]]}], {
                 GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], "+", 
               StyleBox[
               "\"constant\"", {
                Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                 FontSize -> Inherited, 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}]}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded form of the integral", "scanner" -> 
     "Integral", "id" -> "ExpandedFormOfTheIntegral", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                   "-", 
                   RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedFormOfTheIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=0.", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]], "+", "x", "+", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "4"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "7"], "7"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "9"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 9, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]], ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["1", "4"], ",", "0", ",", "0", ",", 
                    FractionBox["1", "7"]}], "}"}], ",", "0", ",", "9", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 1", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=1.", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, 1, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"6"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"log", "(", "27", ")"}]}], ")"}]}], "+", 
                    FractionBox[
                    RowBox[{"x", "-", "1"}], "3"], "-", 
                    RowBox[{
                    FractionBox["1", "9"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "27"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "3"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`x, 1, {}, 0, 4, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "1", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"Log", "[", "27", "]"}], "-", 
                    RowBox[{"6", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "x"}], "]"}]}]}], ")"}]}], ",", 
                    FractionBox["1", "3"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "9"]}], ",", 
                    FractionBox["1", "27"]}], "}"}], ",", "0", ",", "4", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence,Sum", "timedoutpods" -> "", "timing" -> "3.97", "parsetiming" -> 
     "0.421", "parsetimedout" -> "false", "recalculate" -> 
     "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa243420329b4b3a4iff2i00005ig87b6087bei29f3829495193911185056", "id" -> 
     "MSP243520329b4b3a4iff2i00003f44217g9c93iiab", "host" -> 
     "https://www5b.wolframalpha.com", "server" -> "25", "related" -> 
     "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa243620329b4b3a4iff2i000026774073cc6e91b53829495193911185056", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "2", 
     "datatypes" -> "", "timedout" -> 
     "Integral,Series,Plot,Plotter,Simplification,Sequence,Sum", 
     "timedoutpods" -> "", "timing" -> "5.25", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", 
     "parseidserver" -> "5", "host" -> "https://www5b.wolframalpha.com", 
     "server" -> "5", "related" -> "", "version" -> "2.6"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 5.5, 
    "Date" -> {2021, 3, 7, 9, 28, 58.0085773`9.516067045192502}, "Line" -> 1, 
    "SessionID" -> 26074375856574860962}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6}, Typeset`failedpods$$ = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate (1/(1-x^(3)))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{663., {1823., 1829.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa243420329b4b3a4iff2i00005ig87b6087bei29f3829495193911185056", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8240783380832863`*^9},ExpressionUUID->"fe56be7f-b5c7-4ca4-9aa3-\
9c60a3415d69"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate (1/(1-x^(3)))", Typeset`newq$$ = 
   "integrate (1/(1-x^(3)))", Typeset`chosen$$ = "Integrate[1/(1 - x^3), x]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{11., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{11., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "integrate (1/(1-x^(3)))", 
                  Defer[
                   Integrate[1/(1 - $CellContext`x^3), $CellContext`x]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", "x"}], 
                    "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"],
                    ImageSizeCache->{11., {3., 8.}}],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"],
                    ImageSizeCache->{11., {3., 8.}}],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "integrate (1/(1-x^(3)))", 
                    Defer[
                    Integrate[1/(1 - $CellContext`x^3), $CellContext`x]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", "x"}], 
                    "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20],
           ImageSizeCache->{20., {7., 13.}}],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[3]:=",ExpressionUUID->"4fb6bfab-906d-4cae-9974-32ace19982d3"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"ArcTan", "[", 
    FractionBox[
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "x"}]}], 
     SqrtBox["3"]], "]"}], 
   SqrtBox["3"]], "-", 
  RowBox[{
   FractionBox["1", "3"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "-", "x"}], "]"}]}], "+", 
  RowBox[{
   FractionBox["1", "6"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "+", "x", "+", 
     SuperscriptBox["x", "2"]}], "]"}]}]}]], "Input",
 CellChangeTimes->{3.8240792640788317`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"52fc5bcc-eed8-4b8b-a600-d1a3f259c280"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["LinguisticAssistant",
  DynamicModuleBox[{Typeset`query$$ = "graph 1/(1-x^(3))", Typeset`boxes$$ = 
   RowBox[{"Plot", "[", 
     RowBox[{
       RowBox[{"1", "/", 
         RowBox[{"(", 
           RowBox[{"1", " ", "-", " ", 
             RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", 
       RowBox[{"{", 
         RowBox[{"x", ",", " ", 
           RowBox[{"-", "0.95"}], ",", " ", "1.1"}], "}"}]}], "]"}], 
   Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, 
   Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
   "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
    2.2644592`7.806509493664211, "Messages" -> {}}}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
      Dynamic[Typeset`query$$], 
      Dynamic[Typeset`boxes$$], 
      Dynamic[Typeset`allassumptions$$], 
      Dynamic[Typeset`assumptions$$], 
      Dynamic[Typeset`open$$], 
      Dynamic[Typeset`querystate$$]], StandardForm],
    ImageSizeCache->{293., {8.5, 16.5}},
    TrackedSymbols:>{
     Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
      Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
   DynamicModuleValues:>{},
   UndoTrackedVariables:>{Typeset`open$$}],
  BaseStyle->{"Deploy"},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Input",
 CellChangeTimes->{3.8240792969731526`*^9, 3.8240795527919483`*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"f00376bd-a9ba-44e7-b129-a6301f5ec88f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$19683#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.95, 1.1}, {-0.24095992690224088`, 2.3186383207449857`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.824079316143161*^9, 3.8240794942152843`*^9, 
  3.8240795623915577`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"c606ad60-5510-4554-a6c2-348e16f1f290"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mathematica\[CloseCurlyQuote]s Programming Language", "Item",
 CellChangeTimes->{{3.8240780455306273`*^9, 3.824078085793832*^9}, {
  3.824078117764002*^9, 
  3.824078117764002*^9}},ExpressionUUID->"8ca80513-b04b-41ec-9613-\
ff99fe805189"],

Cell[CellGroupData[{

Cell["4 Basic Rules", "Subitem",
 CellChangeTimes->{{3.8240796484554524`*^9, 
  3.8240796955898457`*^9}},ExpressionUUID->"b78a2f9f-f9c0-43ba-9da8-\
f8cc2088696a"],

Cell["Capital letters: function names", "SubsubitemNumbered",
 CellChangeTimes->{{3.8240797232700577`*^9, 
  3.824079739576623*^9}},ExpressionUUID->"16e7793d-edcd-4723-9e6e-\
98be2285403c"],

Cell["[] - anything we calculate", "SubsubitemNumbered",
 CellChangeTimes->{{3.8240797232700577`*^9, 
  3.8240797530009933`*^9}},ExpressionUUID->"d3aafb19-0146-42a2-893a-\
8f4a48bb0e89"],

Cell["() - lists or ranges", "SubsubitemNumbered",
 CellChangeTimes->{{3.8240797232700577`*^9, 
  3.8240797735593386`*^9}},ExpressionUUID->"fa37e65f-fd23-448b-ad53-\
072ff9fa02b0"],

Cell[CellGroupData[{

Cell["Shift + Enter - run calculations (enter key carriage return)", \
"SubsubitemNumbered",
 CellChangeTimes->{{3.8240797232700577`*^9, 
  3.8240798045978737`*^9}},ExpressionUUID->"87a96c01-fd83-4a44-99ae-\
5289d8927317"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"log", 
    RowBox[{"(", "x", ")"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8240798501775303`*^9, 3.824079882934336*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"f7c23ff6-0d0b-43db-943f-d2eb9731cc5b"],

Cell[BoxData[
 FractionBox[
  RowBox[{"log", " ", 
   SuperscriptBox["x", "2"]}], "2"]], "Output",
 CellChangeTimes->{3.824079894016633*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"4f6de2ac-d24d-4420-9762-1fdd9c421b43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"1", "-", 
     RowBox[{"x", "^", "3"}]}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8240799246090093`*^9, 3.8240800860375547`*^9}, {
  3.8240801909977007`*^9, 3.824080249994234*^9}, {3.8240803822373414`*^9, 
  3.824080423637636*^9}},ExpressionUUID->"0443c527-7e2c-4e21-935a-\
73d5f3d458a2"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJydnXeYVtX1qMEBpIOASizY0Nh/xoI1zmASA3bRKLGFqNhRY4k1UYlGxY6K
GrArsSCiIlgIg12MqKgoArFipVpQEIT7u3PWu7/ne/ecZ26u/3yPL2vWXmud
XdfeZ5/1jjyl38CVmjVrtrRDs2Y1//u73QOd31ixouskfrvttvXFLXpfWDup
T8d1h/ZcJfH+pzzfZcaYy2uHvbb6h32Gtk/886uPW7Bk+Y21o9p1vXDQzFaJ
j9756udHtb+39tkGPc0TP2zOwdt9d+v42ocb5L+vh3965qnjTuv/Ru3YBv5Z
4p0G/vWkH07/vLZZw39vT4AX/7+w9o5CvhY+Y06HvW/ffEntvYX+xL+9uPXs
V8d+WP+vwp46+AsLPlzvg0UT6u8r7E/8wrs2W3b6gpH1Qwt/E2/dYquB9UuH
1U8s4pP412uduN8ahwzB7sRnn7/4gvUuvjD5Q1wdZ34dZ7jjDHec4Y4z3HGG
O85wxxnuOMMdZ7jjDHec4Y4z3HGGO87Ez3GGO878Os5wxxnuOMMdZ7jjDHec
4Y4z3HGGO85wxxnuOMMdZ7jjTJwcZ7jjDHec+XWc4Y4z3HGGO85wxxnuOMMd
Z7jjDHec4Y4z3HGGO87Ew3GGO85wxxnuOPPrOMMdZ7jjDHec4Y4z3HGGO85w
xxnuOMMdZ7jjjN+OM9xxhjvOcMcZ7jjz6zjDHWe44wx3nOGOM9xxhjvOcMcZ
7jjDHWf8c5zhjjPccYY7znDHGe448+s4wx1nuOMMd5zhjjPccYY7znDHGe44
44fjDHec4Y4z3HGGO85wxxnuOFf/VuIMd5zhjjPccYY7znDHGe44wx1n7HWc
4Y4z3HGGO85wxxnuOMMd5+q4VuLMr+MMd5zhjjPccYY7znDHGe44Y5fjDHec
4Y4z3HGGO85wxxnuOFfX00qc4Y4zv44z3HGGO85wxxnuOMMdZ8p3nOGOM9xx
hjvOcMcZ7jjDHefqdl+JM9xxhjvO/DrOcMcZ7jjDHWe440w5jjPccYY7znDH
Ge44wx1nuONc3Y9W4gx3nOGOM9xx5tdxhjvOcMcZ7jijz3GGO85wxxnuOMMd
Z7jjDHecq8elSpzhjjPccYY7znDHmV/HGe44wx1n/s5xhjvOcMcZ7jjDHWe4
4wx3nKvH+Uqc4Y4z3HGGO85wxxnuOPPrOMMdZ/69JF+XxRlekq/L4gwvyddl
cYaX5OuyOMNL8nVZnOEl+boszvCSfF0WZ36J87nndFrcZ2iXSfzePmH7Jc/u
dnHKJ8KJ/z8ayl2W/q7L4T8O+q7Hc7XPN5T7deK/XrBnz50fm5U4+uATG/x6
J8mvtXzRW92Gz68dVvBa+KApx13z1+cWJo4e+FOF/iT/l2273Dn6j9/Ww5GH
X1vYn+T/ecNjx5/9638njjx864b/r6lL8vsuvqn7RY8knuSDh1ySv2f1tnVn
Pnhxij+c+BPPdlutce24QZ2yeMIdN7jjBnd84I4D3P4mHn5h53qDVt1q5rg2
mZ1w2wm3nXDbCbedcNuZuOzcvvj3zE647YTbTrjthNtOuO1MXHbyazvhthNu
O+G2E2474bYzcdmJXbaTX9sJt51w2wm3nXDbmbjspHzbCbed/NpOuO2E2064
7UxcdlKO7YTbTrjt5Nd2wm0n3HYmLjvRZzvhthNuO+G2k1/bCbedictO/s52
wm0n3HbCbSfcdvJrOxOXnfy77YTbTrjthNtOuO2E287EZefaRb+a2Qm3nXDb
CbedcNsJt52Jy86Vi3EqsxNuO+G2E2474bYTbjsTr54PMI+qK5lf1ZXMrzK/
4PiFPPMLy8NL5l1ZHODEAXn0IK95V4qP5mlJj+ZdKW6apyU9mneleGqelsU/
8cbnY3XMx/h/5MXTPj7PS3FO8wrWC/wd6wXFLc0rWC8g7/UC3OsFuNcLcNYL
8ivNP7GTeR12Yg/c9sBtD9z2wLGHcpmnuVy4y4W7XLjLhbtc5l0uF+5y4S4X
7nLhLpf64nLhLhfucuEuF+5yafcuF+5y4S4X7nLhLpf67nLhWf4heJZ/CJ7l
H4K7XPoblwt3ufDsvEHw7LxBcJdLv+Vy4S4X7nLhLhfucun/XC7c5cJdLtzl
wl0u/avLhbtcuMuFu1y4y2Xcd7lwlwt3uXCXC3e5jOMuF+5y4S4X7nLh6rdT
PopxR+NLZg+8ZBzJ7IGXjCPJHuUrUr6IdkgezvMHuOdRcM+j4Izjab0T+bxs
vRM8W+8Ez9Y7wa2fvKD1w60fbv1w6ye/aP1w64dbP9z6qRfWD7d+uPXDrZ98
p/XDrR9u/XDrp/5aP9z64dYPt37agfXDrR9u/XDrpz1ZP9z64dYPt37apfXD
rR9u/XDrJ69s/XDrh1s/3PrJT1s/3Prh1g+3fvLcWd4meJa3CZ7lbYKj/80G
PS/Wr/1RxysHzVxl0iVbXzPv1qkLasc1yH1UC/+w39jdN/zim9qtGvrJbxPf
bErX3542eWF9y4b+fUXiW0zcZ8aDZzyX9O+3ovsTK1Z0yPTDrR9u/XDrP2aX
bv179m2d6YdbP9z64dZ/fsO4sFKmH279cOuHW3/PhnF5Sb31w60fbv1w67+t
4fnPzfTDrR9u/XDr59f64dYPt3649aPP+vm1frj1w62fv7N+uPXza/1w6+ff
rR9u/XDr59f6581Y5b5xg1rWWT/c+uHWD7f+6beu1npoz3aZfrj1w60fbv1/
HNNh7LhBnTP9cOuHWz8c/YML/alf6nLVeW3OXH1h7ZCiHie+sM2p47c8ennt
GkX7SXxIt7bNztj37WTnUYX+1A+gH45+7IdjP/L0Y7YHeezBXzj+Io8e2488
9hMfOPFBHj32d1bxvDJ/4fYXbn/pV+0v8vYXbn/RY3+Rt79w+4se+/tNUf8z
f+H2F25/6eftL/L2F25/0WN/kbe/cPuLHvvbqfi7evsLt79w+8u4Y3+Rt79w
+4se+4u8/YXbX/TY352K8jN/4fYXbn8ZB+0v8vYXbn/RY3+Rt79w+4se+/tK
4UfmL9z+wu0v+uwv8vYXbn/RY3+Rt79w+4se+4u99pdf+wu3v/y7/eXf7S/c
/qLH/iJvf+H2Fz32l3LsL9z+wu0vfthffu0v3P7y7/Y36ZO/cPubypG//Lv9
hdtfuP2lfPuLvP2F21/02N/kt/yF298UD/l7dtFv19lfuP2F21/mdfYXefsL
t7/osb/I21+4/UWP/T2yGJczf+H2F25/mWfaX+TtL9z+osf+Im9/4fYXPfZ3
r2LelfkLt79w+8u81/4ib3/h9hc99hd5+wu3v+ixv2sV8+rMX7j9heMvdsLt
Fxy/sAdu++HYn/LqMf/P8urByScjz/zZ8nDLM/+0PNzyzN8sD7c88x/Lwy3P
/MHycMvzPC0PtzzP0/Jwy/M8LQ+3PM/T8nDL0/9YHm552q/l4Zan/lsejvz0
VTof3bNv10n8fnDvwM1PW2twpR8L7nYBd7uA0y7g7I+7vSDv9gKnvcDRAw+5
OuRPePXk7+aeMjjFgfWm4wB33FivWR5uedY7lodbnvWC5eGWZ75tebjlma9a
Hm55nrPl4ZbneVoebnmem+Xhlme8tjzc8ox3lodbnvHC8vCSdlFHu0j5qOCM
I2n/I/pz9Ku9pHEk7WeEPOWqXeT5q+CMF6r/ddR/2gl+cN6J/SH2PzlXT/1g
fKlt2WfuoRPmJPvRh/3k/9FP/h/7kcd+9gWQZ19AfqW8AfsFcPYLsJ9zL7af
8Q77kee8iuUZ7yzPORPLM95ZnvMhlme8szznOizPeGd59mEsT320PM/H8jxP
y/N8LM/ztDzPx/I8T8tz3sDyjHeW55yA5RnvLM/+vuUZ7yzPPnumP9oR8sQd
zv6Xxsc0b1S7SPtiGh/TvFHtIu2XaRxM80a1i2wfjfZCvyS/JpX4lfbN0Uv7
pT9BjnMK9IdpfhJ/l81PgtO/8fdwzjlIf5qHYD/9FfbDkYfzXNK5wXgusjMb
r+Eldmb3OWA//Srx5++8jwD3PgLc/Tzc/Tyc5yL51H8SH+Y5jhvzGXPmLebM
T8yZh5jza87zMad9mNMOzJkPmDPumzO+mzP+ltSrupJ6la1z4V63wr0O5XlR
T+5v0DOr/v4XOo0eN6/LpGltz+w45sh5ST/13/NqxkFzxjtzxjVzxi9zxilz
+g9z+j9z+jlz+jNzxgtzxgVz+n9z+nlzzkFl9sf5JXPOHZlzXsiccz7mjD/m
nKsxp98yp98y5/yJOedGzDnvkT3fOKfhcYr5od/7o58xZz5mTv9jznzMnH7J
nPmYOf2VOfMxc/oxc+Zj5vQT5rRvc/oPc8YHc56DOeOGOf2NOeODOf2nOfMx
c/pVc+Zj5vS35szHzOmH4f3O2/Cokx5aWLve7tMuu+CMynumBwTvP/neRzbY
ulPGB7W6c/8+57XJ+N9+NeLrk56vyfg2zf9ngw3WrLyvR7kDit96y2/6zilX
vrP87Yxv1Xvc6S2emF5rPT1W+2HW+OGV962Q/354s1tPbvNT4gcG/6LzJaOH
7twii8Nrb13e8eRv2mT8qWFXn9z3/sr7MuifOqrvsV3GVN4TuWz4VqMue3hh
7bZ67+Ojq9eaef6Y+bWd+45u/8+bKv3he8FP7nPyNn95pHIeYFrw2tcPfvK0
syv7/u8GXzjl3VbrjGqX8f3bH/D7m55ZOeMt2r018leLKvvRM4MP7LvPkqfb
rpTJr9Hntd2P27VZZudP7a/f+pl/Lk796vTgA9peP+VnnRbVW88BHbt+2u2M
rzL57m26rvnibp9kfMdVm2288wsTMj03dWvgtZlfhZ5a69mpKDeT/11hZ+Lv
BP++8KvW8elexKHOcTi6iFud5Vcq4pzJ7108l4zPK55jxrcvnnvGTyzqSeKq
V4l/vmfBB9956idfXVnJB+757K73zr9jPvUzceqt8wbiqT5/26O2Qc/Zmi/B
22u+BPd8Ce75EtzzJbjnS3DPl+CeL8Gf1nwJfp3mS3DPl+A9NF+Ct9V8SXFL
fM9ji/5k+p/eGdDr40r8Z0wu4t9D8wG45wPUk/7dH9p24SaV/uSNtYe/efKD
C2sfbr/aoL51nTM9+2v+AH9f84f/hP4XBv2uTctb22b6zzro5+eOn9w20+P5
Bvw7zTdop+8/sN/9m3zWItN/xfXrrzGrS8tMj+cn8M6an9A/fP76TUNHHLE8
1ZPXQ3/vO3c+o/kTy+utx/MZuOcz9Cfd9rj6zU8XflNv+09Yc+uxe+zxbabH
8x+45z/EZ3HnrntMaP9+pv/gg+56Y9/TPsj0eL4E93yJ+DzVfqOTfnng67XW
/8NFK/9htctfrbUez6/gV2p+hf1pHJP+n899e/XHfpqX6fF8DO75GPb3nnLT
Fote+DHT/+XSb/e89qQfMz2tNH+De/72Vui/9P43vp/2s0o/gP4PJi2/ZIN5
FXn0zNV8D+75HvXnzJOmHfTIG5X966mh/99/q/ls+d2tMz3vaX4I9/yQuP/x
f2aMu/LSjpn9j+/eevcZh3TM9Hg+Cfd8knFw43NOabftOl0y/W9c3OqtGa0r
86UvY5zadPDDsw9v2TXz9/hfrv6bZqMr/R7zt2NWfXvMy60qHP1fjd9k0w3v
rfRjzN9mH3t383EHtc/kl3/X85W+81fO5Jfec9udM25vlcl323rdE07efqVM
vvPHt/Re8UWzxOlPDn6/V7eNmi/J5rF9dt30ud8eXXlvBf0rPXLIfe9vNCeT
/+zU3q3Wn/dpJn/EjT3ufH6LZzL5vfpvs9Mpk2+ttXy/Y/598LJrPs7mySeM
nL3kicmfZ/LLd1gwZ+zj32Xy7d5busv1/X7I5E/8w7Jpj6/SLJs/n/rw4OU9
B1Te40D+d+s373Xdyy0z+d+fdukRzVZfOZOv+7TlsJMuqNRz7PnNdldOnDml
fSa/6oEtl24wvFJvqT8/O7/PNYfuVqm3zIu8ryqe6if9wEZFPc/myQOL9pXN
588q2nUmf13RnyROP9a36MeyefKc4jebJ6/coaHfzvibxXiRzXvbFuNUre2Z
VYyPmfzMYlyus/7nivlANl89qJiHZPOfZ5QXSvM05YXgDyovBHdeCD5GeSG4
80Jw54XgzgvBnRdK80/lheD3Ky8Ed14IXq+8kObtiWu9mfqf3xy5xbrnjZxf
+9LE4w8c+ValPosnPQPbF+2ly4SVH7zuz5V5/jHBhx/bfe3xa1b0N7up0LP3
8eNOv2tipf7/NKzgj3Q67tLjX+yU8Zf2OurnV3eqzBuXBn/v8iNeerR/i0x+
9lWPvTb6Vz+l57UieJfWD3RcPK0y/18efH7rwTu1vPO9eus5puM9L0xb9e1a
yw+6/LRfbH76woz37nT+1x9/uDTjV7zy7PS9/lkZ97Hnz1e9tMPGR7TJ+ID9
Xr25ZtXK/P/H4Pddftz5CwZWxkfFs2xdkJ4Leq7d4fHhc/bL25HfL1gp9M/p
f+w9OyzunMV5l9ED3136Vd7u3te5fZ7Xt/Mnf3HjjhV54rPfnAFnrbvtypme
b3Uenvi03PyFy54aXGnXy4IP3Piw1X/zl7xdd9Q5c+xf+/hJG3/w72aZX0tf
GX3yW1f+kLV3n9/G/qP2Ouu6lTf9PtO/95A9Dt9x1y8yPT4XjZ61rpp5151n
f5rx9b86661/bT4y0+Pzxsh//EWDfK3taVfoz/ofn+NFz86F/ZmeQwp/Mz0+
H4v8N0U8M/2rF/EvWedW8iToOap4vnV+7i2K+pDp8XlO9OxV1LeMzynqZ6Zn
H52TRH6Hov4nTnv5smgvmR6fS0TPdUV7LOtXJ5XMe1O9VX+b2rvyOVk/M7Lo
T7L20kPvPdHPHF30S5m83zPi+Z5X9G+ZvN/TQf/VRT+ZyZ+n91zQv2fR32bt
wu+JEOdzin47k/d7FshfU/T/mfzUWBfbnheKcSRrFz7nj/6WxXiUyf+Pzskj
P6MY1zL5Vjpnjvz0YnzM6qHPadOOJhXjbCbvc874+1AxXmfyA3ROWHnvLM8/
sciTZ/ztIq+e8a+KPHzGm41oyNtn65rNijx/xg8q9gUyvnxawz5Ctn7h13yT
Yp8i4xcU+xrZuuOEYh8k4wcU+ybZumbdYp8l8f2Dr16sR7J17p7FuiaLz4Bi
fZStQ88o1lmZ/GrFei2Lz4XFui/jrx3SsH7M+JvFOjSLz67FejbjbYt1cRaH
74v1dRa3/xTr9IwfXaz3s/yD7+li3bd6se7L8oG+rwP5Xxfrykze928gf0ix
bs3kfZ8G8qcU6+JM3vdjIN96x4Z1d5avY13jPMNxxbo+k/f9Fci3KfIGWb7L
91Fgz5wxDXmJTN73SyC/V5H3yORHxrrJ8p2KvEr2fFlPWf7HIm+Tyfs+B/z9
rMgLZfK+n0F5pxJ7Suth9hynFvmu7LmzP2I7xxf5t0x+fd0fi/4pRT4wk98h
9lMsP7vIT2byw2OfxfZ8XeRLs3rle03Rv3ORv83kfb8o+vce3JBPzuR9zyf6
tyny21m98n2byP+xyLdn8r73EvleRf4/k/f9k8hfUuxHZPWB/aCsHyj2RzL5
1rqP8bWQH13s1yS+wai9b//xnc+zc/6thrdbNvetRVn/Bnc/Bnd/BXe/BPd9
O3D3M3D3J3D3G3DfJwP3PTBwt3e42zXc7Xer14dNaz/r29ruw/9078/rKvNz
+HbKq8Dv3vGURU8e3Tnjh415b8jNXdpl/LR5b2/6r0NbZrzT7+648bm+lf0p
+E7Fb8ZfGbrGZqNmfZjxwZ98dEDLpS/Vmg+5uN20LWfMzfgafa7Z9LUZSzK+
+Ji9ztztnpWy+Hy8yf7T1j60dcZfnfu77Zas0jHjsw5+aI8TZq+S1Vufr+O5
uP9E3ufukPe938h7fxl537+NvPedkfc92Mh7Pxp530eNvPepkXf/ibz3r1O9
Vf+JvPe1U3tX/4m8zwci7/4TeZ8bRN79J/LeH0fe/SfyPmeIvO/RRd7nD5H3
fbaqb5m8543U2/8U9TZrp4efcOqUU9/M+RtF/c/5KrN2ajW/Q8Y/K9pRzvd5
d8am2+d8WdEec37Fm+fue2HOexbtOusfeg4dvt0XQ3N+W9E/5Lx7zzlH7pHz
N4t+Jufb/HrUtKdfyPi4or/K+plxy5uvevZJH2Wc34xfMuSVbzb4LuMti/4z
5+1uGHL/dTkfVPTD2XMf9PI+G465IOf9i/4851cccMkVvXJ+ZzEuZHy9n486
7bE/5+P4GyMWPVfz60p+Bn7Chhsf+O5pXTI+5ruNzl+3ZS6/+fQv3r1lVKWf
pNwNinKzfmz8nz/7+eZT22d6vrp0zz5vbdkp42du1PfmgQfk8rutOvusiYva
ZOUeVsQnK3fKYx+9tN8aK2d6mr2w+xc/nNUm41cc9esdhoxolfH+/T5Y/ZNd
W2TlnlY8x6zcTxbOOvbMo5pnelZbabfL1nqmJuN33lE7ffSnzTI+q8fjp3Tq
XNmPSON4Ud+y/vnrQ8d02vb3lfxzsv+v5+43uNuyjA96+syFIw//PuOtbnnw
4f53fZ2Vu1PRLrJyty9+Mz2DF5967b9HLsz4L06cPuDDDz7N+At7XTbx0jen
Z+W+UrTfrNyRqxz4+d1/uj3T88Qrt/Y+YPbbGd+oU4N8rfm1hXytyx1c9DPZ
uLN2YX+m59bC/ozza352EZ+s3CFFf5iVe1TxvDI9y25ueF4Z/7yoDxnfp6gP
WblrFP12Vu6Ion7WWc+bRf3M9L9f1P9MfpWi/te53MXF+JL1V5cW7THTc0DR
HjM+uWjvGV/2fEN7z8r9uBgHs3L/VPQ/mZ5di/4n448V/VvGPyv6t6zcV4vx
Oit3dNHfZno2LvrbjL9e9OcZP77oz7NyDyvmFfm8SHl7uPPzcOfh4b5XCu68
Otz581SvlCeHOx8O9/0wcN+jAnceG+58Ndz3V8A3PGiTza/+sGs+jkz5fvhT
j3TJxoubLxu9/nr9umbjhfdPU/+v/VC47/uC+14suPcf4d5PTP229gfh3u+D
e/8u9W/aj4N7fw3ue0Xg2b0c1evobP4Tcc64zxvrOWblxnPMyvX55FR/dG5H
PKsP2+ncvvItmR6/35TWZTrHAvf7TXCfY4H7/Sa4z7GkeZTOscB9jgXucyxw
v98E9/tNcJ9jSetZnWMhzn6/Ce7zzHC/35TyDDqfDPd5Y7jfb4L7/HCa1+n8
cFpP6Txwmo/pPHBaT+l8b5pH6XxvWk/pvG6a/+i8blpP6fxtmrfo/G1aT+k8
bZpv6DxtWk/pfCzc52Phfr8JfqTOu6b2q/OrcJ9fhfs8KtznUcvypU2NF+4f
ysaRsrxWU+u4svG9bD1Y1s+UrQfLxi+vE8vybE2tB8vmIWXryrL+sGxdWTbO
er0Jd96vqXVl2XypbH1a1m+XrU/L5gNet6b1mvKQTa1Py+Z1ZevcsvGlbJ1b
Nm/x+hfuvGhT69yy+WfZerlsHCxbL5fNr7yOhjtP29R6uWyeXLbuLhuvy9bd
ZfNAr8fTOKu8cVPr7rL5fNn6vWxeUbZ+L5uvel2f+gflseFl6/eydUdZHqBs
/sPv/+u82vkBuPPqaZ1bkgcoWx+V5RPK5mll+YSy+b/zDOm5KM+f6klJPqFs
HVeWlyibT5blJcrWKc5XwL3vAC/LS5StN8vyG2Xz3rL8Rtl6ynmPVG+1DwIv
y2+UrYvL8iRl8/OyPEnZus/5E7j3ZeBleZKy9XtZvsXrCHhZvsXrU7jzMJq/
NbnebGpdWbZu9fqxqf1l5yXK1stl+9dl+6pN7XOVrcu8/1V23qBs36Gp9Z33
08v2eZvadytbJ3o/ruxcRNn+RVPrTe/7l+07N7UPWLZu9f5g2fmNsn2Qpta/
Pp9Qtg/e1L5k2Tra+5Vl50zK9lOaWo/7HEXZvnyT+6Ql63rvn5adhynbl2kq
P+DzHmXnBJrcty3JM3g/t+zcTtn+TlP5Cp9LKTu30OQ+cknew/vLZeeLyvaJ
msqf+PxM2TmKJve1S/Iw3u8uOwdVtt/UVD7H53zKznU0uc9ekhfy/nvZea2y
faum8ks+j1R2zqTJff+SPJXPA5SdKyvb/2oq3+VzU2XnXpo6h1CWN/P5hLLz
b2X7aE3l33y+q+wcTlPnIsryeD4vUXZOr2w/rql8oM+hlZ0LauqcRlle0ec3
mjpP6H29svxkmlfovFxT55TK9lm8D9LU/st22u+Yf0PHd1ZcsMok5nWPbvLN
gA8GX1a7b8yrmK+useSzxw96/PrEkYc/+3a351esaJ3k17xwwrtP/fbOxJGH
bxfzDORvu/j1PTfs8kjiyMOLed5PlXspn9vovUV7PJM48s3evOD3j979XG2v
GHeRH7H1EfPeueSdxJH/aUjX+v2XvRvznk+S/BbbHTVqk5u/jPFmzAQ43yfd
ppBP8+Hf3HPP2gd3+SHeN/sp8ZOnDN5mtS4v128b/QL8rwOWXvNqr7H1zxTx
SfeC7rv7DQNm3XNX4sjDeZ8N+buO+Xpal8tuSBx5eDzfJP+Pmf3a/2n+ZYkj
P/flw3odus7lqT4wT3Z9gPu5w/184X6OcD8vOM+FOMMdZ7jjDHec4Y4n3HGD
Oz7Mwx0fuOMDd3zgjg/c8YE7PnDHB+74wB0fuOMDd3zgjg/zfMcH7vjAHR+4
4wN3fOCOD9zxgTs+cMcH7vjAHR+448M6wvGBOz5wxwfu+MAdH7jjA3d84I4P
3PGBOz5wxwfu+LBOcXzgjg/c8YE7PnDHB+74wB0fuOMDd3zgjg/c8YE7PqyD
HB+44wN3fOCOD9zxgTs+cMcH7vjAHR+44wN3fOCOD+ssxyd9P0HxgTs+6Tsq
ig/c8YE7PnDHB+74wB0fuOMDd3zgjg/rOMcnfUdC8YE7Pul7MooP3PGBOz5w
xwfu+MAdH7jjA3d84I4P60THB+74wB0fuOMDd3zgjg/c8YE7PnDHB+74wB0f
uOPDOtTxgTs+cMcH7vjAHR+44wN3fOCOD9zxgTs+cMcH7viwznV84I4P3PGB
Oz5wxwfu+MAdH7jjA3d84I4P3PGBOz6sox0fuOMDd3zgjg/c8YE7PnDHB+74
wB0fuOMDd3zgjg/r9FG7/XGvA3+Xrcez+MBL1tcpPvgLP2adj/oe2fb7uE+q
kh9YJ76bgL/wu/ddfFP3ix7xujXzFy5/J6X1k/yKPEm2Lthzi067zezVJVsX
sM9lv9Bvv9Bvv84JPfbrvvhegP16N/bj7Nc3x3Tfq2ffDtl6h99sPXjTz3rO
HNcx86tN7H/Zr69Dv/0KuzK/0GO/tj26w/I+XTpnfh0Z+3Sun9cu63BCz8md
s/VL63u6zu0zdOXM34Gxn5Wt7+LX/q4T+2X2d+XQb3+PDv32Fz329y8tVxsx
blDbzN8Zsa9nf7fvtfoZg2a2y/wt7tXJ17Pcb2N/i7xcTUm+qybzd+3Qb3/P
Df2Nt8eazN/rd1tll5njWmT+Lox9QPu79+ldug3tma/fj22I8+Js/bV+7JfZ
35kN8Vyarb+GxX6c/T0m9NvfdUO//UWP/e0X/b39bR/7hva3qOfNMn+LfcAv
M39vif01+1voX5D5Oyn27+zveqHf/g4L/fYXPVl9bqgP32T+bh/jm/0tnvui
bP34RsO8ZVzm74TYj7O/LzTYMzXzd3Ts99nfp0K//X009Ntf9Njf2+P7Lfb3
+diXtL+9Io9rf7cKu+zv07F/Z3+vKcrN1jsjY3/Q/qZ6LX8nhn77ix77+3gR
52z98o/Yx7S/dxZxztYvxb7SoszfrcMu+1uMg99k/k7kex0eZ0O//eXX/qLH
/rYo2lHm77Wx72l/i3s2vsz8LfZxmmXzydZ8n1n+Mr+zvzfE/qP9jX4jmy+1
Cf32Fz32992in8z8XTv2Se1vMd4tzvzdq+i3M38XxH5itr4oxoVsfoi99hf9
9hf99pdf+/tOMQ5m88NzYl/V/sY4mM2HexXjcuYv92Db3/OLcT/zN+YJmb8x
7mf+xjwh8xc99pdf+xvzlszfmOdk/sa8K/M35mmZv9sU87rM35gHZv6i3/6i
v2Q+mfn7YDGPzfzl1/7GPDbzd+UjOq8x9J58vcP+pv2N73ll/rJ/an9bh377
+17ot7/nhR77G+uRzF/2eb0uCL/SeiflN2J94X3MvWO9A2fdyrrD+5jc9win
X3sg9A/YpPn6Qw97qR7OPiBc/qb5pNZ9ifMcW4Zf3k9cGH7D8SvqZ+bvmFgH
2V/WI/a3X9QL+7td6LdfHbQOotzoHzJ7Xoz6ZXtYL9ie42I9YnsuDP22ZwOt
U1I+J+bttmdWrCNsD/N52/PXWC/YnmGh3/bsqHUE5fJre2bHPN/2tIv5tu3Z
OObztqd/6LM9t2meT7nnxrzX9qwV83Dbw6/tuTfm27ZncOi3PS9rHk65N8W8
1PZ8GvNk2/NszFdtz4KYD9ue8aHf9rymeXJ1Pnlqre05Jeaxtuf2mE/antEx
X7U9t4V+2/N3zWMpt3XM62zPqTHPtD3XxXzP9mwe/bTtWfw/hX7bM07zTMqd
EfMu27N76LM9PWI+Znuax3zP9rwZ+m3PlZoHUu67MS+yPVfFPM32MF+yPXNi
PmZ73gr9tmcrzdPSfnqMb7bn7JhH2R7mM7bnnZgv2Z6Jod/2rKl5VDr/EPMK
2/OLmOfYHsZh28N9trbnvtBve1pqnsM4PpfzDhrH94r5gO2M8T2zM87bZ3bG
+J64zjtleuD2a4+wx36do/kM4zW/HsdjfM845Yqnc1zEBzvJ02In56ngzXWe
Cu48PJw8fPW40ynTD7d+uPXDrZ/z/NYPt3649cOtn/P21g+3frj1w62f8/DW
D7d+uPXDrZ/z6tYPt3649cOtn/Pk1g+3fni2jxPc+jnvbf1w64dn59CCWz/n
sa0fbv1w64dbP+elrR9u/XDrh1s/55mtH279cOuHWz/nja0fbv1w64dbP+eB
rR9u/XDrh1s/682S/i3TDy/p35J+zqNyPvPgPQ97ceIvK+dR4ehHnvOKlodb
nvN7lodbnvNslodbnvNdlodbnvNOlodbvvj3tydYHm55zsNYHm55zodYHm55
zktYHm55zg9YHm559tMtD7c8+8uWh7t+xnwm24fqof1T6i37s84zLIh5ARz9
rPetn3W99bNPav2LYj/U+lm/W/9x2jdM5z9D3vrbxf6j9bMet/6/ap8OPewD
Wv96sd9n/Z/E+tr6N9a+GHpmhbz1D4r9NetfM9bL1j9S+1DoYZ/L+reK/Szr
nx3rX+v/Rvs+6Hkx5K1/6/bF/pH1/ynWs9Y/Wvss6GEfx/p7hr5Mf6xPrZ91
qPWfHfLW/3nsj1g/603rb659BPTwa/1HxH6E9V8d60frn6O8PXquC3nr7xv5
f+tnPWj97yhPjh7y8Na/TeTbrZ/1nfUPUF466Ql5678m8ttw+j2+Q9cs+j04
50DM60vkySvC0zmrOC+B/Wl/MPKTcPTczHsQ0t9G+tP5h8iLVuerU94+63+u
C3schxtKyiU/ab92jnMR9os8qv0azfsL0r+O9GM/3x2zXzPE03on7LFfD5SU
S57Tfu0f5x/sF/lY+/U87x1I/3bSj/1879h+LRTHL85j2K9JJeWSL7Vfx8Y5
B/tFXsF+Pcb7AtI/TPqxv2vke+1XO3H8OirssV8PlpRL3tV+LY7zDPbrvMjf
2q8JnPOX/knSj/27xrzefvUSx6+vwx77NaqkXPK39uu3MV+zX7dEHth+Fb8f
T7D+0dKP/W9G/tl+PSuOXzuEPfar+rdSLnlg+7VGnE+wXxMin5z1h5yrl/6R
0p/6vchj26+7xNN517DHft1XUi75ZPvVIc4h2K+VI+9tv+7kPLz0T5R+7B8c
+XD7NVQcv9YKe+zX/SXlkpe2X4fFeQP79V7kt+3X05xjl/4bpB/7V4u8uv3q
IZ76jbDHftWXlEt+2351j3MF9os8vP0ayflz6d9W+rH/z5Gft1/niqfnFfaU
jF9ZueTJ7VdNnB+wX+Tz7de1nBuX/nWkP827Is9vv44WT3mSsKdkvpGVS77d
fs2LcwL2i30B+/UvzntLfxvpx/49Yr/Afu0jnvr5sKfxepiXS77dfrGPYL/Y
R/C8d83YL7Cda4tjJ3l6z6u558f619a6vnqekJ83hluee2wsf4zW3WneGOtl
y5+vdTTy3NNi+Z5aFyPPvSiWv03rXOS5h8Tyb2rdijz3flh+nNahyHPPhuXh
ludeC8u31DoxtZdY31l+ntZ9yHNvg+Wnax2HPPckWP6PWpdV95OV9+Xh52md
pfM52XyVczIl53ayefW74ujhHirrOUrrppTniXWH5WdpPYI89yxleQ/N85Hn
XiPLd9L8GXnuEbI83PLc22P5VzTfQ557ciw/WPMo5LmXxvJDND9J88AY3y2/
hsb9lGeIcdPyZ2s8TeczYzzKzrNpnEr9bfTzlt9L/T/ynO8qqZ+ZnrVK+u13
dd5M57WyPEar2IeFk9dlP5R7KuCcvzKPfeHE9R5QVm/htjPsyfKZ3FNnO9lX
Jf8MJ39rO8n3mrN/aj3kaS1PXtecfVLrIR9refK35uyHWs/JkXe1PO9HmLPv
aT2/iPyq5dtFPtac/U3r2SnyqI2XOzXj7GNazwZRXyx/XeRXzdmvtJ7PIi9q
ec6fm7MvaT3kPy1PfTRn/9F6+kSe0/KclzZnn9F6yGdanvynOfuJ1nN15C0t
T57TnH1D66HfsDz9jO+3ifE6m8eep3ms2nvWL9E/lJSb9T/oyeYh6icln/VX
0zXu67xrZifvtdlOzpFm/UbkG80552lOHi9rX5FXNCc/Zs45yayfj7yT+d8i
D9Z4v/dJxp+M/FLWv0WexHxE5G0abxdfZvyHOKdnznsN5lMjz2DOetmcc25Z
+4p1aNZPxrrYnPWdOefEzFlnlYyzGaceltwrla1Pfc9q9fti7TPue0Gr83vN
M+57LOG+HxJe2Fe5dxHu+wzhvicQ7vv34L7Xrjrf1T7jvoetOt/SJfPX98rC
fV8r3Pegwn2/KNz3diY7Y1zOnmOMs+a+vxHuexHhvm8wret1jx/c9+Mpbhnv
+fXHX01dmNfDP6zzzJkvb9ox42ceNmHVeae3zvgVt4x/fJV/rZTx3g8NfPCk
9j9m8Zm+zxPvnPjLeRl/uv2Nhyy5dHLGz3950CannPNhFp+uJ0w68OQHvs34
Fwsmd9uw+4qMv//U8V/N261lFofJfzl5j8lL2mb8kDt2/F2//p0zPrX5Li0n
bdM146tN3WmLNi/m8ez9wak/9prWIeMHr3XSPw7tkcdz0O+P3enCY/N4rrzF
C2P7/nFJFp+j9znryw0/n5PxL9ted+9HWz6f8YUvj17t8dc/yuKz91cD9rzu
d99lfP1TT2jX57k8nst+fHLgBTfn8fz8XxNfOGTfdhk/btJHXdb8Wx7Pw4o4
Z/6eUMhnfErxvDI+pyg3458Uzz3jzZc22J/xb4r6k8Vt8yIOGV+7qIcZP7iI
Z8avLepzxltMbnguGT+xaBdZ/G8pnm/Gny/aV8b3K+pJxrcv2mnGf9q8ob5l
/NKivWfP8fii3mb8T0W/kfEDivqf8UOL/ifjvyzaUcY3KPqxjK9atMey9ps9
9zJe1k+WtfeyeltWz8v627J+o6yel7WLsn67rP8paxdl7ais/y/rx8raUVm7
KxtHyvrDsnZX1k7LxqOyfrWsnZa167Jxrax/LmvXZf1A2fhY1s+X9QNl/UbZ
OFs2XpT1G2X9TNl4XTbulPUzZf1S2bhfNn6V9Utl/VjZ/KFsHCzrx8r6vbJ5
SNl4WtbvlfWTns+wPuH9j/6nPN9lxpjLU94Q3m23rS9u0fvCtG6Bf371cQuW
LL8xrVvgo3e++vlR7e9N6xb4YXMO3u67W8endQL8wrs2W3b6gpHpXGy6n6bF
VgPrlw5L51/hX6914n5rHDIk2c97xrYfbvvhth9u++G2H277070Fsh+O/ene
peCzz198wXoXX5j8Iv9pv+D2C26/4PYLbr/g9gtuv+D2C26/OGdlv+D2C26/
0v0l8gtuv+D2C26/4PYLbr84l2W/4PYLbr/g9guOX6z/03urZ5467rT+b6T1
P7zTwL+e9MPple+BVd8PujCt5+EvLPhwvQ8WTUjn2uGOW3pPVHGDO27p/WPF
jXNZjhvccYM7bun9V8UN7rjBHTe441Z9f2olbnDHDe64wR03uOMGd9xSflFx
gztucMcN7rjBHTe44wZ33Krf81iY8k3wGXM67H375ktSvgn+7cWtZ7869sP0
PgbccU55XMUZ7jinfKHiDHecyfMRZzj5bMcfeeIPR97PBXmeCxx5Py/keV5w
5P0ckec5wtN5MT1f5P184X6+cD9fuJ8v3M8X7ucL5/nCsd/PHXmeOzydU1B9
QJ76AE/39qmeIE89gaf3J1R/mH+5nsBdH9K8Us8d7ueb1p0a7+COD9xxgNtf
uP1K90DIL7j9Su9VyC+4/YLbr3Q/h/yC2690/kt+wRt/XjV1jT+vmrrGn1dN
XePPq6au8edVU9f486qpa/x51dQ1/rxq6hp/XjV19ov7b+wX3H7B7RfcfsHd
n8Ddn8Ddn1TfI14ZZ+HuH+COG9xxgztu8MbreYcsbvDG63mHLG7wxut5hyxu
cMcN7rhV37NeiRvccYM33o46ZHGDN96OOmRxY3+NuGn9mMUHXrJ+zOIDd3zg
jk/1ffOVcQrucQrucQrueMJL1rNZPNN9WoonnHhyL236bsDz/+y38Ywbarm/
Fb7JT9+80urfd9dyz2n6TsXURec2W/p4vD+5ON33sG6fn29x/F5TajeMcyrw
8X2/WDRgi09rZ8b9j/Bf3fLS9699saB2bpz/gN/cqfuT0zf4sp77++Atht/+
+JQfJtVzD12y56O1+m7w3f313AcHX3/uDWf1nH4L+/qJ7//U/R+8OOXKeu4X
g1//ybJTvr/qonruq2UdfdfEg6cOuPyuWu51hS8ff/2k9v3H1nL/KfzMewbN
m/v55Nqb41wp/PAt+13wymcf1z4b50fhl2x9zbxbpy6IfbgV6Z6zTSfuM+PB
M56r5349+Efrdhz25uJR9dxzB9/17SWXXz52BPdkJT724C9OPr33NfWcn4B/
2nPVsbcvGZzOM6V7EG/7RaufPf5oeo8U/nKzsQ+d+rcX0/uf8JquE1pve8eH
6b1BeNcBKz6+6KeH03kX+BETjhgx/9rb0/kV+JXndl1xzYxr67nHDf7Z2Ru8
dsS2F9fz3hHr5TUP/3HQdz2eq+W9Hfj+C/bsufNjs2o5vw7f9c0/vnt/rzvr
Of8N/+XkR3c/ptvQes61pPzAq7/4Yu1TLkn34KT72OKeN86dwxes3u/qXfa5
Pt3/Av9q3bqV/nP/31M/y/rrzrgXjnPb6f6eM/ZZa8TsS1M7YR74WNz7x73P
6bx/tF/uR4ZvGu2Xe4TT+9bRfrlvF75RtF/upU33T0T75f5WOO2Xez/hV0X7
5X5MePNov3EOJvEHov1y3yK8h9ovfB+1X/jHb7T6x4cTLyLOaR67VtwTyD3R
8LujXXOfMrzZE0W75t5h+NnRrm+Mdg0fEO2ae2zhtGvuA4VvpHad8s3Rrrlf
Eu52DX9U7TrNq9Wu03vDatdwt2u42zXc7Rp+uNo1/Aq1a7jbNfNMt2u42zXc
7TrxaNecY4B/Ge2aeyqZpy2M9st9jnDaL+2Udkw75T5H2uvjd5y+3hm9L6r9
WZxPSt+/eumYCx7q/pTH5ZT3432hdO/y7XNnnbfz+HruoaM//LTztNaXj3iv
9vE4pwV/oPk6A57YbF7t7XEeC167xWmvnjNoYbqPDP7nBX9aY/riN9J5Kfi4
s07baY8jxtbfpv62QzyXl9Xf7hzPhfcY4d2XL3qr2/D5tbwHCD9pynHX/PW5
hbW8RwdnH4H30OBP3fDY8Wf/+t/1vMeVvnMV91Zx/yD97bioz9wPCF8UceN+
QPj3XYp6zv198EcjntzfB9/35mcH/L7Xglru14P3jjhzvx58g2s7zpk67eta
7rmD4y/v0cGPjufCvQDwP8d5Rd5Pg4+M58V9EIwjx0R/xf2G8AOYh8S5f/iv
WvaZe+iEOeleBvjfoh/j/Ul416vOa3Pm6gvTPQvw//Qbu/uGX3yT3t+DX9St
bbMz9n073VuXvj8W9Zxz0uTNusZ4xLnnlFeM8Yjzf/Bx0b6q31seM+HDmM9X
v/c7ZkKbmM9Xvzc4ZsK/Yh7O+4HpHpHQf2bYT39bH/ZzzjLlAaK+cW9jOtcf
9Yr7E+Fup/Cz1E7hbqf0b26ncLdTuNsp3O0U7nYKdzuF004/jnZKv/pUtNPz
I27wbyJu3aOdwpdEO7014gl/JOL5YbTTdN9ytNMnIs7wuojzmdFO4T2jnZ4W
7TTdrx/+To/nAj8unkufeB7wU6Odcs81/AG1U8aRY6Od3hPtFH6g2inc7RTu
dgp3O4W7ncLdTuFjop63rB7v6p6K8Y73TOD3xL1/2v9N+Y2Tq9ePdV3U3uEP
qb3Dae8tq9dxdTfFOk7r+kms67V+n+T8Bpz1ePp+Iesm6an+zl5FD9x60jgu
PdXf5avkE+DOJ8CdT0jfZ1C5jJsu1/dUUC7c5cJdLtzl0n+6XLjjBrce+lvr
SfN26YFbD/2n9cAdB7jjAHcc4I3bX1PXuP2V98cpF+5y4S4XTrmcM6Y+rxX9
POeM4YOin+ecMZx+j3PG8H9GP4/+9L0m6YdbP9z64dZPfbZ+OPrRA7ce6id6
4OneaOlHHv1w5F0u8pQLR972MP9xuXDrh1tPeh9CeuCOP9zxh1s/8yLrh1s/
3Prh1p/ep5R+uPXDrR9u/SkPIP3pvKH0w60fbv3p/gbpT/eu6TnCG7ezps71
k/lD4/bX1Ll+Iu9ykXf9RL5xvzpk5cIb96tDpodxuaT/qSvpf+pK+p+kf2bM
9+iX9ov53jkxr4NvGPO6j5V3vTjmS4/GvAj+fsyLtoznDd8v3iOrUZ5268jn
vBT20P/0C3s2i/ct4btF3uyqsBO+SdjJe5XwA+O9Nt5vhHeIfNpo9W89Is7L
V/zf/z7KxveR6t9Ojfg/rXH8rRhHuL+P9sW8mnv30n0MYT/zUtoL81Lmn3Dm
n9yjl84dR5ybK2+2Q8SZ+wFpR8SZ+wHhxJn7/uCOM9xxhndUnGlHjrPH8ZFq
p44znDjvFO/XUW8vf/FfFz/VbmHtY7F+gbN+6Rrv18EXtjl1/JZHL689It6j
g/e+psPsv8+aUc93huAnxPrltFgvUJ+7xHphaAn/e7zPD6fcq0t491hfwK+P
9cVa4pcEHxJxoJ4ThzXDXzj6uQ8Ivmn4yz1H1OevYr70WOSxGZfJY3eJcuGU
2y7KhVPuoVFuuvc9yiXvnc7FRf0hP8w4Tn6Y+6rgxJnvhMG/jPbCPVDpux9h
z2rKt4yIeJJ/hpN/5j1wxn3aC++Bw2lft0R84MSH9z/h5DFoX3DaF++HwzeN
9sj7oul91vCL90LhG0WceS8UfnbUZ9pvOj8W8a++F/2T+j9U3dvzcXbuaLTm
Pz2UJ4GTJxkpTnvnvjP6SeLGfWdw2jX3iMGJQ/W9XWMmUJ+v1PyKPEz1PVxj
JtDPcJ8X+veIeJKHhA+MeFI/6Yepn3eJk2egfqb3CcL+oSWcegun3vYQJy/B
fW08T/cPcPcP8I3VP9APE8/J0T8wL6J/2DTKhVPu/0S84EdGPe8U9qT9hbCH
+MN3D3vY74avpH6D+ZX7Dbj7Dbj7DbjjD3e/AXe/wXzM/Qbc/Qbc/Qbc/Qbc
/QacfmPN6nGwzv0G3P0G3P1GOu8R8de5jiwfAmc9jjzjmuXhlqfdWR5uedpF
4/mBbzP59N0bycMtn75zJXm45am3lodbnnrVeF6lQ5LXOZxJnMO5M/LA8DGR
B0aeOCP/WuRR4btEHvVF8d7B0cO8Aj1w5hXm6T6n4NzXCX9UdvK8kOdeTviO
Yc+z4r+SnfRvtof+zfp5jujn3gfGx/vDzur7ScdMYL8APTwv66EdoYd7oDx/
gxNPc8+7hpTMf4ZU9W+V/n9I1bhTU2fu/nlIST8J93x7SMm8F+75DJx4mnvc
H1IybsqeZCfraOLMOhru/Va49yXhxNmcOJt7nwju/ZRqPZX32oaWPN/xJfYM
LXle40v0P1mSh6y+17WSvxpW8rzGV/lbyRcNK6nPw0rq4bc9au+df8f8rP7A
/dz7/+KybXo+ND+rV0cEd304KLjbHfodZ/S7HX181AbD+oxamNWrj4K7/qDH
7Rd55yHR73oFd/05OPS7/X4S8s4jHV4dn0m2x3lv4uPnTrlup9jp/CR6XB+q
n2+lPsyYvNWoyx5emNVPuOsb3O0C7voPdz2Hu3+oLrfSrsnbUC55Gzjlwk+P
fVXHme8luF5NLOmv+B6D48x9Ya4/E0v6Je53Rn+LucU8BD2un9X3QY+ZgPzE
kn7jvqp5Wk2d9bt+bjBq79t/fOfzrJ3C3R43v6vNuj+88l3W7pB3/7BZyLsd
Ie9+Qzyzx/0V3O0C7n4M7v4B7n4J7vZeHZ8OGXe7q7anJpN3e9/q9WHT2s/6
NmuPcLc7uNsp3O3x/zfOZfWkzN//Ns6uP2Xx+f997q7PTT2X//a5uz5T/93/
lD3fjULe/VLN8HbL5r61KOuXyuoDetyfoMf9Bu3a/VtZvUK/+z30u98rq4c/
r45P4nFvaTr33nb2Og/PPvDSmGdW9k1mR55ha+2bbBj9P9+FIp5H3rb3T19u
9Pf0Paf03fItN/rZJdcOreX7K+kcYP/z9lyw+OJavoMC3+uogec/duJ1nAtN
/Ibe673frdUd6b5g6v8qXe+/5btX/pa+vwIfePM9H3y0+7Xp+yXwNVq1n/yf
y25N3/9I32GeNmP9o94fne4XTt9/nvLO50tGDE7fX4Ev/cdLl6z766vT90vg
bS+fNu26lsPT9z/gZ9+12ujzbn4w3asOP/ypF7/s2PWedA4nfRfu0ha9Vpx8
Ed9xT3yLlrvv9Zcfr0jfR4Eva3f7x78ZfHP6vgi8+yn9dryh333p3va0j7zl
ktN6X3RvuhcPfsDj16795TM3pvUenO+5F/Wv8h7r6nH+p/o7OmMmHBHv9VR/
h2bMhPnxXk/1d1zGTBgf7/VU348/ZsL58b5M9f3yYya0jPdlqu9n/1/98b4M
9Zz21S7qOfm0dP9K1HPqM+3O9Tl9jyjqM/fQ0R6fjPrcNuozfM+oz+tGfYZf
r/pMf9g56vO2UZ/hR0d9/kvUZ/jqUZ+vj/oMn676TP/g+gxfovoMd32Guz7D
j4j6TL2lHm0Z9Tbe60l8edTbeA8o8TWj3sZ7TCmPd1LU23jvKfF+UW+PiXs2
0z0h66w44uvfPF37fdynCd/hwM+n9jzlrXRfP/yu+O5tl7inm37vyX4jL5s/
b2LtLtFu4dfEdyG5x5N+b7v4ni/fe6af6Rnn7duHfvqByaG/ufZ32Cfl+17p
u+LxfgH3iqb2Hv7y3Rr4b8JfvvsFnxDva1R/f2jMhGPifTq+M8T41SL0V3/X
53/bXZyD4vs9yG8b5Y5Uu74s2nW3iAPtcWzEge/0wK9QnNP9rxHnfsGp/7sE
53tp8HUVf+rty4o/nPjPjfjD5yv+1MOfKf5w4t+n+n23OuK/R/hDPTwx9rO+
iPdx0nn+eB/nZq13pkbele/QwNtdUuRd+V4LfETsK3Euned1ZpTL9+2I85Mq
l37M5cJdLpxyF4R+2sWQ0M/90al+qlzqj8uFu1w45fJ+E/VhqMpNzyU4323i
uawX97uOUt541cjHIk88LU8cLE8cLI/9yP8q5NM555D/b+e3/+08s2y+XTa/
/W/nyWXz1bJ1cdn6l34ZO9eI98WIC3zNCye8+9Rv70xxgd928et7btjlkVQe
fPUp7S8+feazqV+Gv/7+Dgd16/1uihe8z4gfr/vD5Y+l5wTfN943TP0I4068
P6jvtk8aHuMR9uOf7YfbfvgWL98yetuuFfvht0e/iv3wVaYvuf6bmY9Wzt8H
t/3pvVrZD2feiJ34YTvhv4p+G3vSeemuS268ZMuKPSkesgdue+DYg54UP+mB
Ww/celK8pQduPXD0+H1Sy8OR9/ukj8b7pMQ9fZdD9T99J1b1J31XR88lfV9L
9R/+huo/vK/qfzpvpvjA7W/6nlL4i1/MB+wX3H7B7Rd8S7UL+B1qF+m8hNoF
3H7B7Rfc7YJ+2HbC3S7SOXa1C7jtgdseuOtz6g8a9aumrnG/aupcn9Fnebjq
c5pfuZ7z/Knn6T3MeP6u/3DqCfLE2/Jw1ys49SqdT43nYz0pzyA9cNdPOM+d
OMLfiedLudRTlwt3uXCXC3d9g28a7YL6Aec7C9gJ76h2kcaZqD/Yz3zA9sNt
P9z2w21/ut9M/RX81eivfH7MfqV1k/oxuNsF3PXc+ZPq95TGTHAc4I4D3HGA
Ow7w5VMv+P2jdz+X4gBfOqRr/f7LKv12yrcMWHrNq73GJn/h9hduf+H2N73n
rvbLc3Ac4G6/2Gt5eOPjQk2d2y/+WQ/ceuCOP9zxT+8nqt+Gv6t2TVwbj0OH
zB647YE3Po50qHO7hrv+w92u07wv6oPm25mdKZ/T+Hw7szO9V9j4fLvu1cbn
23Vup2ke2vh8O41HlItdtfG8qr+fVTNpt3vuWfvgLj+kuMFPmjJ4m9W6vJz6
TfSNiPkD7R++WazXquchNXUuF+5yK+/zVpeL3y4XvnmUS30jDqPivc6Ux9F7
lKn9V/VPlf1pnjPlIu/3H5FP+YeQx9/0nru+++n3CuF+T5C/J062x+8DVs/3
aupsD3Hz9+CoR/4+kdfFlAc/Ut8nwq7+8V0n9HgdnfLOwY/Wdz95LrYH7u8l
wf39UP4OPdX17dvs+7y+Jxb5dO+B5H0/Ktz3f1Y/7zETXP/h1H/+3/fCIQ8/
SvZUj2MLXf8T1/d2s+9XUo45fpmjH67vDU3aTN8VSuv3Rr83VDOpv79TFuVY
D8/Reqj/1sPzavz7a5XvKKHXeSe4805w553gzjvBnf+BO79U3S+Myb5n5HyR
2m/i/wc6hWSq
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJw1nHXcFdXXxefe57kzc2fuCCoGpaSigKCipISKgICJiiiCXQiKLRgYWGBg
B3ZgFyrGzy6wUEFFCQVbsbAw4F1f1nn/mM9e99wzfc4+e6+997Q8aNweY8tR
FB0VR1GdZLMsitaW3CiJommlKDpOf96q35cLHyu8reSbAd+i9q/SKBoj/KXk
bLUfLdxF8nbJ8doeUp9tqm5fpj6b06b/K9p20zk5+e6Sz0oO1Ha62q/Io6ih
5BaSg3Qdw3SMh9SnYyWKbhYeJ7lj7vPcJ7lt1cf5WsdvKPyr2o8X/kzb4bTr
GLdKHhGu+Ve1TxBeofY7JSdqe07te+tY/bTvQ5IflNy+nWQznfsryeaS70qe
Fu5rasnHnya8bs3tu2nfnXI/pwck+2jrJDxD8lLJI9XnJvV/I+CtJT9P3ban
5Lepn/lyXdvr+u8w4cv133Cd+xThfSXvyb3fXMkVkmdoO0F9arr373gHOkYs
OU5bN7W/khsfl/t58dzel0x4j9p25z3q9/E8c93HN/TVtqfav+fY2vZmjJT9
jtl/gMbJALW1134/6PdJ2g7S790zH+9tXf/Jma+ru/qspWv7kWvStRXCy4XH
CjcQ/kV4vHAu/K3wUcI/SZ6q7VDtP17HGSeZFlF0cOa2bXXM9XgXJf/3s+QE
rlv4APUZLVmv/ieo3zm8c7X9IHyK+nTWPT6ne9lD29n63aTO74NnOizzvW6t
vidkPt5rup7j9fsszqO28cJnCP/IXNE1/879q886wn8Inyy8luSJJV9Ht6rf
3c9qH6J9e6j9Xsm+aruu7Guaot+r1PcQ9WmhtvtK/r2z8A1hXoxTn2MkL9H1
d9cxz1T77+q/reQ1Zb+/9fXfGcL7qO9H+m+k8Od6F1up/wjh+Wqr1jymOki+
rH325zno9/kBt5O8oOR9eXYrtM+zkvtI9o19nH6Sx+ocY9VvqeTmNR/jFz2T
5zmf8FXqc7T+O5IxLtlUfd5U+zPq85HaJus4O0q2kXxAsk7bAcI3l30tm6n/
JPU/PPG1cs3jhSfoWFP0f6G24cLbCz/M+8mtp9ZS+zAdY3p4v8xj5vnVwmeq
z2WS09Snka5vqfB6kt/p3h7Q8feSvEhto9T/Uv3urf4d9ftuybpwj9zrO+q3
p/p8qus5T//vVfb4eCHgtug49ftA/d4uPIYYS0Mlt9S72Ed93hO+PLcubKI+
7zGO1N5TcivpuAfV/1jJhjrOCWofqr5dte+Jwj9o311y971f8qfU+/6Y+tmg
N9A7r4R76SD5bupr3DX1c2H8t5R8VduBZd/n1lXjT9SndcXP/xjJLmo/RO2L
1d5Ovy9T+1jJj1M/p90lyzXPd+b9wNj9B0l207abcHfJUs3njSQ76ZhDhd/Q
vv30HAeq+U71+U/3M0dtb+mZdK5637f0+8WSn9smzC31mar+f+tcJ+W+hn+F
6/X/lSWP14PVvgG6Vu2tNMf/0X/76b96Hes9tTfSOffkfWlbpN9zmTfoOm0/
6vcoSR0iillLJCuSq9TnYW2jecb6cxO1f6DjN9N1Zmq/WH3qhBfo/xHCqc77
oNoP4Lxq/0RyP7Ufon2baN856DPhNsLvCTfWc7kBHSuZ8EzVPkPXeRD6Dl3E
/BI+SP99recT65iLecep1xvWnY3V/j/hw1ljJB/VQdbXdkhYt1m/6feFjrev
pB559JL6jUEno2OYU2r7TOe6U+deLNxUcmbZuon5nFY9dw7WeVezNjBfGf+5
8RjGtfosYk6zDuf+f56OmesYN6r9Hf0erf/+lGyA/aA+/XUxL+jeW+l8G6p9
on43EH5LeJX67Jtah/yZWh/xnhnz+2v7QTiXPF3HnxvGwBM65scljwF0G/oO
/Taz5HWONY4x+bzwdPXdW/s/g87RtZer1lMNE+sq8Nv6b/+Sj/k1ukz7LCn5
vurU73+RdfI/qW2IerXdL/mZtm303yz1X1jymOEd0f6sZHv121T/X6z7fSP3
nLw997v+XPi53HqMY2KrbKP+20peo/6LhE9n/AgP13nn8D507XuXPWeYLxvW
WTehl17PrRduYxyVfD2/aZ8lide193WcvyQPLXmMHoG9IfmJrrmljrNSxx2m
/xrpHH+z7uqcL5T9fNHbJ+e2if5T/83CWsI68l6wgc5gfGnbSjhjjuo4JXS1
jnOKft+ovnWSb+XWxadKvlS2TkO3ra/+q9Dl6v9ubjtsouTp2DfatyrZueT2
NbaZ+q/EVlD/d1i7Jb/RHHmibHuUNQz7jfVhK8lXyp4nrCUbMg5YB3mfuW3i
SejhkvGtrO+SV2h7Wrix+lfUf7L6J6zLan9e7d/q2d6A1LNNWfdLHsd9JK/V
Nlv4dj2vhyX30PEfyHy8P7VfP/3esuT7aqrjV7X/RTp+E+GYZy78feLn9p2O
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
vmvH1lPM9TaSDXTc/vr/SMnbUp+/f+p3yPXwHuFB4EO41vsCRje1rfpcN8Bt
5Oar4a3/yB3j+D03nzswPDf88b9K5q/gbBqXzSvNCPgf4ad0rB7Cs+AP1X9t
/Xdlbu6RffHrG1UcKzlK8pTU3N6mkoP1XvdR+yO6xwmJYyjfx+ZVJwl/gC5K
zRd2kpyWW49tJjkxNV/SHv4yMe+3JLY9yPVwHR10v72En1afJ/W7N/5mZL4d
vBVjWWPxXe1/vuR1qe9vB8lX8W+Fb9UxO8ceM1vGPg68NtcBt71tOOZjvAvh
2dqvU279SrxosubRZsSRJNvrerqrzxPqex/jVvsNYD6oXze1d84d7+hS9j0+
VjLGlp6ZmhMaxH41627sUOIV3PP/P3ckx5mNHa25PQD7FZ9I+36a2Ues1dnv
O6VqvgQfFu6kVGcdgC+b19lPxBdbX/v2Te0v/hF8Rvw2xgFjgP74wENK/p9+
Q1k7qsbjqj7vH6G9FLiahdr3otzHgGtaEY7DeT+WbFhnnhNesyr8CzpZ994l
3MveOu4ynj/XqH2+ED428rOhnXcwSv0OjOxfPp2Zg8J3hFNtUGdelXOuCNf/
L35PnfnYAbl5D3iVGcxXtQ8ved+y8OeMUeH6OnNu/XTc99EzkvdIxmr/NvJa
/XnZc3hs1ec6Jjzzv8t+B0Mqa5au6L56r1tws/CGD5WNs8i+Fj5XSfLkqnFL
yZO03Su8seRBmXUVc3l+2e3fRObA4MLOjmyDPBrsEJ4rz7dBZD0xM+gKeGTa
f458fq5juXDz6hoKIpoQ+9pXhvXixMw2wGU1+45PBD02Xv0xsU/DNtC5/iv7
WTE+V2v7ILzfVeEa4MLpw/OnP8+Wd3JSZv0NPw/PST+uo5t+D9I5ftD87Sg8
nmeXen4/HeYmsUNiUC0Kz6dZYU4RbyPG9Uzqc/4Trq0XvoTkT8FW+bJs+2Tf
qvFwyX5l2y60z9b+k1ijJTN8Iu17SmYdh64jFjO4bLsKm+oFtU+UbCXZLfeY
PT6zLYXenZ84NgLHSHzkVP2+iDGvZ3ihfm9ecowBv+1iyYWx/bDzhD+K7YdN
Fv5YuIL9jx2a2W87V/hDtXfNHZ8khvmpznuxjrlFaj/4enQo+iY3Pwbn1yno
YWLW2O9X4d/H9oGuFF4mPCw3R/2g+n+n62+v/pdE9o0ek/xXfQbm5uVuUZ8G
urZHhO8QnpYY/60+u+eOgX8RfOir0LmSO6v9fnRyZp/jUcaL+p/H78h+a/uw
LhBbHKvtNLW/Q5xH72yJrmnXqp81zxy/cn/9/prxJtlRv38s+/jdS8bcT7PA
g8GHYW//VLYtmmJLCu/BnAp6DH3WQO1Ly9Y7e1Y99/eomsP7tWwebygxCHSO
ZE+Ntx0i21TtCx+zP7521eeC8++rfX8uW3/1rvm5/qM+7+t+JzMm8Av0f5uS
x+65zJ+SeXP8+ImSc2P78ROE340dDzwvrNHb5R5rd2FD6Xzfc/2Mc51ruvrX
B97ll7Lt0qOrxvD56Mb3ymtM62iH3PFqcgH6aN8DuAfd0/Y1vzt4dfz45ep/
SNV+JO9uqa5nm5rXmtcz62b0LDr2nXrHl3PpyLn1nuMNifHV+97bCH9Y7zm4
sfC8es+vJvgHwkcIx8LvC5/Meig8R/hg1qKKdRjxA9Yj9EDroHPeUJ+R6jO0
Yj3UOuh59ARxO/TPU7r+1pIXEh9Uv0+FR0k+kzh2dpHaryS+FnkdxEfAvu+e
2s/+EPsxsZ89n3GUWDeybsMdT08cE1w3MSf0Gs8wMTcwV3gdyW6px8dfiTmw
/iXb7j0rnsuf1ft9MX6OlLxfz/epyPzDLOE3Ivv+cFHgWmIu6nXhPDHXS+wP
fxV+8VXWjcR+F/5ID8mF9Y5fb1FxLAnbAG4VzrbALqt53cEHxheGH16vzrk0
k6qeQwNT88nMhZ1Sr9OMd2JHDcv2q38Pazlza+fU/DDjc4/UfG+zOvP8l1Y9
d4mbwT8zJ3ZJzRUzDocJP5Xb/ob3PTLY1YXkUt3LLcyJinN6sEvbV2zTY9vX
SS6ut17aumJeAH9qVb25UTjStGJ7F7t3nYrfAe+im/AVVesAbICjgw+ygeQn
9dbDm1XMf+Nv42uPDXHtTSqOu+M/dpYcU/Ga26xiPxMfcJuK4+LYzy25dr3f
eyNz0fDZs4RXx+azn+SahaeXPOYYb9h92HOM1y4h5vt36hgXsS5yHYhBEYu6
RfjmYC9iO5Fn9FrZOUj40G+U7UfD87eV3B67N3Fc9xTyhZI11Ep0Umz9gR5Z
Fpmrx8bbMbXtQawa+wd7dnawGcgDIx9sXOzYGDGytvBpmeMS+NEXB7+MGGWf
qu2UPvAYied6E8nbgz1HbH2tOsd0iLljv80PttPtied148TXsyDYZjtWbbNh
d/Wv+hpbBluMfbH9RgVbFju2SdnjjWsaUHX7Azpm15qfz/s6wJeSX0W2mXge
2JtLI3Ndn0k2T8yNEQPaULJX6nWFGNDjiWPxp8a+xgeDzbZT1fLBxPkY8Cnb
SK5feD4Sf9i24vHMuIaf7l1yfJBYxxPoxdixDvQGF9cl9Rr5a+J1irXysKrX
8RfVJU4cF+a9wDvUx84xqMS2gVkHx0jOCzYqzwqubgnjmXssOQeCd4F+xi/h
/Y2ueG4yR/EvGH/b6VpezKwn64Mt92+wIYmzM4/ODvbwPeFcT+bWJ8Rbfoqc
V8E72qFqm357yYeTNeZm9BA8if7ciLVI53kEvhM9pHt5DG5S+GTh5YXtjHbE
hdTvtshc8SUlx0mJg+LTMjfJsWH9JQ51ln5vVtgG+VFySGr7BDsTrho+4tnY
HAa8BnYwnATt2PqtCueqfF44jwdeDT6EuEFv4enat3HuGA75D8vC2GJcodvv
Dvr9/GCDrYRby22/se7Dr/dR+02x/V18YOxqYn2vBBuV/EDyN36Inc8IviXo
WfQtaz2cF7qLHCHymeA4yc/E50fHkod5V7BD4P2W6bxT1L5I/3+Z2OZdjC8d
/PmHY68BrAX4gIMDRwQXAY+JXoVvIq+IZ0zuzqDgRxNvOr5svpXrgOPviz6L
bZst1H+D4TLx5Zl3+JHEioRfEl6vcHz2eeFGubkockla5M4/JKcRXcOYhTeD
Z4YzWk9ydeox3Ds1R/4S60XisYf/iB+5suZx1SLzM8d/gXM4IHdM/im1j8q9
PuLXnl/2XEAPVyu2ebB9iIEMRZ/FtkWxLXeXXFVzLtyW2ndr9dlS+Ar1uSk1
17N26thRZ7VPix0v6iR8eWw+4VlshRAn2UXt96q9d+BMbokdn9lN+H7hdSu2
2bDdiPfBxTeW3DC1Df1G4rjNrup/n/rvkPk4cDDwjS9JzimchwqPuDB1jirc
4k1h7ccGwF4dEjsHY2hsPgxeDI6M3FpyZP+KzXcxd67LneMJ9wfvx3rDuoNN
3iV2vu42sXlIeLQpsfNgsAHg0EaXHXslPw3ejhgqPi85ebTBf5IHgz1wR1hD
ifniR/UP3N301PFSuB580l9y8znENsm5hMNbl/mS2I/7n453VW5uEv6qQ+z8
1Y6SfRLbMLfH5vXhQeBAmhaOFxM3fljyi5K5J3KrwMT34d7RRcTG4ePxe/Ft
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
t8z8MLnx1Hf/ht9VuPaZGnDqKcjvhJeAw4Ubp/4f3oPa4e/Vf1nhvFv4FTjl
LRiLkWsTyEFdk3date0B/9S/cD4tNi1xya7qv0Xk+ogbhe+KXJuzbWa+mroA
eLCZ2nfHwrUnrPWs+Vdm9k/Jn5+W2ZekfufjwnWPrwlfofZrIufVX5XZp8Zv
prblfh1jUeE8Meru4C7uzRxXpY6DnJvDItcdHJbZjiW//ffYfvd3ievT7ovs
Y3fPzKFhR5HXQU0xNdk9C/MgrN1LUtvb1D1T43kg3Ib+3zaxzUn9K7HRpZHr
c4lZYG9gd1Anjp9G3RA1YheUvYaS+00eId8/oAYfP5m6pJ0T27p8v2FYYnub
7yVQ40ntZ1J1fjjfRDgudZ4532U4RvK6zDk/5PaPLlzXgB9xYOE6CPws8sbh
3/nWQusk+EfCByS2//lmxvXoxMh1B+Sc812JE1PX1X4qPFLy2sy5QNQXkNNM
jTO1zsvjwDslrsujXoycAmpfyfO+EI6hcJ4Qvh71tNS+TU1dk/G18JGpefhl
+LmpOXZq9KjV4xsg5GHzfQjiOtif6JBRhWsr8A3Jeyf3i/ogbH1sftYLbCfq
/J4tPB+YF9iou1TtR5wRYkD3qq1X4VrCfxgDhWsDyfH4O3E9I7Ha3xLX2fDt
CfQ/dS1864H1glgvMV/m2/WJ/RHqwrcMfA7rI3YsfMl2hXlM+Ey+d8F3IYiT
UbtEbhJ1fs8X/n4IcT6+dUAcH46Ra+UbI/DyfOuAGA+xHubJjMxxZGqaPiuc
z/1z7jnD3OEdUTNHzSr6lnwv4tHUq5KXRW3fK4V9XupxX5ScXThehR4mN566
UOpQ3y3M12DzULNMjS32GPlmPKd7C3P9cP6np6515L2jZ4jrYXfPKhy3eCyM
AWJ2rFM91ecl/Xdu6np2dBC6iFoBYsqMPcYg+THYuryzmZnjhtTClKq2valX
IFZKnHRS6pw34uTUmD6WOZaNbQ8fyHt+RPKN2LY3459cO3J+qGEl/oI+R6/f
lznHg5qyInE+zx+J48fPhHlKjGn7sp8/MdQnw5wlvsM3Q8i/vlvHeTlyTdNd
mWOU1PjcGfwO1kfykKnZJB+HGNOpOsZHhWu84K/gscjZI0+A2sPLte+dkWt/
Jif2Q6lj5lnWCZ+Xeu3Df8GPOSKxD873S8gb/7Pkc1DvQD0wNc2XJfapqTmm
5oU8octT1ztQ58wcvzqzvkVvU3dDnT9znLqbWtm1ltwz9853U07NzGNgG1+W
ma+mzouaUjgE6svJV6fGYb2q84j4ngDrxeex89m+SZxfgX6aJ3lpZq6bmili
Pw8FfUJMkdgienxKWF+wB+Bn4Wmpy6NmhDp06tGJOa0OY2ZiYn6DunPimsTC
eIa/pOZz+L4LdRmM8YWFOUS4RGps+ybmB6jJHhzi3dThkttATObRxPYpeRHk
P1BP1qxkuwSbfXXwbalFg8+E18QmId+Q79AQSyCmwDcWyJEgFsMaTI4svCjf
pRkT8kCo4aUGh5hLI2z1zDF36sjaBu4UW4XvAMBvw3PDxcDJwFMOC7wf9cYj
AgdLfTGxS/hPeA1iS/CNfNuHnD1iB9ig5OJiU3WsmvvlvvsVrjkjr4b8mpGB
b6d+GQ4dLn2Nr5E6LoA9SV4TnDPcM/EGOGq+s0H+AGsxazJ8N7w33Bq1SNhT
zxTmNOE2qXeG74b3ZgxTi8l3CuDTqM8jbkfdN99VILcTXoAcCfKBsY/JAYVj
53sCr6T266l3gbOGu8ZXIkeIOAgxPfJmiCH+lzoXgZwEYot8u4AxxlgjJxiu
m28T8A0N1kHWQ+IixEf43sfowPlT941P2apkLpKcDXJIOvC+UnOPfDcF3hn+
+bnUeZLEUxoyXqrmQqn1xq/Gv6aGA7/qr8C9UDfJtwnQad+k5hj5zhb5yuTX
8f0BYlJ814vve1FjAs8Pv8b3HVjv8MHJgyQfkvpwciDIhcAf7xxsMPzc8zPn
OZMY9GhqPoT6JHI3yeHE3kX/oofJwSQPnO/G8P0YOMapkb8HwzcQiIV1Tv3N
BOy+Fwrz3fDe2P3E9+HS4S6pMeU7EeiQ/wOT9Mnt
            "]], Polygon3DBox[CompressedData["
1:eJwtnAnYFeMbxs85X9/MnJlzVJSKkkL7pmxtqGgjS1G2oizZyj87WbKVpEXI
kiVLZCdZIilrKKSQFkWRbKlkl//9636v65vre595l5kz877Pcj/3Ow2GnNd3
eCGXy7WrzOWq6H/bNJdrpv8HxLlcn3IuV0vnT5V8pxodovI2HZ+p/JSO/6hL
crmv87ncTlEuN7OYy32V5XJnSd6mPrVV/lvjTVD5S9WfofGGqv23qt9V8vNq
f7fkoZIbqc1dKq9S+w4q3x35+ufo3Peq30PyLLVvonNf6tpHqPyTyvV1D9eo
/jWdO1bl1Wp/s+Tear9Cbc6T/LPk5pJfkFxH9/Sfxt9fv+9w9a+rPudzPfU/
VOU9dYxW+9cl90dWm9clL1D/r1VuqvvbVe1bqX8Pyc0l15PcRnIvye+p3YWS
d1Wfk3WuhY4mknfQ+R91/WZqX1dya53vqfbtJDeX3F7yEZI7Sm4vuavkoyT/
pfudo7FG6NyfKv+i8wdIfkVyXuVL9Pt+k9xR47+k8dep/2GqmyG5L/er3zBO
9fP1ewaoXENj/KH6lurbXfWdwvPuJvloyWM13hK176zjRpUbasxBKhc03jcq
f6lzp2msHpJXSu6g/m3V/3X1f1X9T9H4H0quLvllyT/r//7q/4DO/aQ+A9T+
eJWP0/kBqr9A421WfTvVvch4useFqn9E1zhM5T/U7mDVv88zVPk3HQdJfk9y
WeV2pVzuXbU9QW0fUHmRxrtW9R003ucar5quMTs8q2dUrtT9PRjuZZjkQcw5
td/K+Cp/quMEjXeQ6perfxuN+7TqHtS5XionOvaTPFlyF+5V7Y9SeX+1X6b2
u+jcFRrvVZ07RuXOOqZJ/kDyiSq/pnanq38NnTtW91RN/c9QeU+de1XyF+F5
3qZ2vXV/nSV3lHxI7Pe5l44pan+C6u/U712t+k6qv0fykar7TuPdovq+klfp
fiJd80zJz+v6R6ncV7//WeaS6h9X+zbq31DyPrGv92W43tTI87GxrjFJfQ9W
36kq76j/x6h+is51U7m5jvslT5PcU+V9+Y2SH5bcW+XW6jNb5X60U7ms/4fy
+3Suq8r9db3jJA/Q9fsz3yWPl7yK5yR5b/V5W22P5zmq3FTHPZK7S75H5Rn6
vU0k11L7j/V770j9fm/UeCPUfx/JLSR3iP18xql9qvanqv0cte+jcQbq+cQV
Oqfy6apfK/kAdJ7anCV5veQe/CbJ+2V+f7zHW9A/qfVmA43fUXKkY7jkt1V/
l8q7qV5D53ZXfQfJuzAHNV4tjfuaymfr/wbJqY5dVF6qdjur/D/1eUdjtM+s
T9ArU9W+pDaDVV9T515Q28YafyeVm6ncTfWjJd8g+SLJZ6FP1L+p2l8geSjv
V/ITeeukVSo3UvsdVW6q+q6qb6VnMEn1b+oZHadyA9XrMef2Yt2hL/XMHlXd
InSmzm1T/a0qfxV5/IsS68tddFyo8m5qf5LKKubq8X7QH/xetf9Acl31x/7U
11jt1X93dILqG6p+ii5cIflk1c+WPEHlT9SupurPC894mI4PNUBZD/k03e9j
Gn8419f5jzT+CMmvYp94pirfzz2pfVX6qX5aYnu1o+RFkqdIrqH6WPJCye30
jPrrWs9JvhF9pvu9SvJiySdJroLOk/yK5Ikqv6n2FRpvZ40zR3KCPpGs6twT
uvdXJHfS+I11YqnGf1XypapvJnmJ5LckXym5reRPJR9Y9O87R/JrKu+o8X/W
WHtqrAM1/nNq31b19VX/ieqTsp8Nc+dulTfqfq+W/InkgZIPRu9L3k3yr2p/
g+qvl3yhzp+p+jGSR0u+WPLZkq+VPFLyeZJPlfy+5F0kX8n9S54k+XbJo1T/
P8kTJd8m+WrJ52EPJdeRHKn9y3qfd0p+SPJY1Z+v+rskPyz5JskXSH5E8vPo
B8kXST5Rv2+5nkeF+j+r+52u+pmqv1X1F6o+r3MPqP5s1a9VeaTa/yW5G9eT
nNMxTs9nqOR1KlfRPbyp+mtVVaHylvD7P1X9II23nvmj9kdK/lLt98N+qX5n
yb9IrqH6c7BXOjdfdS01xktq31dz7z6Vf+F9YmvVfo3a/yV5qtoPkfyV5L3U
ZgL2Re3vVvkh1Z+r+n2xMSqfrPMrcrntSmOIyhV63/dI3KD+5+r+Uuyd2t/C
T1N5jPpE2BbVv8p80u/5QHX/4GcxH/W/u+pbq/4z1X+ne26j/pPDmp2u8ZtI
vkLtVqr9Cfr/heTvVJ9iS3QMQV9JnoRvpfHHqXy5xjlH7a+TfIXk/0k+TfIo
yZdLHi55iOQOGr+h+p8V+/merDG+lJzp2s/pfjL9xmGSX9A9Hq1yHp9S8nO8
A5W/jq2/rgvvqFLy6yofyDNQeULQP1epPJz70fgF7I3avqLxN+r6L/P81eZn
levqmS3N+xntqvIynXs07zn6ucpXq/82yYep/2z1/xN/QuOdjP8n+eDMz+/K
2P5DQ11f/3KN8FNUmM+aUZ+8+nyitutVf4LqZ6n/sar7OrN+wgbUV/lgjfmR
2u6g932pypewhivsc+F7seaZ28xxdMHFKh+v8jqN+RhrMrN+nahrvqPxF+DH
8T50rrbOXVj0XGJOPRR7TiHjk5yi8kWqz0teiX1Dx6vPg3nf00FF20RsI8Mc
rvKuanOs6vvpmI5Ppfb9VDdC8rOJdXoxsg5F16NDWfs8X3TrS+pTS3Wnq31V
yWdm9n/wgxbo/i+VPFZyC8kfSj4rc3xwn+T3JPfV8+yrsa7RuJt43xr7FNX/
go7W2BcXfb/Y9N1VPiPz/L1d/d9V+2GZ1y/r+H3JV6jNSt3PXuo/UuXLVH+T
6lep/iPVXyz5BslLJS8qOyYgNrhG7fdQee+iZWKGT9SmleQ5BetwdHlbyfMk
j5H8meQ2kucW7KPiqzbXcaPKf4c1yBpgLeBjpio3UfsXC54z2LbWRcc6xDzv
4Qukjs/qqO0zms8ti/Y98UHnJdZL6Cd8rqrBH7tEdS/xrvR7RqCjWHt5v+/v
9XvbS25edD3+CPbkcp6n+ryceC1dLHk2tkrtJ6jcRuWP1f7D2PbwIp2rq3Pt
db0VGu9XnRud2Q/EH8SHrKHyBTo3ivXIXFH/y3Xd5arfWfWXqTw/cewzUm3e
SGzvsF8vq00znk3isWaHe76q6PhwH2xU0fEF72KqzlWTPDzx7yeeLbOeEj9L
fMrqks9P/OyIB6uG+BH7fBdrVHJ9HY+rvJR4WOUGRcfCxMSHqryW56trL9S8
vK/smCkfuQ3rmXgW/+YOySXWduZYIlZ5PfZH/ceq/3LWvORvJd8o+QvJ0yQv
l3yG5LmSJ5cd/zGX7tUYOwb7x1y7X3IN4nG1v0jt31f7e9R+bWJ/Hf9uX+a+
6s+UPE/1t6l+TupYpSNzIfin5+ft72fEl2p/mdovUvv70WeSL5b8geR7Ja+Q
PFTy65JvlbxDyfHIfjq667f+qfFvVv3KyPYiy2zP/4rsr+Of4ZvO0vUaFT2/
mc/M6w1l29dn8G907gCd66zx16u8GzpCY21NHH8QE7ZX/VTJjXOOf/aS/HDi
tcUaa1y0P3Ys/pvkFrzLxGuFNdO06PgC+88abBL8Q3TZTMl7Fj0GY2HDpie2
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
ovpUIZaJnFscIXlDwsQwHr02cv5ji37/PMmRrjNTciu1aan+gwv2BxaF/O21
kfG7j0I+bEzkfMg3anNu0OfEMuTUjo6MEeP/rNQxJDwffMUvVN8lcg4RvId4
jmvhc66OHM8NKNhnXSK5KetH5eMKxpgWhvzwqMj5lmahnj7gSz/F/q2Tda4d
z0u/7xziNXwQtb+ZMSU3wCdS/YeqP5D4SOevAl8BQ9V6+qdg/wd7ja8CJghW
eLaOTQVjpMepfxfJVSrs03UrGoPc7mtVGDschh+i7ptVP5zYE3sm+Rtd58Gy
YwRiBWLUk7EVPJ+8r3FO0fHcVpXra7zbivah8aW3hPEYn/Juqr+VeD/oD/oQ
/+Hz4vuCMfWmr45VBcdIxEr7l4wnUfdj2TEOsQ6YwUkq/6D6R9R/E1i46g8s
OX7mXjeWjVfja95SCD6X6gep/ctqP17170neXfJoyZeVjecekzemBra2QPX1
0X/YaNU/RbzK+PjwGvt71d/FXFf9w9hOyY/yPCU/QjxQsi++Uv7KLJVHJ/bn
ya/W0fg/kQNV+y1q/yjvN3MutibvAn2Cv0N8r/o7y/ZR8VWnq80uRWP8+I9g
WuClNyX2b8m/7yr58sTY5n0Fx7xVS/a9iOkOB5stGo/4GR++6DiPuo1Bpp4y
PiS+5Gb1fxlfWs/had3PJvInEv/DVuIfSX5M8q+SZ4D3SH5R8jbJT0reQA5J
8reSH5I8mHdYcExLbNtN9/ST5NOD/3Fa0TIxG7HbRvV/Qf3/Vf8nyp7vcAt+
CfOxZslYA3O0f+Z4hvidOP6H8P5+zDnmIfYBfyI+JU79WfUN9L82c69gvPKf
zPEuce9Xqt9L5+rTvmDM81P1HxDs6VjVNwz9uxWM336m+hNV/4Lqbyob72wf
/ANi1V80flfJc3V+jeo/V/uT1P5FfDLJjcL1+hSMF5PDJpe9r+TnuT68FZWv
Ups9EuOt3Dv33Ad7oPEOVvtp6jdK4y2S3FnyvdhI9KXkg7DXkq8uO6cK16VJ
zljed5mx4mrYV5XXZs4VEMPvlTlnSS6ye87YLjnPvSPnrMDP90FnY7/RaSqv
Jx9O/I3uk7xY7RtEzoHO1Ll6OqozPwvGpxfr/g5X38ewSeAzkvsw37Fbko9V
/8HYM7XvDz5SdH5hjeR+ReMM3OtXQab92oJzSr0Tt6cOjAWspa7ub7Xko4rm
Jx2n/98UzOEBUzmy6HowKLCoZbqfgbreS8RcZWMGYAf0Ob7o/uAx64L8Wmzd
frba7KT+xxT9bNeG+4fPQuwLZ4OYbqnGP1L9n9T4N5SN329/NvgfKi9R/RGq
f0L116t+oeQ2xE+Sryh7TjA3tuSdz/9A9a1VP1n1I1X/bPBnDuI3Js4fknsh
x1lRdI67URQwVtW9rf7VVD5P5y5R//clt5J8i+TLJTcvWdf0ULx4r8rdZQ8P
yRmLW6X6JyUvkHxn0B/kdG5LzB8j1zM0c24JTAqu04jMvm2kY3eVD0mdG4t1
NJC8OTU2gf98oeTTMutmcuzk2sGs0Gnot5Zl5+9aqHw79kfl4xkzb7ylTsn8
GnKTxHQPaeyjMnOp0Lk7lcwhwAdkzRe498xrmTW9t8pt6a/ySzp3O7nJxD42
z2B4Zn4VuTfipbka/8TMWGsPHQMz5wAnJM7Xkhs8QceheWNGz6b2qfGt6XOS
6rqoPD3oBJ7PuZnnFhw5uHLk3IhxyE+Ti6tTNocP7l7rsjksxA0847fgp+ka
v+ad0yG301RHKe+cx7fhfXCt9aE9GB5rjPXWvGy+4J5522BscfuQP+b9XJIa
PwfLayH5lKL5DfUYW+07lfz84HqQs/kxc04Ae889vZ055/cGXJecc4HwFRuq
763o/8w5yDmxMWhyk2AQ+Fn4W2AT8EHgbl2GPUmNYZBzJtcMtgE/pK7qrtZx
fma+EFxA1tCpqpuYOVYiZqqn8vjMugCdgO44MLauRee2hwuR2d8hRt9Nv+8P
/KnInMjesTkJNSNzMOEqfCe5MjJnYo/YHI96kTmXcD/+kdwyMifymNgxCbEJ
MQZcRmIMYg1iBLiKVXR0jswxPBPQTPK+kTl7g2LHEMQSYNRwI+E7wHMYrHNj
SsY0tsSOP8E6iPlJJsPFAAsghieWB1OAG/hN2TgZeNnOar9LbG4PHBjy0wMy
14GPPBvW3/UFcxafU/lpOHUV9rHAI8EowCrIScE1I4YjF08MQmxHDEIsQkxL
LAUHDu7d3jlz49rF1oXoxNapcxLkJuDobdP9jcscG4MB1CJ3nNn3xAfdOXMM
SCxIjAbXEg4f3ExiRLh9t4DP5a1T4AMQAxILEuPBBU3RCXljKl1L5rDB9YOj
B7cNjh5cPTiccEnBEMASwDyGpeYowVUipo/LjumJ7cEcziMXp/GfyXsNwNcF
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
            "]], Polygon3DBox[CompressedData["
1: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
QF5Fc6/LSvY59ruS+P92xQO+
            "]], 
           Polygon3DBox[{{2803, 1897, 2012, 3338, 2680, 2681}, {2673, 2672, 
            3334, 2007, 2008, 3335}}]},
          Annotation[#, "Charting`Private`Tag$25181#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, 
      {GrayLevel[1], EdgeForm[None], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtlllQ1lUYxv94DjbfVpONNdZMU1d11UVNUxc1lmZ7Wpi5sIiA2Irt+6KG
pamZKQjIpiwiISYhGSUJoSmmpSRkZWXO1KRTTZm4jdXvnedcPPM85/3O+Z/l
3b7L82ZnFA2LoqgTOLAzFkUf+iiqhUvgbHAW+2o4H1yRFkU1cB64DL0MzgRH
mNMAzwTXYt/MxzrAveAT0AkyQDtoA+NBC2gGd4LlrMsCQ3ynCp4BRvGdcng6
SKBXwjnAo9+CnwR96MXwU2APuoJvvYAeAy+AnwDbse9gvB1MAbvBi9ibsRei
n0VPQK+Cc8EI9Cbsa8wOvwM/Awawvw0/DfahFyWjqAeuTUTRVuZ1gftBHb8X
gKv4bR5cBDrRL8OPgFb08/BDoBH9KvwoaEPPgR8DHWl6vze93vDCeBQdsrX4
pRJ8gE7H1sUZ0uBTqSj6GH2M3/5J6X4Phzuug2eBseht9uboyfAW0IieCKfD
xfAgwbAWXQhuYH6B09j0Lqdz25k9PJ/xSebPdNrDvt+NbkJPgvPCW9g7fISu
R98Hl4Ln0DfBF3P2w+gNnLua8UvoW+AJCe2ZzZ2+tu+DO0A34wRrjnPHYubO
Bl3Ma2b9AfQ5/JbLnNuZOw1eh30Qu8Pew/g8eIi1BUmtq2SffcxtALeBPlAC
RoNZYCRrM5h3mu/0o9fC+ay92eKLtblO+WC5sBFdi74HPsK8Xeg6+H3GreBu
J/+ZHy/iHDOc8spy6m/sX6Ib4H/BfnQTnMdeDzAvBx4W113sTuMSyrMs7FvA
WWwnudce5laBsWA9th+ZfwHr1jB+BX0rvNcp5izeSpjTgv7N9neKUYvPUsbr
0b/DK0Er+i+4DGxAH4fL7W7oU3Aja1/zevc4+32Hfi+mmLrRK64Kk8qn+oRi
Z7RX/Fg9mO9VEw6AN7zyanJStWchPDwu/5qfv7J3A+Oc3sje6j87A9iLPgFf
mVDNmJqUz8x3Z+AFScVvMb8P2BuBu8APIR8mhnrwYKgJ5rfXvXzXHe5ub9AH
NqNXw5+BjegKuBe0oVeFOPnC3gX+NLxnafBpL/Z58KWcIwtdjD6B/4b4/Tp4
a3hze/tpoT5abRyfHkVHrV57xa7F8DLWDrBmG3OvSSn+m1gzFy5LqPYsRWcm
lYuLk4obi58lVsOCH82flgcVXrmQ6dQDzAfmu28Zz0kq9vLNZ+hDTjXR6qHV
16VeNfZwqJtWM6c69QnrEZZb73rlVw9Y4hXflt+VXjk+JRlqPNzPfbo419Up
1ddFXjU2x6leW63ezu/t6KqY/Fnt5dPPGW9CV8eU74PmS7gcXuGVw6f57ghi
63p4B/M6sNdY3jj1Fesp0516kvUj62MLvXrZH8zbja6PqX5ZHbvEcg29E/1r
TH3U+ulI7L3sPQo+w177nXqD+aYm7Hu+5U3oW9azKp362ZgQ72VeMX/Qqf9Z
76t1qptWM8tCbbW62slef/LdYym9i71PLK5+O9er557L+CC6hd9/duoN1he+
d6rXVqstPs0X5pNvnGqc1bd+p15lfeqXcF+7d3V481Rcefx4yOUVzE/zit26
UBuPwj859YxJoW6VetWueqeaZfUq2+l/gOVz0XDV42zyoD2h+FrO2f4Hbc5F
6w==
           "]], Polygon3DBox[CompressedData["
1:eJw1lmmwl2MYxt/T8/9r3v95Y2LKpBmTDybjQ2bQYAYh2RVZ0nJOdVqGQUUl
qbTTOg3SJklOiyQkTevpdNo4ptKJg0mylkqlfRN+11yPD++89/U893s/93sv
1/1cUda7ba86SZKs4cnxTMySpHlRkixKk+RkvSSpV0iSa/JJUs3aLNZO8fyJ
YjF4HvJQ9u4PSdII/BfrL4HvAi8B10c+kfotPA35NexXIL+FfAb7N/Bsz9nW
KeR+6N7G9/PQqYN8hvWGvJeBpyO/gHwH+wvBdZEnYW8l8gz2TvP9Ed4Z64tZ
m4p8I2u7sf8h8lnkS/ifs+Cbi7zWAHwT+jXg2eBr0VnE/pvIO5BHYn9Uzj53
R66P/vXobwW/g8545Hb40xL8N3rjwI8H25Pdg6n9lL9TkC8tWE/6i8H92bsd
/ZPEfg/rQ8D3gi9m/xC4LvrHeTcFL0R/MPv3BMdDcdnL2m/s7+f7OcglrLVl
7zRJ7Yp8ILVd2X8PeRBrdwfnT3kcCW4TbF/nnEt9rs6fjxw4/yi4Cfh98Fhi
cB5b5cjHiM84cI69ueDj4FHgqTmvXV6cJP+mrgvVxwLkCew3Q/4A+QT6pZz/
Lb4ewGbrvH2W723Q6YTcl6dF8P/pP4eDHwz2R369CL4zON/K+3XY/JT1mdiv
Rc7j/5WsVxV5bQRy62Cs9bE8jwXXg+riDfyrRX4X3XN8/4riGVz/6oMxPI8G
5191MIrnIfAm8NXIacFv4bexUYbNj9l/IPq8L3Vdq75VY6o51co59L5IXVOy
fQb8eeqe09mnwJtT25TtE+BNqf2Uv+fB1dFnrS0Hb+BfOvI8zNnl4H7I87P4
Ld+Uk5+lPE+wP4m1AZlzpFxVgv9BXsDaplivpcglmWPVk7X+mfOuXK8BH03d
1+qVIzofeRr278P+cHBf9Mfw/K5+iv01HnwMvDHmqxR5dnBOZXcQeFvMr9YG
grfE/hcPdATnc64h1UgD1V7ONaQ+KFEtBOuqbvsoJlFuh9y44DpTvX2UmjN0
1j6+q0zNOeq1g+Cq1DwjvjkMXp+a08RtB8DrkFvw7hlsTz6o5+XrXtbXIk/m
3SH2u/p+buY96YwpdkxUF6oPxUo9pl7bgs7KzD2u/1wB3hN7TjnYBl6VmbfF
3xvAF/JvbbC5Uf1cMP/Jlv59NWuHYg+qF3fK/8ycLxu79L+ZOVncLL64qtgc
qxh8wv6azByunC9RTjPHUP++GXxZwRyn2lENNSw4x+pD9Z9yL5sV4qfI/+IY
9ck61uoU/H/H9M85c037zL50Bj8nbi52rJ4CDwTP41kb+atD5hy3JM5Tcs69
OE170jmr/iu2L33AgzPHQvy0HlwomHPFjVXgCwqOz0W8T+c8KxWP8+g0jrNI
/deI/Vvz5hLFpwjcJO/Zp3gXy07OXKj8Hub7P3Lm1gG8v4zzT3NwGGufBXN0
T+TX2W8f+VC8OBr8feQz8Vo38NJgWX7PAXeNsmwMxcb04NrrhjyU/R1xnmiu
zAZ3iVwlnp0F7hznu+b80+CtwTH9v0/0Fh6Qdx+oH1qpV/PmhVzsXXF1J/C0
4H87GetQ9aj+1GxXD8g3zUX1xrPs1wTPLPkoDvkmuAfFLV3ZXxTMMfJxJrg0
zk/N0bHgXZG/xeMTwT/H+aw53QO8OnhPfTMevDvyu3heHFcZLIv7xKFlwTUi
bl2Afvc4PzRHXgXvjPNAc0E1WR2cK9XqM+x/FRwfxak7eHmwrmyuirNa8dFd
SJz8azDHi6sXst8j3jd071BP6x6j89XrT2puBHN6m9gDyqvuDeoN3QFkX+fs
R36e9w/BM6I69p1yr3k1LG8er4i5112vMs5yxfvlvHmmeYytZmVvcG2wfkXs
m6axNjV7NdcU20cUq7x77rvgWlMvijfkt/yfkPfck1/yb3Tefdksxlazdwh4
e4yl7p23gCcH3yc0E4aLE4Jj0AV5tGZW9LkV540AVwXXQlnmmag+0b1Is3IG
uiXxvqQaFOeUB58lLtLcrom5111CM1K2dA/U7OzH/k/B+zVxTtfG3OnuqDmy
Mtaq7n79wb8E70uvL/jH4HhtjXNoWfRFd7kV8e6nf9Vdqhf462B7svsfHv+2
fA==
           "]], Polygon3DBox[CompressedData["
1:eJwl0L8rRXEcxvEP15ncyarE5q9guF2DSH6Ui0u693aVgWQQgwg5uJIsBoNB
ktls4k52ZVeyKhm9Tmd4+jzP+zyf77fvGaitT611RkQPJTRf5DsilrsiHgqm
XKEyf41Vzb7uiFsa5/ct/eBnOos0g6XYKzahs4SVnLciv/hWk8/pTz7Wm8aq
xVyZv8frZtluSo92V7E3rK5zQl/ylt0SNivf6bX1NvAPrIndYGP8AfZuNrA5
GuF37D7jgzqn2De/neRvzN56RUNyiyrYk94F1ivv0mj2L7BLrF/eS/K7sjtb
2K/zjrBJbEE+xIf5TezTtxT7B1gGL1A=
           "]]}],
        Lighting->{{"Ambient", 
           GrayLevel[0.8]}}]}, 
      {GrayLevel[1], EdgeForm[None], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtlnuQlmMYxt/Z53kV+0VKrENqSUulUkq1aRxK57atNuIPgzEK7TqnKIdm
UKhULDIyMqJNUZRRIyMjp8FgYtTQ6MimUqtNRX7XXM8f13dd7/3d3/M+h/u+
nq/0xppR1UVZlq0FAezko3/MslYEtxdn2dt5lr1VyLJ18ABiH8E/gpvQP8Et
+G4X/B78DTyO+LfwYlCGfgOuBS3Rz8Ml5O2DV8G/whOJb4EXgtboV+DZoA49
B14JuqPfhTeACvRn8BpwKXotPJb5Psi8a3geg56Cvhk9En0fuhJ9DXoaejK6
nnW9z++WMYdbwf3Em8KDyKlGX0DOer4fCH8CDyN+V/D7hqDvCJ7TCPQ9wXlX
oW9Ht0E/y1g/87sCvCh37DW4KTlPkNMeFKOf1LvACeiZ8PngBX5zkNxS+Hji
M4iVgRt4foRxehErBxuIzeR5NPFeWi/cnnhd8DkFdAba8nwc/BjcDmxi7S8x
/hLymxB/nNh5mgd6efD+NuYe+xC8kfz58Jvk1+Xem6XwteQ/TP70NKf1aY4F
9FPoDmA4z53h8XAn4iuD66MLenVwDfVAr0NPQndDrwmuiVp+8yHvaeD9E3RO
xDejj4GviL9DrCP5h4n3Bi3Qc+Gu4GT0M3AX0Bl9BO4DmqPnBM/pIvRRuFxr
AEU8L+W9j6K3BddfH2LH0P3AJej/VAPgYvS/cF8wAZwWXd8t4XkaG5yOblCd
BMdOiY5/DraDRvIr0plq37SOC6PXcip8AO4GzkE3wj11TuhDmgs4C/235qK6
Qf8TXAdDGaucMa+H2xA/SKwHaMLzD+zbioLHLokef1TB9aJ9PpHYLGKdwEno
2ZoTmEJOh+gaawY/TawjuDfVjWrmSO41HYUP5K6LBnhT7l7cDG/N3aPb4Prc
vbgbvoIxxjNWM54rC/YenbXWWha9Xu1Bu+h9GFtwfapHhhU8vnptUMG9tqXY
6y6NXvvdwb2hdd6JPjd6j7R/Z0fvoc7qzOjzug2cEe1HE9Gto72sBt1W51jk
2MLg+Hze+2ru976Ye/4L4IeCe0NnrHrpGV0z+4I9S3uhXhke3S/ygMHRPqAa
7Bddh1/k9rAv4Q+S78n/Pk4eJa9akXxSflkf7FnK2x3sU8rbmHxb/q16uA5d
Bf8Z7JV6xy/Jk+XNfwT7ncbdk3sde3P71tBo76pK48g/d+Tu453wy8nP5evP
Jf/XPfBd7vzv4dfTHaG7Ym7u858Hz0r+r3tA+70oeM/3B/vO9OThOkPVu/p+
XHTv/x7s4/Ip1WlFdK2WpF5Tz8kbro72h2W5x16u9aaaVG0eTvWsut6f6ll1
/Vuq4a3JGzXnkYy5JHmjPPKv4PtGY+l+1J6M0PuDvVu1uzf4rlLtqs9GR/fa
5GB/1DnJb3pHe47ujQHRd4d6tDK6T3cE94/mIW/UGY4p2O8vj/b8Perz6H1f
lXvfVue+C1qlntsVfIepfwYXfOfcAk8FA6P11+l+1z0/Ndi7tTb1yoLg854U
7PXKky/WBp+9/kton4cwTjVYHOxR8sLLovf6geA7QPU3je+qou8O+XfXaA+X
H/eN9uRP0/8B/S+Ql3eP9nPdaVdG32v/AwnQD5I=
           "]], Polygon3DBox[CompressedData["
1:eJwtlX2sz1Ucx7/7/c5B3S/pyWxFbnmW0JVnppWVkFzGzB+27I5w7y01cj3X
X9kYSiWLdDHkYeRhnqYMJWOqZQxN5vmpMU1aW73ee58/Pjvv9+ec8z3nfN6f
z+db+mZ1eVUhy7IaLGBXY5Z1KGbZVJzXwDPBXZnonXy38XUEfwi+A16ZZ9lB
xm74hoJfx6Ywtw8+GVyRe+4+VgO+yNpeRa+5BD6L9YRXwn8H/4w9Cx8F/wX8
G9YDPgZ+Anwf6wS/B/8H/D3WFv4KfD94IdYcXh++CPw59ii4Bb4l4EHcoRp+
HlwL7o+1ga+Df53b9wf4uaLXvo814v3Pw98Ab2auNbiMPVvAm3QW8+0YB+Pb
zdgweL/epDN19uPgL8A7sTbw3vBd4B3gh1jfPr1RMXs4WAPFUnday7pWRd/1
S3AZuAlrl4GPYt3hI+HHwIej7zIE/hN4AfZNwTFRbL6K3tsSvgLcl7OKWLMU
0zU6q+DzdO5njHWD36A41jB2CtasAr6UsV7w9/Td5YwPBO/XdyZx5weDY/Ya
eDpj5+AckA7jcsdqATYTfDc6t/rA/9LdGfNgjfvh34avC7gneDt4NrhH8Hrt
Uw5Kh0MpNxdHa6e7fwoeljs2k/FNA5dic+H3mFsC/kFrg3NM/lX4O6e3rAaP
zf22j7AZ4A34XlBMmN8YnSPKvXFF5863jA2Cc1oa9QHXCdZDuvQHX0v5pBht
Z8+ffGcOvDH4ePQ+7VdtDGH9rVQf8g2G30x6S/dB8BupHhSzEfDbqXaVU0/A
JyStlEcj4XdS7FTXB6L3qmZV1yej81L5eQp8t8Q67FNucL8zJc7tl/nOW/B6
ue9WDh8PvhndO/SeW+A90bnfFd9ecLXem3JpYO4cUSxri86dl/jO5VQ/ysHH
4IdTrkqj0blz4Rn8VeCmjJVJL+lWCq9O+kinLvAZqf8oByeyZ07Seji4OfPv
pPxSnlXiu8L4FPxVcHfmZ6X36F3t4VOStqrDF+GXUv+RxnqTYjc0+K0DGK+n
+lcf6Aifmmpffa4MPi31DtXYBPa8m3K/HHwjWkudrdg2VtxTfivPv4teK+3V
GzeyZ0f0e66j1Wb4keh8+Q9+IboOFQv1ZtVEu+C3qFbeY2wdnA/Kiw34NkXH
8yL7t8B/jda8LngdtjRar9PMb4Nfjo73I+AqxTJYC/XdecytL7gW5oP/jtZC
2qrXv834dLAWqpH10fu0X7U3kfHJYK2l0STGFsH5pRj/G50r6m8V4LXc4eNo
fU6UWFP1rn7BWisH1Et6BeeGYq5vtQrWYmv0PXQf9aIz0bkrrfQvO1fie9SC
P2H9ymiu+6mXnIvWVj1P/5kfo/uVale9u8A5H6TeoLjkub9/mrnF4P8Bty/c
IA==
           "]], Polygon3DBox[CompressedData["
1:eJwlz7svBGEUhvETRkhmq9VQbiNW4hIKodBi3delFRIhCltJ/CF0FDRaOgoa
LR0Sl0IjsdGsBC2/yRRPvvO8c74z5yut16o7TRHRjha8pREnimN0NUdMFCJK
+OU/GJOt8G991/wKw7KqbBb96rrsA0W+jFHZA79HK1/FqSxNIsrOKT6HAfWX
ngY6eBv2ZH1JPiObtYlxXudli0/yV7ts8075kHNBtpX9mzd4Td8Mn8cgPzB/
H4/uFWTP6if0+jbN13CjLib5TtluG+jhu5mbt8iXMMLv3L3Fn3kVWbfsnJ/h
Pc33yfY64od4SfM3Z2+/5Bf4lP0DGz0wHA==
           "]]}],
        Lighting->{{"Ambient", 
           GrayLevel[0.8]}}]}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl01lLlGEYxvF7UkcdraQyNVLRdqqhhTJayMqyXMpscyEKgxYtNYloOeos
OjUISltOgigoqOgLdBAR0WJmFhEFQR+i7KfC/Od/Pc998bzvwDMVHT3N3YmI
+IKMjIjx/H5KxC8uTUUU8AIu5zSnuYo3cTU3cCO3cxt3cid34aJ8ha/yNb7B
/XyfB/g5P+CXfDgvotbDU97ho/WYdxi0LsyOGLKezZ+4iIe5mD9z5ETU6Y2I
Cbk+Mflb+nMjypy12zqPR+1dt1cuN9nL5xJnfLX/NyviCDpwFD8z/T5ux4v8
iI3ch/Woxwb80FnH98zbuApnsQZ1WIvvOqv5rk4rr0IvVmAXVuKZ2Te9tNyC
5ejBUuzEU/NlPKqzhA9hMbqxEIPmtbwIIzrz+SDm4QwqMKCzgysxrFPOB1CG
J2aneS62oxRDOnN4Px6bl3AXilCDYnzQKeQ75vt4FjoxA9swE+90Cvi2TjNP
xylMxVZMwyOzt3p58l6kcBI52IKH5rn8RifJTcjCCWTglnk1Z+K1ToL3IHAc
/+zd1Nksj8mv0CgfQ8P4+dauRdT4GnLn/shJd+NycuJqRaXc7r5k8SV7rkz8
xgXZJ1rNzicnHhfn2HHRx+rRy46MbAe1JCb/X/8BxZtWCg==
        "]], Line3DBox[CompressedData["
1:eJwt00dwiEEYh/FNIqRKiJ4E0UskWqJFFy266C1655oTYxy4umSMqzFuBEGi
DMNRb1ETosw4MJhxcCD8dsbhmef/7u47336731ewaf+SfQkhhD84mxhCGpen
htAotyaH8BehbQgJ+GQ8kWs5idsgGZ/V9RmWyXfldpyCVNxRp/E5TucMNFib
yV+Mtef7nMXZ6IB76o5clBnCeTlH7oTO+K7uwg+5K3dDdzxQ9+BiPRfkXDkP
+fip7smPuRf3RgEeqWvspY9cJ/flfuiPX+oB/JQH8iBcs3YwPzE2hC/yUC7E
MPxWF/Foe2iUi+XhGIFn6pF8iUfFNShBPPDSmPW8MDdGHotxeK4ez5d5Apdh
Yjx3PTfsZZL8ytxknoKpeKmexvU8nWfgprXl8U70zeQ35mbxbMzBa/XcuFd7
aJAr5HmYH+9LzwJuNr6QF2ExmtRL4rvpuSIvlSuxLN6jnuX8zvgKXolVeKs+
bi+r5avyGl6LdfF+9azn98Y3cBVuW7uRW4xtiufPm3kLtsa717ONS+3ho7nt
8g7sxAf1Lr7Ou3kP9sZe33Nmkm+lnXNw/AVypR+gOn6LcpOxZepc881yHr/l
fH4Xf4UU72Q+y9oWdSKfVN+yl8fqOr7Np7mOT/ApPsY1fJSP8EE+gGp5O+/k
lbyaK7iCJ3EZl/AwLuSenJMewg9O9ewsbvWvVtnDYe/XXn2IM+Mz4v1xrb1/
Y20hW88Z9df///s/ZvlvMQ==
        "]], Line3DBox[{1210, 235, 1025}], Line3DBox[CompressedData["
1:eJwV0TlPlVEUheENCAQECRgwaqOFjY2JkKCNP8GCGkm0scPCeZ7Akb/hUDji
DHi5zKIxxhhjDCHGiOAFAQEBmdTnK1betdY++3wn927ed6CmPisintP+nIga
oT4vYk9uxF6qpY2FEd9WRWzAPmzS7aL1cneRXd3rgogVvK5fxnVmX7ECe/G2
c9fMdlK57pmu384SXtUt4lr9F9xRHFHG9/BXzKqoVH4qv7KzgJd1f7BE3+nu
QX5N8h68ZLaNiuUncp+deWzUzeFqfYedAb6Q78IGs61UID+We+3M4i3nLup/
8/lmnzEv+SZe0G+hXPmRXOndPfZm+PP6acwx+4TZyTfxnH4TZckpdzfruu1M
4Vn9L/wnf8S/mMYzyX9AK/JLOw91XfwkntZP4JL8ARexHW86d8qsghZ0D3Sd
OI4ndT9xXn6P1d49x6f4E8lvTbPyfbkDx/C4bhRn5FZ3v+Onk/fgMbMimpLv
yWnM4FHdD5yUW+y85Sf4Njxilk/j8l25HUfwhnOH9cP8mO4NjibfxEP6bMrI
d+Tt3p3iv/MH9UM4IvfjML7AOv1uauH/A0qHd7Q=
        "]], Line3DBox[CompressedData["
1:eJwV0tk2UGEYBuDfdOYiuCWXYC2nXEROkRCJEFKGTFEyZpaiEGWWKUXGDHHg
+Q+e9e613m/t/e1/7/TMnIzshBBCLg+SQmhODCEvJYR8CnhIIY8o4lVqCMWy
hMeUUsYTynlKo5kKWckzqqimhucU62tlHfW8oIGX8f5xRt8om2imhde0xmtd
m2yng07e0EU3b+OsmXeyh/f00kc/A3Fn/aAc4gPDjDDKWNxLPy4nmGSKj0zH
5+o+yc/MMMsXvjLHfNzLzIL8xiJLfOcHy/Hs9CtylTXW2WCTLWr1P+U2O+yy
x358T90vecBv/nDIEX85judg5kSecsY5F/zjMn4r/ZW85ob/3HJHFmn+g5Ac
wj0y1maX
        "]]}, {}, 
      {GrayLevel[0.2], 
       Line3DBox[{2589, 2833, 1822, 2588, 3385, 2755, 2590, 3386, 2756, 2591, 
        3387, 2757, 2592, 3321, 3388, 2758, 2914, 3322, 3389, 2759, 3125, 
        3367, 3563, 3126, 2946, 2998, 2760, 2915, 3526, 3028, 3029, 2947, 
        2999, 1826, 3109, 3226}], 
       Line3DBox[{2597, 3269, 3447, 2596, 1832, 2598, 3394, 2767, 2599, 3395, 
        2768, 2600, 3324, 3396, 2769, 2917, 3325, 3397, 2770, 3127, 3564, 
        3128, 3129, 2950, 3000, 2771, 2918, 3527, 3033, 3034, 2951, 3001, 
        3270, 3544, 3111, 3227}], 
       Line3DBox[{2604, 2776, 3401, 2603, 2775, 3400, 2602, 2774, 3399, 2601, 
        2773, 3398, 2836, 2919, 2772, 3003, 3546, 2953, 3038, 3037, 3112, 
        3545, 3271, 3002, 3257}], 
       Line3DBox[{2606, 3272, 3448, 2605, 3273, 3449, 2607, 1843, 2608, 3402, 
        2777, 2609, 3326, 3403, 2778, 2920, 3528, 2837, 2779, 3130, 2381, 
        2838, 2954, 3004, 3005, 2921, 3529, 3039, 2839, 2955, 3006, 3007, 
        3559, 2922, 3243}], 
       Line3DBox[{2613, 2783, 3407, 2612, 2782, 3406, 2611, 2781, 3405, 2610, 
        2780, 3404, 2841, 2924, 3008, 2148, 2956, 2840, 3041, 2923, 3351, 
        3374}], Line3DBox[{2615, 3274, 3450, 2614, 3275, 3451, 2616, 3276, 
        3452, 2617, 1854, 2618, 3515, 2842, 2784, 2925, 3530, 2843, 2785, 
        3131, 3368, 3565, 2844, 2957, 3009, 3010, 2926, 2215, 2845, 2959, 
        3011, 3516, 3352, 2927, 3214, 3244}], 
       Line3DBox[{2622, 2788, 3410, 2621, 2787, 3409, 2620, 2786, 3408, 2619, 
        1857, 2848, 2929, 3012, 3517, 3354, 2961, 2847, 3042, 2928, 3353, 
        3375}], Line3DBox[{2624, 3277, 3453, 2623, 3278, 3454, 2625, 3279, 
        3455, 2626, 3280, 3456, 2627, 1989, 2849, 2628, 3518, 2850, 2851, 
        2629, 3371, 3519, 2852, 2958, 2853, 3043, 2630, 3549, 3044, 2854, 
        2960, 2855, 2222, 3117, 3230}], 
       Line3DBox[{2635, 2791, 3413, 2634, 2790, 3412, 2633, 2789, 3411, 2632, 
        3327, 3457, 2859, 2631, 3047, 3550, 2858, 2962, 2857, 3046, 3118, 
        3360, 3222}], 
       Line3DBox[{2637, 3281, 3458, 2636, 3282, 3459, 2638, 3283, 3460, 2639, 
        3284, 3461, 2640, 3328, 3462, 2860, 2641, 1997, 2861, 2642, 3569, 
        3139, 2862, 2963, 2863, 3048, 2643, 3551, 3049, 2864, 2964, 2865, 
        3050, 3531, 3119, 3231}], 
       Line3DBox[{2648, 2793, 3415, 2647, 2792, 3414, 2646, 3465, 3285, 2645, 
        3330, 3464, 2867, 2644, 3053, 3329, 3463, 2965, 2866, 3052, 3120, 
        2235, 3206, 3260}], 
       Line3DBox[{2650, 3286, 3466, 2649, 3287, 3467, 2651, 3288, 3468, 2652, 
        3289, 3469, 2653, 3331, 3470, 2868, 2654, 3332, 3471, 2869, 2655, 
        2435, 3140, 2966, 3055, 3054, 2656, 3552, 3056, 3057, 2967, 3059, 
        3058, 3561, 2657, 3247}], 
       Line3DBox[{2663, 3476, 3292, 2662, 3475, 3291, 2661, 3474, 3290, 2660, 
        3333, 3473, 2870, 2659, 3063, 3064, 3472, 2969, 3062, 3061, 2658, 
        3361, 3380}], 
       Line3DBox[{2667, 3416, 2794, 2665, 3417, 2795, 2669, 3418, 2796, 2671, 
        3419, 2797, 2673, 3335, 3420, 2798, 2930, 3337, 3421, 2799, 3132, 
        3369, 3566, 3133, 2974, 3013, 2800, 2931, 3532, 3069, 3070, 2975, 
        3014, 1895, 3113, 3228}], 
       Line3DBox[{2686, 3486, 3299, 2684, 3485, 3298, 2682, 3484, 3297, 2680, 
        3338, 3483, 2873, 2679, 3074, 3554, 3364, 2973, 3073, 3072, 2678, 
        3363, 3381}], 
       Line3DBox[{2689, 3300, 3487, 2688, 3426, 2807, 2690, 3427, 2808, 2691, 
        3428, 2809, 2692, 3339, 3429, 2810, 2933, 3340, 3430, 2811, 3134, 
        3567, 3135, 3136, 2978, 3015, 2812, 2934, 3533, 3077, 3078, 2979, 
        3016, 3301, 3547, 3115, 3229}], 
       Line3DBox[{2696, 2817, 3434, 2695, 2816, 3433, 2694, 2815, 3432, 2693, 
        2814, 3431, 2875, 2935, 2813, 3018, 3548, 2981, 3082, 3081, 3116, 
        1906, 3017, 3264}], 
       Line3DBox[{2698, 3302, 3488, 2697, 3303, 3489, 2699, 1913, 2700, 3435, 
        2818, 2701, 3341, 3436, 2819, 2936, 3534, 2876, 2820, 3137, 2402, 
        2877, 2982, 3019, 3020, 2937, 3535, 3083, 2878, 2983, 3021, 3022, 
        3560, 2938, 3251}], 
       Line3DBox[{2705, 2824, 3440, 2704, 2823, 3439, 2703, 2822, 3438, 2702, 
        2821, 3437, 2880, 2940, 3023, 2176, 2984, 2879, 3085, 2939, 3356, 
        3376}], Line3DBox[{2707, 3304, 3490, 2706, 3305, 3491, 2708, 3306, 
        3492, 2709, 1924, 2710, 3520, 2881, 2825, 2941, 3536, 2882, 2826, 
        3138, 3370, 3568, 2883, 2985, 3024, 3025, 2942, 2278, 2884, 2987, 
        3026, 3521, 3357, 2943, 3218, 3252}], 
       Line3DBox[{2714, 2829, 3443, 2713, 2828, 3442, 2712, 2827, 3441, 2711, 
        1927, 2887, 2945, 3027, 3522, 3359, 2989, 2886, 3086, 2944, 3358, 
        3377}], Line3DBox[{2716, 3307, 3493, 2715, 3308, 3494, 2717, 3309, 
        3495, 2718, 3310, 3496, 2719, 3342, 3497, 2888, 2720, 3523, 2889, 
        2890, 2721, 3373, 3524, 2891, 2986, 2892, 3087, 2722, 3555, 3088, 
        2893, 2988, 2894, 3089, 3537, 3121, 3232}], 
       Line3DBox[{2727, 2831, 3445, 2726, 2830, 3444, 2725, 1938, 2724, 3343, 
        3498, 2898, 2723, 3092, 3556, 2897, 2990, 2896, 3091, 3122, 3365, 
        3224}], Line3DBox[{2729, 3311, 3499, 2728, 3312, 3500, 2730, 3313, 
        3501, 2731, 3314, 3502, 2732, 3344, 3503, 2899, 2733, 2039, 2900, 
        2734, 3570, 3142, 2901, 2991, 2902, 3093, 2735, 3557, 3094, 2903, 
        2992, 2904, 3095, 3538, 3123, 3233}], 
       Line3DBox[{2740, 2832, 3446, 2739, 1949, 2738, 3506, 3315, 2737, 3346, 
        3505, 2906, 2736, 3098, 3345, 3504, 2993, 2905, 3097, 3124, 2298, 
        3207, 3267}], 
       Line3DBox[{2754, 2913, 2052, 2753, 3514, 3320, 2752, 3513, 3319, 2751, 
        3349, 3512, 2912, 2750, 3108, 2306, 2997, 3107, 3106, 2749, 3366, 
        3382}], Line3DBox[{2835, 2766, 3393, 3323, 2595, 2765, 3392, 2594, 
        2764, 3391, 2593, 2763, 3390, 2834, 2916, 2762, 3540, 3350, 2949, 
        3032, 3031, 3110, 2761, 3256}], 
       Line3DBox[{2909, 2907, 2908, 3525, 2741, 3316, 3507, 2742, 3317, 3508, 
        2743, 3318, 3509, 2744, 3347, 3510, 2910, 2745, 3348, 3511, 2911, 
        2746, 2449, 3143, 2994, 3100, 3099, 2747, 3558, 3101, 3102, 2995, 
        3104, 3103, 3562, 2748, 3255}], 
       Line3DBox[{3248, 3216, 2677, 3362, 3553, 3068, 2971, 3067, 2246, 2676, 
        3065, 3066, 2970, 3141, 3541, 3372, 2675, 2872, 3482, 3336, 2674, 
        2871, 3481, 3334, 2672, 3480, 3296, 2670, 3479, 3295, 2668, 3478, 
        3294, 2664, 3477, 3293, 2666}], 
       Line3DBox[{3263, 2801, 3114, 3075, 3076, 2977, 3355, 3543, 2802, 2932, 
        2874, 3422, 2803, 2681, 3423, 2804, 2683, 3424, 2805, 2685, 3425, 
        2806, 2687}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1648, 1823, 3385, 1649, 1832, 1670, 3449, 1842, 1682, 3451, 
        1852, 1694, 3454, 1862, 1706, 3459, 1872, 1718, 3467, 1882, 1730, 
        3478, 1892, 3417, 1742, 1902, 3426, 1754, 3489, 1912, 1766, 3491, 
        1922, 1778, 3494, 1932, 1790, 3500, 1942, 1802, 3507, 1952, 1814}], 
       Line3DBox[{1650, 1824, 3386, 1651, 1833, 3394, 1671, 1843, 1683, 3452, 
        1853, 1695, 3455, 1863, 1707, 3460, 1873, 1719, 3468, 1883, 1731, 
        3479, 1893, 3418, 1743, 1903, 3427, 1755, 1913, 1767, 3492, 1923, 
        1779, 3495, 1933, 1791, 3501, 1943, 1803, 3508, 1953, 1815}], 
       Line3DBox[{1652, 1825, 3387, 1653, 1834, 3395, 1672, 1844, 3402, 1684, 
        1854, 1696, 3456, 1864, 1708, 3461, 1874, 1720, 3469, 1884, 1732, 
        3480, 1894, 3419, 1744, 1904, 3428, 1756, 1914, 3435, 1768, 1924, 
        1780, 3496, 1934, 1792, 3502, 1944, 1804, 3509, 1954, 1816}], 
       Line3DBox[{1654, 1961, 1962, 3388, 1655, 1971, 1972, 3396, 1673, 1977, 
        1978, 3403, 1685, 1983, 3515, 1984, 1697, 1989, 1990, 1709, 3462, 
        1995, 1996, 1721, 3470, 2001, 2002, 1733, 3481, 2007, 2008, 3420, 
        1745, 2013, 2014, 3429, 1757, 2019, 2020, 3436, 1769, 2025, 3520, 
        2026, 1781, 3497, 2031, 2032, 1793, 3503, 2037, 2038, 1805, 3510, 
        2044, 2045, 2048}], 
       Line3DBox[{1656, 1963, 2056, 1964, 3389, 1657, 1973, 2060, 1974, 3397, 
        1674, 1979, 2064, 3528, 1980, 1686, 1985, 2068, 3530, 1986, 1698, 
        1991, 3518, 2072, 1992, 1710, 1997, 2076, 1998, 1722, 3471, 2003, 
        2080, 2004, 1734, 3482, 2009, 2084, 2010, 3421, 1746, 2015, 2088, 
        2016, 3430, 1758, 2021, 2092, 3534, 2022, 1770, 2027, 2096, 3536, 
        2028, 1782, 2033, 3523, 2100, 2034, 1794, 2039, 2104, 2040, 1806, 
        3511, 2046, 2108, 2047, 2049}], Line3DBox[CompressedData["
1:eJwVzsdNQ0EUBdDHBpkFRdAJSYhojMnZNjkZCVaYnLMBUxAbWqAKMhVwZnF0
R/eO/p+m0ma+XBcRBSr1EVsNEdu00EYr740RzZmIHecKnXTzoe9Kd2y7co8e
+uilXb8vD8jy6X5O9tNhO5RHvOgH5CD59H3bsfzVn8ghRhhO/7WdyjNGGWcs
/U//5v658wUTTDHJlz5rv3S+YppZvvUzMme7ljcUKFFMb9Hfyjvm+HF/Qc6n
N9nuZZVX/aJcZim91fYg//SPcoU1VtNbbU+yxjplNnjmH8cEMVw=
        "]], Line3DBox[CompressedData["
1:eJwV0L0rhWEcx+GfRc5wBoPBcNQZDAaDwWAwSJIkIZ2M/AGO3f/gpY6BYqAY
KAaKgWIgb1EMFHmLgWKgGCjXPVx9hu+vp7snP1TsHS6LiEFGyyNymYgaMhUR
4+xnI8a0hQkmyTLFga2krUwzQyVzHNpmtY15FqhiiUXaWebW3YpWs8YqHaxz
Z9vQHFts0sk297YdzbPHLl3pveld1HLMibsj7eaMc+q45NR2oT1ccU19elO6
td1oHw880sALz/TzypO7N23kg3cKfKY725c28cM3A/ym79j+tJkR/7tIiX8M
XD82
        "]], 
       Line3DBox[{1663, 1829, 3391, 1664, 1838, 3399, 1678, 1848, 3405, 1690, 
        1858, 3408, 1702, 1868, 3411, 1714, 3465, 1878, 1726, 3474, 1888, 
        1738, 3484, 1898, 3423, 1750, 1908, 3432, 1762, 1918, 3438, 1774, 
        1928, 3441, 1786, 1938, 1798, 3506, 1948, 1810, 3513, 1958, 1820}], 
       Line3DBox[{1665, 1830, 3392, 1666, 1839, 3400, 1679, 1849, 3406, 1691, 
        1859, 3409, 1703, 1869, 3412, 1715, 1879, 3414, 1727, 3475, 1889, 
        1739, 3485, 1899, 3424, 1751, 1909, 3433, 1763, 1919, 3439, 1775, 
        1929, 3442, 1787, 1939, 3444, 1799, 1949, 1811, 3514, 1959, 1821}], 
       Line3DBox[{1667, 1969, 1970, 3393, 1668, 1840, 3401, 1680, 1850, 3407, 
        1692, 1860, 3410, 1704, 1870, 3413, 1716, 1880, 3415, 1728, 3476, 
        1890, 1740, 3486, 1900, 3425, 1752, 1910, 3434, 1764, 1920, 3440, 
        1776, 1930, 3443, 1788, 1940, 3445, 1800, 1950, 3446, 1812, 2052, 
        2053, 2054}], 
       Line3DBox[{1813, 1951, 3525, 2043, 1801, 1941, 3499, 1789, 1931, 3493, 
        1777, 1921, 3490, 1765, 1911, 3488, 1753, 1901, 3487, 1741, 3416, 
        1891, 3477, 1729, 1881, 3466, 1717, 1871, 3458, 1705, 1861, 3453, 
        1693, 1851, 3450, 1681, 1841, 3448, 1669, 1831, 3447, 1647, 1822, 
        1960, 2055}], Line3DBox[CompressedData["
1:eJwV0D0o7mEcxvFbcryFEHLU8RZynhDi5CUWi5VNMRgoA5EMxzkGxcCgGCQ2
jNgYKEzIhEUMEuV9xIaP4dvv/l7X9a+nJ797oK0/KoTwH9mxISxjOD6ERjTF
hfCJBu/HpBA+vFP0C8iRTfF6vOFUXyd79Y7WzyCbT/JavODE5o/s2fv9RwgT
Nll8nO/rqtxb1Mhu3CebUZsMfq8fk5XjEtWyC/fKZtDmUp8u+yv7/f17UMlP
3DObXptUPsKLcYQKfuhe+/bAptMmRTYkK8AeyviDftd726bdJknWz39hC8f6
iGzTe8Om1SaR9/GfWEcpX3OX9c36eN7Dd3yb6a6iRLbiztvU2MTyO323LA1L
KJItutM2EZtzfYysS5aMORTyWfefTYFNNO/gCcj7/g+QixZ8ASaXPus=
        "]], Line3DBox[{1818, 1956, 2421, 2366, 2493}], 
       Line3DBox[{1819, 1957, 2051, 3512, 1809, 1947, 2042, 3505, 1797, 1937, 
        2036, 3498, 1785, 1927, 2030, 1773, 3437, 1917, 2024, 1761, 3431, 
        1907, 2018, 1749, 3422, 1897, 2012, 3483, 1737, 1887, 2006, 3473, 
        1725, 1877, 2000, 3464, 1713, 1867, 1994, 3457, 1701, 1857, 1988, 
        1689, 3404, 1847, 1982, 1677, 3398, 1837, 1976, 1662, 3390, 1828, 
        1967, 1968}], Line3DBox[CompressedData["
1:eJwV0D0oxVEcxvGfm7wkUQaDQTIYDAaDwcDEbqaut6K83aKuoihCUca7KpMi
ZbBcCykWlqtbSJeUFAsLWXz+w7fnOc/3LOe0jMwOzJRFxCiOKiP6qiP6cajX
VEUMYgiF2ojlioicfsrVyTTu7cNym9uTZ1yDHMM4cvYDeWFvTLz7E3IS+9yJ
vOae7E36FKZxzOXlhv2Wb9bnkEGeu5S73B3Xqs9jAVfci/1Gf+DaZBaLKNoL
fFF/5trlEh6Tt8kSV5JvXIdcwSo+7O/y094pz91fk+v44b7kN/dq79I3sYVy
21/yFvuv3p38E3ZQ75zyzym9J0HPoBdZ/APEfTt9
        "]], Line3DBox[{2373, 2337, 2423, 2338, 2533}], 
       Line3DBox[{2480, 2139, 2308, 1827, 2536}], 
       Line3DBox[{2481, 2143, 2310, 3545, 1836, 2540}], 
       Line3DBox[{2482, 2147, 2312, 1846, 2544}], 
       Line3DBox[{2483, 2151, 2314, 1856, 2548}], 
       Line3DBox[{2484, 2155, 2316, 1866, 2552}], 
       Line3DBox[{2485, 2159, 2318, 1876, 2556}], 
       Line3DBox[{2486, 2163, 2320, 1886, 2560}], 
       Line3DBox[{2487, 2167, 2322, 1896, 2564}], 
       Line3DBox[{2488, 2171, 2324, 1906, 2568}], 
       Line3DBox[{2489, 2175, 2326, 1916, 2572}], 
       Line3DBox[{2490, 2179, 2328, 1926, 2576}], 
       Line3DBox[{2491, 2183, 2330, 1936, 2580}], 
       Line3DBox[{2492, 2187, 2332, 1946, 2584}], 
       Line3DBox[{2507, 2199, 2340, 2198, 2508}], 
       Line3DBox[{2509, 2208, 2342, 2207, 2510}], 
       Line3DBox[{2511, 2217, 2344, 2216, 2512}], 
       Line3DBox[{2514, 2225, 2346, 2226, 2513}], 
       Line3DBox[{2515, 2235, 2348, 2234, 2516}], 
       Line3DBox[{2517, 2244, 2350, 2243, 2518}], 
       Line3DBox[{2519, 2253, 2352, 2252, 2520}], 
       Line3DBox[{2521, 2262, 2354, 2261, 2522}], 
       Line3DBox[{2523, 2271, 2356, 2270, 2524}], 
       Line3DBox[{2525, 2280, 2358, 2279, 2526}], 
       Line3DBox[{2528, 2288, 2360, 2289, 2527}], 
       Line3DBox[{2529, 2298, 2362, 2297, 2530}], 
       Line3DBox[{2531, 2305, 2365, 2304, 2532}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
Ha3VjGu+zvDvqrDvPVWtpe6BxYz/6Fg/8IqCXwPe8/ZJY4fpLULE99H1zS37
tK6i/XC/lYXet1wZv9/CxCtGwXsC74UbOWFEPYdl4vtSHmrPSvv3+1Kcgff+
zQDq9zFQv85A/boA9bsTqN+zQP325erXltZvEVC/c4D6PQLU71Cgfq//PD5Y
puPAeIufRv3wQMG3A+8JLAHqOgWoa1+JdZ0D1PUWoK7HAXXdCajrzkBdR1VR
XZsDda2t4ro+C9T1R0BdrwLquqXE+oXqNHe4r4nBG3vGJ+11s89ScO1vB4Sf
cD7P+NynLZ8F7oCPy9etZ6yYeOwM4xZN+9ukRArk2ah9xy6EpTOeVjdj9huj
fOK7rv3SrzuL3y9o+2VdvyanCsjoyzv1Y0zE8TXJsrs+UF0g3zmN+NF1vGjH
f+Oe4F3L8klOvVWXs7PF+WFup50V/eQCyebGZSUdlyJuXNLouEw0dgos6STO
J/WzrZxlfYvIkEW7u2nF3WJ8/ODG5JRbIZFV+ismmZkWJ2cvTmXtb5acOrlg
YiHRAd5bZc3lcxjN53JOt2Sq2yguzzNpnttxenaiemYVTxjTbrI4jx15EVZ7
2WDFeRen8zCq823S08S3vjg/rDrseDjtWC4Yrz43LnvouPzCPa/4hD6vGM+N
lzUdrxXcfOVE56uL3Hy1jM5XR4KiW2tYPhDzsFftVhvv5ZHJGn+ex8LoPHa8
8VGT/D0iXzHIITQvVXEenm2pV29bjjj/3I3puM8hi+zUPbL/ziGx3zXerUz0
B+SSC0Cez+OOR2fo8ehX7niUT49HLbj6sqb1tYY7n69Dz+c9uPP5KHo+7wWc
h38G1G8y4H8JUKfbuLxqQ/PqO6BOTT7QOrUH6rSM0y0FqNMMWqeLOD0/pXre
4Oo0lNZpEKfzcKpzOlennu+o04HcuOyi47KEq9MSWqeJQJ2urCF1ehHIcwE4
3mUC7/2D1jdsJNZ7M6DeI4DrOOi6/vfO/vr6RlXZUdZ6Qk3pt7rZqen6G3Lz
fCM6z5tx8/zYd8zzcm6ev03n+epmX6odqfal9ltVcX2o41vT7WN+Klf/OOB8
L5s7r3On53V9ufOl8D/WZ7jzovX0vGgVt49sO91Htptbzwmh6zkbOH8iqD/6
IZWvm5VxftpTPwO4fW1yuq/tY+c/r6cNputpvTmdNanOncZ95BJ1/8x/7Sda
yulvTPXfzh1H8uhx5B5w/ZvG+e9N/YfOS6Hzz9Wczp5U5xBO5wNU57WAzoMA
ncs5P+3eoXP9KtJZc8LFFQaHRP8zfvAf5KzwfyN3/TKCXr/IKv0Vk3afCtpt
Xj1i7Tucjxo6snc2+Za7fgmi1y8DuesFb3q94A5cR0D9Qvwod32xjF5f7OW4
N+UzAB0g+024eHvQeL/gzpe60POlE8A69sPxf+438x39fsb125L2W8CtexvQ
/IHWh78A9N/H1csiWi+QPyc4PV2ontD6sxFQLyuA+nIExmUol58jaX5C9VXB
1eOCd1x3N+J07kN1Hsnlsx/NZw2gfudw1+kv6HX650D9QvUOrZNA9S4AeXUI
WD+EdIDyGVqHgeaZTzk9W1E9BwDrkFB+QusMkP8Qh/IWWpeYJ3F+4POn1zvm
hyRgfpAB/e7n8tyP5jnkTwfOn7bUnyfA/TKcN6p23pB6PY7tldseeg7HjVsH
7kjXgaH2Udw6qg1dR43guC3lkB2p3AG4rwS1j+b8sab+QOvAUv2B7PsD9ymg
+wVS7cgq/VW//cXIkSNHjvztHFq3gXhV+QlxU+48xJueh1RVe6nc/9heh6HH
RfteeiO9bucngu0Dufau72hvp2uutc5UHEe1xGC90uy4GsOhuGo6V7UOH6p9
KP+vpnlkm7qK7RPMfJ89PXhRcr/KshPA+elRxX6eUzv8fT/nJaz96e+XND9X
IZAgbp1hGV1n8Obm/5t0/s8vWdxRsHNhfKDusEtxCjsLJ8VmTR8kPreZkn62
ThcFnxgyzCrY5mfGA+NnvkhQ8LZZm9aGPxWfL206e4SpkYJPdhxqOPzLQMZD
2+hfsXktkEkTE7pZznZmfKo8PShF0b7fVXmgWrAX44XRD9VmKbhL1Ikgx+7i
87dH8is+/le5QDweHyZacvF53UuNNo3TKRBIWP+ULa2sHEWefeTqXYUdo96z
dpqYeTDeO2NdfXcF/+6+1rZNn/mK+flxSOpxhf0XdbavHnlNfC5ap5/+qs8f
C2RZbL0O9UaL+1kMzHx/zX4pkD3r255MtBCfe7l+7bZ9psJ+xuGxvbc0Ws54
9xgDaz8FN+v+28w9bTcxLuvfZ+DgNwLZ7O7ldb5c3G+SMVTedP4zgSxpt/Op
of4exnu2mvLLuhcC6Zbuei96nrjvplS/h+YBhZ1o7nvuKfR77i2A53+8gX09
vsC+ntXAvp6pwH6ZlcB+mVBgv0wMkOfQehqUzw5APo8H8rk1kM/mQD6bAfnc
G8jnn4F8Xgrk81Egn4cD+WwE5PMzIJ+XA/mcCeTtJCBvtwF56wLk7RdA3pZ9
O09ok36Wce3dE3+MPCQQW0Of2ZoN0xh/3H5DPQNZISkCvns7c2ZOgkdyDONd
7jfsfmy9QAZw34VMpt+FvMJ9z3cq/Z7vUu55+/b0eXt7wD50n3Q6t79Aje4v
+HhQ5fG6cfEW0Xg9gP0absB+upecnh2p/UDuOaha9DkoG67fJ7TfhUBdWwE6
6HE6p7xD51SOW1LuCuhv95761/6b+nsC+jty97Oe0vtZ33D7cb6l+3FMuOuR
eHo98hW37tqIrrue5+4r3aH3ldyB59L5fr9Wcr99OPsO1D7huL6S++3H2Z/7
jn7Nufe7OtD3uy7n1mOj6XqsqttP5No70va/ceeZk+l5Zkpw8wTrhWJcN/Va
qu99c0tye1mlP/i8NIizP0miP5bvuJ6FuD+wX8xKLVO71o4djKcaX+h0sEwg
Xg6G537WC2P8Tf/4W3MfKo6/tuajxn0uPoe/etzq8nZjBXI+JfmzWd/eZXx2
ePxcQ4cC8mpPYKcKNfH58PIbHv2GJgkkEdhv2AvYP5gDHI+k+t9GOBf9zatL
jFvourRfN1UgQ7h59TqdV2dciDDPWSjum4vbMNdiaop0/6HzRsjPLGDe3r9m
0IENOccYr/vyUeved5TnT3WzI7W9E7CfVFn53wfI/7Nc/s+h+V+mpPyH4lVW
XG2BuhjM1cUNWhczsS7+kXyWmudS819Z9aLqugvixvcjOr6q7rcZUBfQdxYm
SawLVfvfFZivYrn5ahadr6C4nqh4HlO1Dg/kJf0TTMXnXnTveRo/HywQ3ehE
71A98T7+4+D5X6lHFhADX6vwK2ujxPlk2vHY21dUH++HWr/3gXl7FzBvq9qf
5hLr2kJiXVdV/SqrTu8C4xU2K/nZ507ic2vO7b943ET/LiGuTrL1tZIZN5fX
XuymUUSGcecPSfT8YRR3vbaEXq+put/RXL+utN88YF+n1O8EQf1Kba+s736q
2h+Iyyr9FRMboL7Wcd91KqbfdYLsLFDSdz+lfj9U6ndRIT+ljqPU/IfszK+i
77pK5dD8MJbjiyiH8kdZdqD2EJdV+qt+99ml8v8Dx88F3A==
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{304.59876855346545`, 158.9909293729433},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{-5, 5}, {-5, 5}, {-1.2113481799927108`, 1.8994586148770587`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.29570573711564474`, -3.3047484094094224`, 0.6642259160427152},
  ViewVertical->{0.017494549163225754`, 0.1955155962966471, 
   0.9805445386897742}]], "Output",
 CellChangeTimes->{
  3.8240801962888536`*^9, {3.8240802375472097`*^9, 3.8240802520669327`*^9}, 
   3.8240804066191053`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"30b8d38f-24dd-4af1-822e-260a9f89745b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["\<\
Ctrl + Shift + (+) makes the 1/(1-x^3) look like above input.\
\>", "Text",
 CellChangeTimes->{{3.824080446068453*^9, 
  3.8240804955162697`*^9}},ExpressionUUID->"3fbc2416-747c-4b1c-99be-\
2a23ba82229f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8240804296079073`*^9, 
  3.8240804391724367`*^9}},ExpressionUUID->"7cf99318-6a22-4c81-9341-\
59705254ca9f"],

Cell["Use of Palettes", "Item",
 CellChangeTimes->{{3.8240780455306273`*^9, 3.824078085793832*^9}, {
  3.824078118746548*^9, 
  3.824078125858713*^9}},ExpressionUUID->"b7df7078-ae4f-4cdd-be62-\
81ecd1ae32d3"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{760, 833},
WindowMargins->{{509, Automatic}, {Automatic, 84}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False},
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"0e8102de-9201-496e-b381-a47b780aad9c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 172, 3, 96, "Title",ExpressionUUID->"a8e46aeb-547c-45a6-97ef-c181ba25d846"],
Cell[CellGroupData[{
Cell[780, 29, 349, 6, 76, "Chapter",ExpressionUUID->"9eb95ccd-aa04-41bf-a3ab-d43ea3af1d03"],
Cell[1132, 37, 155, 3, 31, "Item",ExpressionUUID->"401eb575-6a67-45ef-8337-40ac151800a1"],
Cell[1290, 42, 149, 3, 31, "Item",ExpressionUUID->"7e66ec6d-3aff-4f45-81fd-5b9787dee8d4"],
Cell[1442, 47, 155, 3, 31, "Item",ExpressionUUID->"93a1be01-7ebf-4099-ae79-ecd9e4581e5a"],
Cell[CellGroupData[{
Cell[1622, 54, 164, 3, 67, "Section",ExpressionUUID->"ee11b776-e70e-4fc8-89e8-3e636b55ab08"],
Cell[CellGroupData[{
Cell[1811, 61, 170, 3, 31, "Item",ExpressionUUID->"82c1ee75-39e2-42e5-ba80-4b6fe4428c3f"],
Cell[CellGroupData[{
Cell[2006, 68, 272, 3, 44, "WolframAlphaLong",ExpressionUUID->"200664b0-4b16-45c8-8f92-7721942454f7"],
Cell[2281, 73, 179929, 3600, 3662, "Print",ExpressionUUID->"fe56be7f-b5c7-4ca4-9aa3-9c60a3415d69"]
}, Open  ]],
Cell[182225, 3676, 14527, 353, 64, "WolframAlphaShortInput",ExpressionUUID->"4fb6bfab-906d-4cae-9974-32ace19982d3"],
Cell[196755, 4031, 579, 19, 64, InheritFromParent,ExpressionUUID->"52fc5bcc-eed8-4b8b-a600-d1a3f259c280"],
Cell[CellGroupData[{
Cell[197359, 4054, 1515, 35, 40, "Input",ExpressionUUID->"f00376bd-a9ba-44e7-b129-a6301f5ec88f"],
Cell[198877, 4091, 12056, 216, 240, "Output",ExpressionUUID->"c606ad60-5510-4554-a6c2-348e16f1f290"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[210982, 4313, 244, 4, 31, "Item",ExpressionUUID->"8ca80513-b04b-41ec-9613-ff99fe805189"],
Cell[CellGroupData[{
Cell[211251, 4321, 162, 3, 26, "Subitem",ExpressionUUID->"b78a2f9f-f9c0-43ba-9da8-f8cc2088696a"],
Cell[211416, 4326, 189, 3, 25, "SubsubitemNumbered",ExpressionUUID->"16e7793d-edcd-4723-9e6e-98be2285403c"],
Cell[211608, 4331, 186, 3, 25, "SubsubitemNumbered",ExpressionUUID->"d3aafb19-0146-42a2-893a-8f4a48bb0e89"],
Cell[211797, 4336, 180, 3, 25, "SubsubitemNumbered",ExpressionUUID->"fa37e65f-fd23-448b-ad53-072ff9fa02b0"],
Cell[CellGroupData[{
Cell[212002, 4343, 222, 4, 25, "SubsubitemNumbered",ExpressionUUID->"87a96c01-fd83-4a44-99ae-5289d8927317"],
Cell[CellGroupData[{
Cell[212249, 4351, 277, 6, 28, "Input",ExpressionUUID->"f7c23ff6-0d0b-43db-943f-d2eb9731cc5b"],
Cell[212529, 4359, 218, 5, 52, "Output",ExpressionUUID->"4f6de2ac-d24d-4420-9762-1fdd9c421b43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212784, 4369, 554, 15, 45, "Input",ExpressionUUID->"0443c527-7e2c-4e21-935a-73d5f3d458a2"],
Cell[213341, 4386, 89592, 1488, 176, "Output",ExpressionUUID->"30b8d38f-24dd-4af1-822e-260a9f89745b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[302984, 5880, 213, 5, 34, "Text",ExpressionUUID->"3fbc2416-747c-4b1c-99be-2a23ba82229f"],
Cell[303200, 5887, 156, 3, 28, "Input",ExpressionUUID->"7cf99318-6a22-4c81-9341-59705254ca9f"],
Cell[303359, 5892, 208, 4, 31, "Item",ExpressionUUID->"b7df7078-ae4f-4cdd-be62-81ecd1ae32d3"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

