(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    800832,      16617]
NotebookOptionsPosition[    783815,      16316]
NotebookOutlinePosition[    785411,      16361]
CellTagsIndexPosition[    785337,      16356]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Expression Difference", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
   3.770055604008165*^9, 3.7700556066618843`*^9}, {3.832335945198794*^9, 
   3.832335946914747*^9}, {3.834147760752921*^9, 3.8341477994480696`*^9}, 
   3.834147934087804*^9, {3.835106393870078*^9, 
   3.8351063963600874`*^9}},ExpressionUUID->"9b462709-6300-40eb-b960-\
40368eae64f0"],

Cell["Aman Kumar Dewangan", "Author",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.832335949309461*^9, 
  3.832335952432062*^9}, {3.8341478028091574`*^9, 
  3.834147807440301*^9}},ExpressionUUID->"2169de90-e7e5-4e73-8c80-\
70235ea5535f"],

Cell["National institute of Technology Raipur", "Affiliation",
 CellChangeTimes->{{3.802186209582007*^9, 3.802186214327465*^9}, {
  3.832335954006332*^9, 3.8323359557765293`*^9}, {3.834147810713024*^9, 
  3.8341478216402254`*^9}},ExpressionUUID->"df296095-5950-478c-8570-\
ee1aa705eb9f"],

Cell[TextData[{
 "The Purpose of the Project is to design a function that tells difference \
between two given expressions and denotes the changes that need to be made to \
reference expression(expr_1) to make it appear same as  another expression \
(expr_2) and produce the same evaluation.  The approach involves visualizing \
these expressions as trees and record these differences in expression as a \
list of ",
 StyleBox[" ",
  FontSlant->"Plain"],
 "\[OpenCurlyDoubleQuote]Insert\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Delete\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]ReplacePart\[CloseCurlyDoubleQuote] operations",
 StyleBox[" ",
  FontWeight->"Bold"],
 "which on being applied to reference expression(expr_1) results in the other \
expression(expr_2)."
}], "Abstract",
 CellChangeTimes->{{3.802186680026499*^9, 3.802186711462531*^9}, {
   3.8323359571935577`*^9, 3.832335959648123*^9}, {3.833031302355076*^9, 
   3.833031316081359*^9}, {3.833031479749832*^9, 3.833031483591234*^9}, {
   3.8341480070873446`*^9, 3.834148031223653*^9}, {3.834148064152289*^9, 
   3.834148304263419*^9}, {3.8341483736316614`*^9, 3.834148415566905*^9}, {
   3.834148742670293*^9, 3.8341488976227436`*^9}, {3.8341489438613873`*^9, 
   3.834148969237277*^9}, {3.834149139005454*^9, 3.83414925142964*^9}, {
   3.834149304413026*^9, 3.8341493787015944`*^9}, {3.834149444053732*^9, 
   3.8341495926205187`*^9}, {3.834149764614859*^9, 3.834149780952997*^9}, {
   3.8341765235084534`*^9, 3.8341765249332376`*^9}, {3.8342301689887857`*^9, 
   3.8342301870618153`*^9}, {3.835105529460224*^9, 3.835105530913131*^9}, {
   3.835113911841366*^9, 3.8351139922248783`*^9}, 3.8351696395861735`*^9, 
   3.8351864255917845`*^9},
 TextJustification->1.,ExpressionUUID->"320a3b73-8e08-413f-a5e3-7d72ff652fac"],

Cell[CellGroupData[{

Cell["ExpressionDifference Definition", "Section",
 CellChangeTimes->{{3.802186221820878*^9, 3.8021862228082314`*^9}, {
  3.83233589828449*^9, 3.832335898684196*^9}, {3.8323359631232023`*^9, 
  3.832335974308188*^9}, {3.835112947080574*^9, 
  3.8351129575774894`*^9}},ExpressionUUID->"1dbe4d29-2fc4-4236-b812-\
2c50be4f515c"],

Cell["\<\
The Problem of identifying Differences in Expressions has a very large scale \
application, as working with large expressions in Wolfram can make code look \
messy . Any piece of code should be able to clearly demonstrate what it' s \
doing and should be clearly distinguishable . The ExpressionDifference \
Function does the same . It clearly demonstrates how one expression can be \
converted into other expression with the use of Insert, ReplacePart and \
Delete operations . We explored that while working with expressions in \
Wolfram, sometime it becomes difficult to point out the differences between 2 \
expressions . Hence, ExpressionDifference solves this problem .\
\>", "Text",
 CellChangeTimes->{{3.835148296822857*^9, 3.8351482978201857`*^9}, {
  3.835220799022318*^9, 
  3.8352208021973586`*^9}},ExpressionUUID->"ba2c2c56-e5f2-495a-9c95-\
b877a6a6f993"],

Cell[CellGroupData[{

Cell["Code:", "Subsection",
 CellChangeTimes->{{3.8323359221544037`*^9, 3.83233592410432*^9}, {
  3.832335977658493*^9, 3.8323359780031157`*^9}, {3.835112964029453*^9, 
  3.8351129651106567`*^9}, {3.8351141684332094`*^9, 
  3.8351141733921165`*^9}},ExpressionUUID->"aca49f06-88a7-4141-9b4a-\
7e938b749c16"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExpressionDifference", "[", 
   RowBox[{"expr1_", ",", " ", "expr2_"}], "]"}], ":=", "\[IndentingNewLine]",
   "\t", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", "\t\t", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"seq", ",", 
      RowBox[{"diff", "=", 
       RowBox[{"{", "}"}]}], ",", " ", 
      RowBox[{"count", "=", "0"}]}], "}"}], ",", " ", 
    RowBox[{"(*", 
     RowBox[{"Module", " ", "Variables"}], "*)"}], "\n", "\n", "\t\t", 
    RowBox[{"(*", 
     RowBox[{
     "Checking", " ", "if", " ", "the", " ", "two", " ", "expressions", " ", 
      "are", " ", "different", " ", "or", " ", 
      RowBox[{"not", "."}]}], "*)"}], "\[IndentingNewLine]", "\t\t", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"expr1", ",", " ", "expr2"}], "]"}], "==", "True"}], ",", 
       " ", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\n", 
     "\t\t", 
     RowBox[{"(*", 
      RowBox[{
      "Checking", " ", "if", " ", "the", " ", "given", " ", "input", " ", 
       "expression", " ", "is", " ", "an", " ", "AtomQ", " ", "or", " ", 
       RowBox[{"not", "."}]}], "*)"}], "\[IndentingNewLine]", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"AtomQ", "[", "expr1", "]"}], " ", "&&", " ", 
        RowBox[{"AtomQ", "[", "expr2", "]"}]}], ",", " ", 
       "\[IndentingNewLine]", "\t\t\t", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"diff", ",", " ", 
          RowBox[{"Replace", "[", 
           RowBox[{"_", " ", "->", " ", "expr2"}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\t\t\t", 
        RowBox[{"Return", "[", "diff", "]"}]}]}], "\[IndentingNewLine]", 
      "\t\t", "]"}], ";", "\[IndentingNewLine]", "\n", "\t\t", 
     RowBox[{"(*", 
      RowBox[{"Evaluating", " ", "the", " ", "Sequence", " ", 
       StyleBox["\"\<seq\>\"",
        FontSlant->"Italic"], 
       StyleBox[" ",
        FontSlant->"Italic"], 
       StyleBox["using",
        FontSlant->"Italic"], 
       StyleBox[" ",
        FontSlant->"Italic"], "SequenceAlignment", " ", "Operation", " ", 
       "on", " ", "the", " ", "given", " ", "expression", " ", "depending", 
       " ", "upon", " ", "the", " ", "DelayedRule", " ", "of", " ", 
       "Matching", " ", 
       RowBox[{"Condition", "."}]}], "*)"}], "\[IndentingNewLine]", "\t\t", 
     RowBox[{"seq", " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"expr1", ",", "expr2"}], "}"}], ",", 
        RowBox[{"{", " ", "\[IndentingNewLine]", "\t\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"xHead_", "[", "xe___", "]"}], ",", " ", 
            RowBox[{"yHead_", "[", "ye___", "]"}]}], "}"}], ":>", " ", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"xHead", " ", "===", " ", "yHead"}], ",", 
            "\[IndentingNewLine]", "\t\t\t", 
            RowBox[{
             RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", "\t\t\t", 
             RowBox[{"SequenceAlignment", "[", 
              RowBox[{
               RowBox[{"{", "xe", "}"}], ",", " ", 
               RowBox[{"{", "ye", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
            "\t\t\t", ",", "\[IndentingNewLine]", "\t\t\t", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"diff", ",", " ", 
               RowBox[{"ExpressionDifference", "[", 
                RowBox[{"xHead", ",", " ", "yHead"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", "\t\t\t", 
             RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", "\t\t\t", 
             RowBox[{"SequenceAlignment", "[", 
              RowBox[{
               RowBox[{"{", "xe", "}"}], ",", " ", 
               RowBox[{"{", "ye", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
           "\t\t\t", "]"}]}], "\[IndentingNewLine]", "\t\t", "}"}]}], "]"}]}],
      ";", "\[IndentingNewLine]", "\n", "\t\t", 
     RowBox[{"(*", 
      RowBox[{
      "Mapping", " ", "through", " ", "each", " ", "and", " ", "every", " ", 
       "element", " ", "of", " ", "the", " ", "expresssion", " ", "and", " ", 
       "Appending", " ", "the", " ", "operations", " ", "that", " ", "need", 
       " ", "to", " ", "be", " ", "performed", " ", "on", " ", "expression", 
       " ", 
       StyleBox["\"\<expr1\>\"",
        FontSlant->"Italic"], " ", "in", " ", "list", " ", 
       "\"\<\!\(\*StyleBox[\"diff\",FontSlant->\"Italic\"]\)\!\(\*StyleBox[\"\
\\\"\<\>\",FontSlant->\"Italic\"]\)\>"}], "*)"}], "\[IndentingNewLine]", 
     "\t\t", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"e", ",", " ", "\[IndentingNewLine]", "\t\t\t", 
         RowBox[{
          RowBox[{"Replace", "[", 
           RowBox[{"e", ",", " ", 
            RowBox[{"{", "\[IndentingNewLine]", "\t\t\t\t", 
             RowBox[{
              RowBox[{
               RowBox[{"Except", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "___", "}"}], ",", " ", 
                  RowBox[{"{", "___", "}"}]}], "}"}], "]"}], ":>", 
               RowBox[{"(", "\[IndentingNewLine]", "\t\t\t\t", 
                RowBox[{"count", " ", "=", " ", 
                 RowBox[{"count", " ", "+", " ", 
                  RowBox[{"Length", "[", "e", "]"}]}]}], 
                "\[IndentingNewLine]", "\t\t\t", ")"}]}], ",", 
              "\[IndentingNewLine]", "\t\t", "\n", "\t\t\t", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", " ", "e2_"}], "}"}], ":>", 
               RowBox[{"(", "\[IndentingNewLine]", "\t\t\t\t", 
                RowBox[{
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"diff", ",", " ", 
                   RowBox[{"Insert", "[", 
                    RowBox[{"e2", ",", " ", "count"}], "]"}]}], "]"}], ";", 
                 "\[IndentingNewLine]", "\t\t\t\t", 
                 RowBox[{"count", " ", "=", " ", 
                  RowBox[{"count", " ", "+", " ", 
                   RowBox[{"Length", "[", "e2", "]"}]}]}]}], 
                "\[IndentingNewLine]", "\t\t\t", ")"}]}], ",", 
              "\[IndentingNewLine]", "\t\t", "\n", "\t\t\t", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"e1_", ",", " ", 
                 RowBox[{"{", "}"}]}], "}"}], ":>", 
               RowBox[{"(", "\[IndentingNewLine]", "\t\t\t\t", 
                RowBox[{
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"diff", ",", " ", 
                   RowBox[{"Delete", "[", "count", "]"}]}], "]"}], ";"}], 
                "\[IndentingNewLine]", "\t\t\t", ")"}]}], ",", 
              "\[IndentingNewLine]", "\t\t\t", "\n", "\t\t\t", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"e1_", ",", " ", "e2_"}], "}"}], ":>", 
               RowBox[{"(", "\[IndentingNewLine]", "\t", "\n", "\t\t\t\t", 
                RowBox[{
                 RowBox[{"Do", "[", "\[IndentingNewLine]", "\t\t\t\t\t", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"diff", ",", " ", 
                    RowBox[{"ReplacePart", "[", 
                    RowBox[{"count", "->", "common"}], "]"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", "\t\t\t\t", 
                    RowBox[{"count", "++"}], ";"}], "\[IndentingNewLine]", 
                   "\t\t\t\t", ",", "\[IndentingNewLine]", "\t\t\t\t", 
                   RowBox[{"{", 
                    RowBox[{"common", ",", " ", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", " ", 
                    RowBox[{";;", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}]}]}], "]"}],
                     "]"}]}], "}"}]}], "\[IndentingNewLine]", "\t\t\t\t", 
                  "]"}], ";", "\n", "\t\t\t\t", "\[IndentingNewLine]", 
                 "\t\t\t", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", "e1", "]"}], " ", ">", " ", 
                    RowBox[{"Length", "[", "e2", "]"}]}], ",", 
                   "\[IndentingNewLine]", "\t\t\t\t", 
                   RowBox[{"Do", "[", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"diff", ",", " ", 
                    RowBox[{"Delete", "[", "count", "]"}]}], "]"}], ",", " ", 
                    
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", "-", " ", 
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], "]"}], ",", 
                   "\t     ", "\n", "\t\t\t     ", 
                   RowBox[{"Do", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"diff", ",", " ", 
                    RowBox[{"Insert", "[", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", "count", "]"}], "]"}], ",", "count"}], 
                    "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\t\t\t\t", 
                    RowBox[{"count", "++"}]}], ",", "\[IndentingNewLine]", 
                    "\t\t\t\t", 
                    RowBox[{"Subtract", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", " ", 
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "]"}]}],
                   "\[IndentingNewLine]", "\t\t\t\t", "]"}]}], 
                "\[IndentingNewLine]", "\t\t\t", ")"}]}]}], 
             "\[IndentingNewLine]", "\t\t", "}"}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "\t", "]"}], ",", " ", "seq"}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
     RowBox[{"Return", "[", "diff", "]"}], ";"}]}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "Returning", " ", "the", " ", "List", " ", "of", " ", "Differences", " ", 
     "between", " ", "the", " ", "two", " ", "expressions"}], "*)"}], 
   "\[IndentingNewLine]", "\t", "]"}]}]], "Code",
 CellChangeTimes->{
  3.8351142597169065`*^9, {3.8351152980325394`*^9, 3.835115308840328*^9}, 
   3.83511540240936*^9, {3.83513977915699*^9, 3.8351397866281977`*^9}, {
   3.8351398593556976`*^9, 3.8351398678362536`*^9}, {3.835139913115467*^9, 
   3.835139922221078*^9}, {3.8351404913383293`*^9, 3.83514085712051*^9}, {
   3.83514590287603*^9, 3.835145904298176*^9}, 3.8351735353905373`*^9, 
   3.8351866254693975`*^9, {3.8351867274490757`*^9, 3.8351867765365953`*^9}, 
   3.835188003168068*^9},ExpressionUUID->"bc47e768-9434-4522-b73e-\
25a4d6dc6ad6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Variables", "Subsubsection"],
 " :"
}], "Subsection",
 CellChangeTimes->{{3.8351471700281086`*^9, 
  3.835147195532873*^9}},ExpressionUUID->"0d7d98e8-0875-4a56-93b6-\
5bc4c0cffec5"],

Cell[TextData[{
 "The argument ",
 StyleBox["\[OpenCurlyDoubleQuote]expr1_\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]expr2\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " here are the arguments of the ",
 StyleBox["ExpressionDifference",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " Function on which the operations are performed. The expression ",
 StyleBox["\[OpenCurlyDoubleQuote]expr1_\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 "  is the reference expression on which the differences obtained will be \
applied in order to obtain expression ",
 StyleBox["\[OpenCurlyDoubleQuote]expr2\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 "."
}], "Item",
 CellChangeTimes->{{3.8021862859717093`*^9, 3.8021862866993*^9}, {
   3.802186780928506*^9, 3.802186861789569*^9}, {3.832335906349555*^9, 
   3.832335909229568*^9}, {3.832336112805627*^9, 3.832336113421673*^9}, 
   3.833031536056086*^9, {3.83303157648634*^9, 3.8330315963449383`*^9}, {
   3.8351129753329144`*^9, 3.83511316202236*^9}, {3.83511319541285*^9, 
   3.835113213439004*^9}, {3.835113256152588*^9, 3.835113294585305*^9}, {
   3.835139764467648*^9, 3.835139767056978*^9}, {3.8351398293358297`*^9, 
   3.835139831304236*^9}, {3.8351398895860405`*^9, 
   3.835139891224231*^9}},ExpressionUUID->"a2158b14-0b1b-412d-ae55-\
ec45202bcdab"],

Cell[TextData[{
 "Variable ",
 StyleBox["\[OpenCurlyDoubleQuote]seq\[CloseCurlyDoubleQuote] ",
  FontSlant->"Italic"],
 " contains the \[OpenCurlyDoubleQuote]",
 StyleBox["SequenceAlignment\[CloseCurlyDoubleQuote] ",
  FontSlant->"Italic"],
 "of the ",
 StyleBox["(Arguments of a function)/(list)",
  FontSlant->"Italic"],
 " or ",
 StyleBox["Head",
  FontSlant->"Italic"],
 " of the function depending upon the matching TestCases."
}], "Item",
 CellChangeTimes->{{3.8021862859717093`*^9, 3.8021862866993*^9}, {
   3.802186780928506*^9, 3.802186861789569*^9}, {3.832335906349555*^9, 
   3.832335909229568*^9}, {3.832336112805627*^9, 3.832336113421673*^9}, 
   3.833031536056086*^9, {3.83303157648634*^9, 3.8330315963449383`*^9}, {
   3.8351129753329144`*^9, 3.8351131475500526`*^9}, {3.8351131846034184`*^9, 
   3.835113192723106*^9}, {3.835113302119502*^9, 3.835113414793006*^9}, {
   3.8351134603136587`*^9, 3.8351134707526817`*^9}, {3.8351135549620895`*^9, 
   3.8351135668004484`*^9}},ExpressionUUID->"910f4e47-5fef-454a-88de-\
ae8110d3fd35"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]diff\[CloseCurlyDoubleQuote] ",
  FontSlant->"Italic"],
 "is an empty list in which after obtaining the differences between the two \
expressions(expr1_",
 StyleBox[",expr2_",
  FontSlant->"Italic"],
 ") the differences will be appended in this list in sequential order."
}], "Item",
 CellChangeTimes->{{3.8021862859717093`*^9, 3.8021862866993*^9}, {
   3.802186780928506*^9, 3.802186861789569*^9}, {3.832335906349555*^9, 
   3.832335909229568*^9}, {3.832336112805627*^9, 3.832336113421673*^9}, 
   3.833031536056086*^9, {3.83303157648634*^9, 3.8330315963449383`*^9}, {
   3.8351129753329144`*^9, 3.8351131475500526`*^9}, {3.8351131846034184`*^9, 
   3.835113192723106*^9}, {3.835113302119502*^9, 3.835113414793006*^9}, {
   3.8351134603136587`*^9, 3.8351134707526817`*^9}, {3.8351135549620895`*^9, 
   3.835113699747915*^9}, 3.8351397696907625`*^9, 3.8351398281620793`*^9, {
   3.8351398939132237`*^9, 
   3.835139905760461*^9}},ExpressionUUID->"599a0a6d-d491-4f47-85ab-\
1000a966ec71"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]count\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " variable is a pointer to each and every element of the expression. In case \
there\[CloseCurlyQuote]s a difference between the two expression it tells the \
position where the difference exactly needs to be applied with respect to \
expression ",
 StyleBox["\[OpenCurlyDoubleQuote]expr1_\[CloseCurlyDoubleQuote].",
  FontSlant->"Italic"]
}], "Item",
 CellChangeTimes->{{3.8021862859717093`*^9, 3.8021862866993*^9}, {
   3.802186780928506*^9, 3.802186861789569*^9}, {3.832335906349555*^9, 
   3.832335909229568*^9}, {3.832336112805627*^9, 3.832336113421673*^9}, 
   3.833031536056086*^9, {3.83303157648634*^9, 3.8330315963449383`*^9}, {
   3.8351129753329144`*^9, 3.8351131475500526`*^9}, {3.8351131846034184`*^9, 
   3.835113192723106*^9}, {3.835113302119502*^9, 3.835113414793006*^9}, {
   3.8351134603136587`*^9, 3.8351134707526817`*^9}, {3.8351135549620895`*^9, 
   3.835113716937388*^9}, {3.8351151464852457`*^9, 3.835115151621385*^9}, 
   3.835139772111945*^9, 
   3.835139826312911*^9},ExpressionUUID->"94d21516-a1a0-46a9-a60e-\
a6b235582971"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Explanation :", "Subsubsection"]], "Subsection",
 CellChangeTimes->{{3.8351460429521065`*^9, 3.8351460473196573`*^9}, 
   3.8351471983163614`*^9},ExpressionUUID->"84d98b43-0a93-4966-85df-\
0fea38298e67"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"expr1", ",", "expr2"}], "]"}], "==", "True"}], ",", 
    RowBox[{"Return", "[", 
     RowBox[{"{", "}"}], "]"}]}], "]"}], ";"}]], "Code",ExpressionUUID->\
"773c9b7b-139e-4ba6-819d-a82d0bbae8f2"],

Cell["\<\
This statement checks whether the two expressions given as input are same or  \
not. If not so than we check whether the given expressions can be broken down \
into sub-expression i.e. if it is AtomQ or not:\
\>", "Text",
 CellChangeTimes->{{3.835146085595335*^9, 
  3.8351462035190544`*^9}},ExpressionUUID->"745437a0-8241-4b2b-ac34-\
7e8a9f89415f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Checking", " ", "if", " ", "the", " ", "given", " ", "input", " ", 
    "expression", " ", "is", " ", "an", " ", "AtomQ", " ", "or", " ", 
    RowBox[{"not", "."}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"AtomQ", "[", "expr1", "]"}], "&&", 
      RowBox[{"AtomQ", "[", "expr2", "]"}]}], ",", " ", "\[IndentingNewLine]",
      "\t", 
     RowBox[{
      RowBox[{"AppendTo", "[", 
       RowBox[{"diff", ",", 
        RowBox[{"Replace", "[", 
         RowBox[{"_", "->", "expr2"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"Return", "[", "diff", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
   ";"}]}]], "Code",
 CellChangeTimes->{{3.8351735577795043`*^9, 3.8351735593871956`*^9}, {
  3.8351736172223797`*^9, 
  3.835173621268359*^9}},ExpressionUUID->"5353f3fa-1fb7-4457-b98a-\
f68dfdb2d75d"],

Cell[TextData[{
 "If both the given Expression cannot be broken down to sub-expression  we \
append the difference in the list ",
 StyleBox["\[CloseCurlyDoubleQuote]diff \[OpenCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " and return the list diff as the result. "
}], "Text",
 CellChangeTimes->{{3.8351462225156393`*^9, 3.8351463557355165`*^9}, {
  3.835146436534919*^9, 3.8351465373506365`*^9}, {3.83514665827763*^9, 
  3.8351466698953557`*^9}},ExpressionUUID->"d0559c3c-025c-4c59-a2e2-\
0c3769965d33"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Evaluating", " ", "the", " ", "Sequence", " ", 
    StyleBox["\"\<seq\>\"",
     FontSlant->"Italic"], 
    StyleBox[" ",
     FontSlant->"Italic"], 
    StyleBox["using",
     FontSlant->"Italic"], 
    StyleBox[" ",
     FontSlant->"Italic"], "SequenceAlignment", " ", "Operation", " ", "on", 
    " ", "the", " ", "given", " ", "expression", " ", "depending", " ", 
    "upon", " ", "the", " ", "DelayedRule", " ", "of", " ", "Matching", " ", 
    RowBox[{"Condition", "."}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"seq", "=", 
     RowBox[{"Replace", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"expr1", ",", "expr2"}], "}"}], ",", 
       RowBox[{"{", " ", "\[IndentingNewLine]", "\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"xHead_", "[", "xe___", "]"}], ",", 
           RowBox[{"yHead_", "[", "ye___", "]"}]}], "}"}], ":>", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"xHead", "===", "yHead"}], ",", "\[IndentingNewLine]", 
           "\t", 
           RowBox[{
            RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", "\t", 
            RowBox[{"SequenceAlignment", "[", 
             RowBox[{
              RowBox[{"{", "xe", "}"}], ",", 
              RowBox[{"{", "ye", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
           "\t", ",", "\[IndentingNewLine]", "\t", 
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{"diff", ",", 
              RowBox[{"ExpressionDifference", "[", 
               RowBox[{"xHead", ",", "yHead"}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", "\t", 
            RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", "\t", 
            RowBox[{"SequenceAlignment", "[", 
             RowBox[{
              RowBox[{"{", "xe", "}"}], ",", 
              RowBox[{"{", "ye", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
          "\t", "]"}]}], "\[IndentingNewLine]", "}"}]}], "]"}]}], ";"}], 
   "\n"}]}]], "Code",
 CellChangeTimes->{{3.835173569957288*^9, 3.8351735706633806`*^9}, {
  3.8351736344131165`*^9, 
  3.835173664483699*^9}},ExpressionUUID->"273e331d-a94d-4ba7-9f73-\
70976bea474f"],

Cell[TextData[{
 "If not so, We compute SequenceAlignment on the (Arguments of the \
function/List/Head of expression) depending upon the matching case of \
DelayedRule . Than we Map through each Element of the Sequence \
\[OpenCurlyDoubleQuote]",
 StyleBox["seq",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] obtained and ",
 StyleBox["Append Insert, ReplacePart and Delete Operations",
  FontSlant->"Italic"],
 " on position relative to the expression \[OpenCurlyDoubleQuote]",
 StyleBox["expr1_",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] in list ",
 StyleBox["diff",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.835146673073992*^9, 3.835146674266019*^9}, {
  3.8351467271180086`*^9, 
  3.835146727566394*^9}},ExpressionUUID->"53c6bae6-fa7d-4dd3-885a-\
aece020d08cf"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"e", ",", " ", 
     RowBox[{"(*", 
      RowBox[{
      "Mapping", " ", "through", " ", "each", " ", "and", " ", "every", " ", 
       "element", " ", "of", " ", "the", " ", "expresssion", " ", "and", " ", 
       "Appending", " ", "the", " ", "operations", " ", "that", " ", "need", 
       " ", "to", " ", "be", " ", "performed", " ", "on", " ", "expression", 
       " ", 
       StyleBox["\"\<expr1\>\"",
        FontSlant->"Italic"], " ", "in", " ", "list", " ", 
       "\"\<\!\(\*StyleBox[\"diff\",FontSlant->\"Italic\"]\)\!\(\*StyleBox[\"\
\\\"\<\>\",FontSlant->\"Italic\"]\)\>"}], "*)"}], "\[IndentingNewLine]", "\t",
      "\n", "\t", 
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"e", ",", 
        RowBox[{"{", "\[IndentingNewLine]", "\t", 
         RowBox[{
          RowBox[{
           RowBox[{"Except", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "___", "}"}], ",", 
              RowBox[{"{", "___", "}"}]}], "}"}], "]"}], ":>", 
           RowBox[{"(", "\[IndentingNewLine]", "\t", 
            RowBox[{"count", "=", 
             RowBox[{"count", "+", 
              RowBox[{"Length", "[", "e", "]"}]}]}], "\[IndentingNewLine]", 
            "\t", ")"}]}], ",", "\n", "\t", "\[IndentingNewLine]", "\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "e2_"}], "}"}], ":>", 
           RowBox[{"(", "\[IndentingNewLine]", "\t\t", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"diff", ",", 
               RowBox[{"Insert", "[", 
                RowBox[{"e2", ",", "count"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", "\t\t", 
             RowBox[{"count", "=", 
              RowBox[{"count", "+", 
               RowBox[{"Length", "[", "e2", "]"}]}]}]}], 
            "\[IndentingNewLine]", "\t", ")"}]}], ",", "\[IndentingNewLine]", 
          "\n", "\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"e1_", ",", 
             RowBox[{"{", "}"}]}], "}"}], ":>", 
           RowBox[{"(", "\[IndentingNewLine]", "\t", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"diff", ",", 
               RowBox[{"Delete", "[", "count", "]"}]}], "]"}], ";"}], 
            "\[IndentingNewLine]", "\t", ")"}]}], ",", "\[IndentingNewLine]", 
          "\t", "\n", "\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"e1_", ",", "e2_"}], "}"}], ":>", 
           RowBox[{"(", "\[IndentingNewLine]", "\t\t", 
            RowBox[{
             RowBox[{"Do", "[", "\[IndentingNewLine]", "\t\t", 
              RowBox[{
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"diff", ",", 
                  RowBox[{"ReplacePart", "[", 
                   RowBox[{"count", "->", "common"}], "]"}]}], "]"}], ";", 
                "\[IndentingNewLine]", "\t\t", 
                RowBox[{"count", "++"}], ";"}], "\[IndentingNewLine]", "\t\t",
                ",", "\[IndentingNewLine]", "\t\t", 
               RowBox[{"{", 
                RowBox[{"common", ",", 
                 RowBox[{"e", "[", 
                  RowBox[{"[", 
                   RowBox[{"2", ",", 
                    RowBox[{";;", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}]}]}], "]"}],
                   "]"}]}], "}"}]}], "\[IndentingNewLine]", "\t\t", "]"}], 
             ";", "\[IndentingNewLine]", "\t\t", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "e1", "]"}], ">", 
                RowBox[{"Length", "[", "e2", "]"}]}], ",", 
               "\[IndentingNewLine]", "\t\t\t", 
               RowBox[{"Do", "[", 
                RowBox[{
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"diff", ",", 
                   RowBox[{"Delete", "[", "count", "]"}]}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"e", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", 
                  RowBox[{"Length", "[", 
                   RowBox[{"e", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], "]"}], ",", 
               "\[IndentingNewLine]", "\t\t\t", 
               RowBox[{"Do", "[", "\[IndentingNewLine]", "\t\t\t\t", 
                RowBox[{
                 RowBox[{
                  RowBox[{"AppendTo", "[", 
                   RowBox[{"diff", ",", 
                    RowBox[{"Insert", "[", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", "count", "]"}], "]"}], ",", "count"}], 
                    "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\t\t\t\t", 
                  RowBox[{"count", "++"}]}], ",", "\[IndentingNewLine]", 
                 "\t\t\t\t", 
                 RowBox[{"Subtract", "[", 
                  RowBox[{
                   RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                   RowBox[{"Length", "[", 
                    RowBox[{"e", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "]"}]}],
               "\[IndentingNewLine]", "\t\t", "]"}]}], "\[IndentingNewLine]", 
            "\t", ")"}]}]}], "\[IndentingNewLine]", "\t", "}"}]}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ",", "seq"}], "]"}]], "Code",
 CellChangeTimes->{
  3.8351467551444597`*^9, {3.835173675356223*^9, 
   3.8351737455148735`*^9}},ExpressionUUID->"4937ebe5-c9b0-4c7a-b4bc-\
45ae149c7b46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Understanding Output Patterns:", "Subsubsection"]], \
"Subsection",
 CellChangeTimes->{
  3.835181747911271*^9},ExpressionUUID->"d7c96465-a0f3-48af-ac9a-\
049c5c150fff"],

Cell["Let' s Understand this with some of the examples :", "Text",
 CellChangeTimes->{{3.8351813055464754`*^9, 
  3.835181306609625*^9}},ExpressionUUID->"553cf567-73cd-4de1-84f6-\
cd72e24a1c94"],

Cell[CellGroupData[{

Cell["Case 1 :", "Item",
 CellChangeTimes->{{3.8351812856263256`*^9, 
  3.835181291700697*^9}},ExpressionUUID->"3300189d-c9d3-412d-9b00-\
11f63e7c5604"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"Sin", "[", "x", "]"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.8351738456261864`*^9, 3.8351738644342937`*^9}, {
  3.8351799293845015`*^9, 3.8351799911368246`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"2f64d1d9-3b95-40aa-8ab0-00458245e496"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8351802578477845`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"fc2e8e84-ad76-4356-ac21-85511a7cbd47"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "As the two expressions are completely same and there  ",
 Cell[BoxData[
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Sin, {
        Tree[$CellContext`x, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Sin",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{75., Automatic}]], "Input",ExpressionUUID->
  "91d2259a-5255-4f72-8203-9b8d4522645c"],
 ", doesn\[CloseCurlyQuote]t have any difference in the structure with \
respect to the second expression hence, this returns an empty list {}. Hence \
for the cases wherever ",
 StyleBox["(expr1= = = expr2)",
  FontSlant->"Italic"],
 " the result will always be an empty list."
}], "Text",
 CellChangeTimes->{{3.8351800058519773`*^9, 
  3.8351801677683754`*^9}},ExpressionUUID->"72e917d0-3c3d-4cad-a872-\
f3054c9fd210"],

Cell[CellGroupData[{

Cell["Case 2 :", "Item",
 CellChangeTimes->{{3.8351802285082974`*^9, 
  3.8351802375648956`*^9}},ExpressionUUID->"7a2be333-d0b4-4557-81fa-\
da6cc03415fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"Sin", "[", "y", "]"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.8351802469691687`*^9, 3.835180269336689*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"e23894b4-06fa-4198-9720-6ca7fb3de3d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ReplacePart", "[", 
   RowBox[{"1", "\[Rule]", "y"}], "]"}], "}"}]], "Output",
 CellChangeTimes->{3.835180271334741*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"db94c01f-9ba4-4b6a-90e0-01cda1afd48a"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "When ever there\[CloseCurlyQuote]s slight change in the functions, such \
that only replacing the arguments of the functions makes it equal to another \
expression \[OpenCurlyDoubleQuote]",
 StyleBox["ReplacePart\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " operation comes into the picture. Here in this example, we have ",
 StyleBox["expr1 = Sin[x] ",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Sin, {
        Tree[$CellContext`x, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Sin",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{58., Automatic}]], "Input",ExpressionUUID->
  "1a288f29-737b-4ab4-b720-8b34a64cbaa5"],
 "and ",
 StyleBox["expr2 = Sin[y] ",
  FontSlant->"Italic"],
 Cell[BoxData[
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Sin, {
        Tree[$CellContext`y, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Sin",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["y",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{57., Automatic}]], "Input",ExpressionUUID->
  "d511386c-80ac-4850-b460-ab910194ff2d"],
 ", the two expressions have similar structure with the only difference being \
in the arguments, hence in such cases we just need to perform the ",
 StyleBox["\[OpenCurlyDoubleQuote]ReplacePart\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " operation at specific position in expression ",
 StyleBox["expr1",
  FontSlant->"Italic"],
 " to obtain expression ",
 StyleBox["expr2. ",
  FontSlant->"Italic"],
 "On applying the symbolic operation obtained to expression ",
 StyleBox["expr1",
  FontSlant->"Italic"],
 " we can obtain expression ",
 StyleBox["expr2.",
  FontSlant->"Italic"],
 " Below here is a given demonstration how we can apply the difference \
obtained as Symbolic Operation to Expression ",
 StyleBox["expr1.",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.8351802770161324`*^9, 3.8351803776157846`*^9}, {
  3.835180424064049*^9, 3.8351806026878195`*^9}, {3.835180634887336*^9, 
  3.8351807947110205`*^9}},ExpressionUUID->"50d1920d-ffcc-434e-91d5-\
5c07c6337208"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplacePart", "[", 
   RowBox[{"1", "\[Rule]", "y"}], "]"}], "[", 
  RowBox[{"Sin", "[", "x", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.8351803894721174`*^9, 3.8351804072169323`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"b3afc38a-b176-475e-b31d-b1f511e7806e"],

Cell[BoxData[
 RowBox[{"Sin", "[", "y", "]"}]], "Output",
 CellChangeTimes->{3.8351804077436724`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"42ffdeb8-1a96-4535-8077-32de962da413"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case 3:", "Item",
 CellChangeTimes->{{3.8351808173114576`*^9, 
  3.835180819822554*^9}},ExpressionUUID->"08a711b4-e732-4927-ac42-\
f8d73053723e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"f", "[", "]"}], ",", 
   RowBox[{"f", "[", "x", "]"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.8351808243914604`*^9, 3.835180832944371*^9}, {
  3.8351808660115957`*^9, 3.8351808708314543`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"02d1b623-f4fb-4abf-bb2c-d5fb62d6242a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Insert", "[", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", "1"}], "]"}], "}"}]], "Output",
 CellChangeTimes->{3.8351808342441607`*^9, 3.835180931028313*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"622078d7-d055-4e92-aa51-f18e93e64614"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "This case depicts the case when outer structure of an expression appears to \
be same, but arguments seems to be missing from the other expression. In this \
example, we can clearly see that expression ",
 StyleBox["expr1 = f[] ",
  FontSlant->"Italic"],
 "has it\[CloseCurlyQuote]s argument missing while expression ",
 StyleBox["expr2 = f[x]",
  FontSlant->"Italic"],
 "  ",
 "has argument x as input to the function, hence here we obtain a Symbolic \
Insert Operator as output. On applying this Symbolic ",
 StyleBox["Insert ",
  FontSlant->"Italic"],
 "operation to the expression ",
 StyleBox["expr1",
  FontSlant->"Italic"],
 ", we obtain expression ",
 StyleBox["expr2 =  f[x].",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.8351809341942134`*^9, 
  3.8351812219999204`*^9}},ExpressionUUID->"c61a3ba7-e88f-47da-9434-\
b101426a38b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Insert", "[", 
   RowBox[{"x", ",", "1"}], "]"}], "[", 
  RowBox[{"f", "[", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.8351810021865816`*^9, 3.8351810081192503`*^9}, {
  3.8351812380322647`*^9, 3.835181245637854*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"dc883b71-31a6-48b4-a126-19e490eb4ca5"],

Cell[BoxData[
 RowBox[{"f", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.835181246417334*^9, 3.835181277710209*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"01443a99-2f8b-457d-b092-8df4caed5d89"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case 4:", "Item",
 CellChangeTimes->{{3.8351814233647175`*^9, 
  3.8351814259827747`*^9}},ExpressionUUID->"47abbed9-571c-4eeb-94fc-\
70dc466e9f7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"f", "[", "]"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.835181442344245*^9, 3.835181452997535*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"8a011e4f-cc42-4f0a-b39c-51dedecc1a82"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Delete", "[", "1", "]"}], "}"}]], "Output",
 CellChangeTimes->{3.8351814538550854`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"9171b6bb-9cf8-42ab-a0ac-97707ff8ebb8"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "This case depicts the case when outer structure of an expression appears to \
be same, but arguments seems to be added to the other expression. In this \
example, we can clearly see that expression ",
 StyleBox["expr1 = f[x] ",
  FontSlant->"Italic"],
 "has it\[CloseCurlyQuote]s argument  while expression ",
 StyleBox["expr2 = f[]",
  FontSlant->"Italic"],
 "  has argument x missing from the function, hence here we obtain a Symbolic \
Delete Operator as output. On applying this Symbolic ",
 StyleBox["Delete ",
  FontSlant->"Italic"],
 "operation to the expression ",
 StyleBox["expr1",
  FontSlant->"Italic"],
 ", we obtain expression ",
 StyleBox["expr2 =  f[].",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.8351815421333685`*^9, 
  3.835181611644817*^9}},ExpressionUUID->"0dcd928c-ec2a-4e57-b707-\
a373bf6e4b65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Delete", "[", "1", "]"}], "[", 
  RowBox[{"f", "[", "x", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.835181620716881*^9, 3.8351816351418037`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"750896f2-a471-4fea-920c-c3e63aafa32e"],

Cell[BoxData[
 RowBox[{"f", "[", "]"}]], "Output",
 CellChangeTimes->{3.835181638321003*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"bcde99c7-8b7a-4041-b196-6a3222e5f136"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basics and Examples", "Section",
 CellChangeTimes->{{3.802186221820878*^9, 3.8021862228082314`*^9}, {
  3.832335902664353*^9, 3.832335903014779*^9}, {3.83233597998449*^9, 
  3.832335980318049*^9}, {3.8351151602940955`*^9, 3.8351151632055187`*^9}, {
  3.8351485275869093`*^9, 
  3.835148538880822*^9}},ExpressionUUID->"ea3c9035-2b5f-485b-9672-\
9c996bb3ce9a"],

Cell[CellGroupData[{

Cell["Example 1:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 
  3.835115220493879*^9}},ExpressionUUID->"47dd89b3-94f5-49ef-a8c7-\
01a0ff926ed1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"Sin", "[", "x", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
  3.8351151752156982`*^9, 3.8351151888857822`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"55646084-8a9b-4372-b3de-92779da73aaf"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.8351735837662315`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"5e9d030b-3a4a-408e-8924-9f69a645e16f"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree[Sin, {
       Tree[$CellContext`x, None]}]]}, {
     {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
      AbsoluteThickness[1], Opacity[0.7], 
      StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
       GraphicsHighlightColor->RGBColor[
        0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
     {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      StyleBox[{InsetBox[
         FrameBox["Sin",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 1.}], InsetBox[
         FrameBox["x",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0., 0.}]},
       GraphicsHighlightColor->RGBColor[
        0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
  BaseStyle->{
   FrontEnd`GraphicsHighlightColor -> 
    RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
  FormatType->StandardForm,
  FrameTicks->None,
  ImageSize->{75.83333333333388, Automatic}]], "Input",ExpressionUUID->\
"4a571a9e-a948-401b-b4c0-950f6dfe14f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 2:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 
  3.8351152416460238`*^9}},ExpressionUUID->"2fbc8c92-0ed3-46bd-9837-\
3fc82a8164ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{"Sin", ",", "Cos"}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.8351152436782484`*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"36017ed2-b6b2-4779-b6f9-bab76bf875d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Replace", "[", 
   RowBox[{"_", "\[Rule]", "Cos"}], "]"}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.83511527004641*^9, 
  3.8351153185564895`*^9, 3.83517359043893*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"472f4ca9-a904-4d01-a9ef-9991854c9cd8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 3:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.835115273045843*^9, 
  3.8351152734873877`*^9}},ExpressionUUID->"3062cf99-9110-406a-badb-\
2ae173679cd4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"Sin", "[", "y", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115275567296*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"4ae281b2-8eb4-4218-a5be-8aba99c7e98c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ReplacePart", "[", 
   RowBox[{"1", "\[Rule]", "y"}], "]"}], "}"}]], "Output",
 CellChangeTimes->{
  3.835115189772026*^9, 3.8351152765902123`*^9, {3.8351153212237144`*^9, 
   3.8351153373819*^9}, 3.835115384007762*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"b5d6123f-41e1-4a05-b2cb-d20e1254daeb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Sin, {
        Tree[$CellContext`x, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Sin",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None], 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Sin, {
        Tree[$CellContext`y, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Sin",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["y",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None]}]], "Input",
 CellChangeTimes->{
  3.8351474859103374`*^9},ExpressionUUID->"7017608b-b630-439d-b934-\
a01cc4290544"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 4:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.835115955339729*^9, 
  3.835115955611677*^9}},ExpressionUUID->"d83730e0-de22-458c-9431-\
edd9b1ae8e9e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.8351154347658443`*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"5939ce16-a01b-4bb8-9d32-d441b709a699"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Insert", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", "1"}], "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.8351154358222017`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"3d8a8c78-d002-4b2a-9a11-2b66c8fc3e53"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[
       Tree[List, None], None]]}, {{}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[InsetBox[
         FrameBox[
          GraphicsBox[
           NamespaceBox["Trees",
            DynamicModuleBox[{Typeset`tree = HoldComplete[
              Tree[List, None]]}, {{}, 
              {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
               StyleBox[InsetBox[
                 FrameBox["List",
                  
                  Background->RGBColor[
                   0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
                  FrameStyle->Directive[
                    RGBColor[
                    0.6588235294117647, 0.7294117647058823, 
                    0.7058823529411765], 
                    AbsoluteThickness[1]],
                  ImageSize->Automatic,
                  RoundingRadius->0,
                  StripOnInput->False], {1., 1.}],
                
                GraphicsHighlightColor->RGBColor[
                 0.403921568627451, 0.8705882352941177, 
                  0.7176470588235294]]}}]],
           
           BaseStyle->{
            FrontEnd`GraphicsHighlightColor -> 
             RGBColor[
              0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
           FormatType->StandardForm,
           FrameTicks->None,
           PlotRangePadding->0.1],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1., 1.}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   PlotRangePadding->0.1], 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree["a", None], 
        Tree["b", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}}], 
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4472135954999579, 0.8944271909999159}], 
         InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"b\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.8944271909999159, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None]}]], "Input",
 CellChangeTimes->{
  3.8351475195375333`*^9},ExpressionUUID->"d099be57-d1c3-4e83-88bf-\
363367a47756"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 5:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.835115958539501*^9, 
  3.8351159587820463`*^9}},ExpressionUUID->"688be116-9904-4d4a-bfda-\
e9bae8cfc9a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "\"\<a\>\"", ",", "2", ",", "\"\<b\>\"", ",", "3"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.8351154423413906`*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"468fbb48-3d15-4263-af4a-729e68abc026"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"{", "\<\"a\"\>", "}"}], ",", "2"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"{", "\<\"b\"\>", "}"}], ",", "4"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.8351154432758303`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"cb274683-3a37-40a9-bc26-47c2d2dad3ce"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree[1, None], 
        Tree[2, None], 
        Tree[3, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.7745966692414834, 0.7745966692414834}, {0., 0.}}], 
         LineBox[{{0.7745966692414834, 0.7745966692414834}, {
          0.7745966692414834, 0.}}], 
         LineBox[{{0.7745966692414834, 0.7745966692414834}, {
          1.5491933384829668`, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.7745966692414834, 0.7745966692414834}], 
         InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["2",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.7745966692414834, 0.}], InsetBox[
          FrameBox["3",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.5491933384829668, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None], "        ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree[1, None], 
        Tree["a", None], 
        Tree[2, None], 
        Tree["b", None], 
        Tree[3, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{1.1547005383792517`, 0.5773502691896258}, {0., 0.}}], 
         LineBox[{{1.1547005383792517`, 0.5773502691896258}, {
          0.5773502691896258, 0.}}], 
         LineBox[{{1.1547005383792517`, 0.5773502691896258}, {
          1.1547005383792517`, 0.}}], 
         LineBox[{{1.1547005383792517`, 0.5773502691896258}, {
          1.7320508075688774`, 0.}}], 
         LineBox[{{1.1547005383792517`, 0.5773502691896258}, {
          2.3094010767585034`, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {1.1547005383792517, 0.5773502691896258}], 
         InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.5773502691896258, 0.}], InsetBox[
          FrameBox["2",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.1547005383792517, 0.}], InsetBox[
          FrameBox["\<\"b\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.7320508075688774, 0.}], InsetBox[
          FrameBox["3",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.3094010767585034, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{149., Automatic}]}]], "Input",
 CellChangeTimes->{
  3.8351475604664197`*^9, {3.8351478972351704`*^9, 
   3.835147898428052*^9}},ExpressionUUID->"4ab68d89-961d-453a-8d72-\
32553c226435"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 6:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.8351159622264805`*^9, 
  3.835115962667714*^9}},ExpressionUUID->"132a8ab6-6532-4a70-b783-\
eecd13bb21be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"sin", "[", "\"\<x\>\"", "]"}], ",", 
   RowBox[{"cos", "[", "\"\<y\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"1e35e6c1-b5f2-4bc6-98bf-906499a5b41a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Replace", "[", 
     RowBox[{"_", "\[Rule]", "cos"}], "]"}], "}"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", "\<\"y\"\>"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"352d9444-e9cd-4a24-901d-3ee1d3afdb4b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Sin, {
        Tree[$CellContext`x, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Sin",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None], 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Cos, {
        Tree[$CellContext`y, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Cos",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["y",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None]}]], "Input",
 CellChangeTimes->{
  3.835147604032333*^9},ExpressionUUID->"d2cf00ca-7e47-4131-b4f7-\
5292781f3881"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 7:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.8351159651089272`*^9, 
  3.8351159656437817`*^9}},ExpressionUUID->"e8707df0-2cd4-429c-a3ec-\
a4d63a2b2fef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x", ",", "y"}], "]"}], ",", 
   RowBox[{"g", "[", "x", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
  3.8351151752156982`*^9, 3.8351151888857822`*^9}, {3.835115453750741*^9, 
  3.8351154824463177`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"c8b39709-cdd9-4423-bf98-d9a768795b01"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Replace", "[", 
     RowBox[{"_", "\[Rule]", "g"}], "]"}], "}"}], ",", 
   RowBox[{"Delete", "[", "2", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.835115189772026*^9, {3.835115454498233*^9, 3.8351154833500385`*^9}},
 CellLabel->"Out[44]=",ExpressionUUID->"6292c21e-f4ae-4d1f-8f79-f367ab8b2d61"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`f, {
        Tree[$CellContext`x, None], 
        Tree[$CellContext`y, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}}], 
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["f",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4472135954999579, 0.8944271909999159}], 
         InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["y",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.8944271909999159, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None], 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`g, {
        Tree[$CellContext`x, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[LineBox[{{0., 1.}, {0., 0.}}],
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["g",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 1.}], InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None]}]], "Input",
 CellChangeTimes->{
  3.8351476357997646`*^9},ExpressionUUID->"af87f5be-430d-4461-8016-\
4244b3fb8ccf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 8:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.835115968491785*^9, 
  3.8351159687720346`*^9}},ExpressionUUID->"9ced3756-a985-49e8-8105-\
aba949f6976c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Plus", "[", 
    RowBox[{
     RowBox[{"Log", "[", 
      RowBox[{
       RowBox[{"3", "x"}], "+", "y"}], "]"}], ",", "5"}], "]"}], ",", 
   RowBox[{"Times", "[", 
    RowBox[{"100", ",", 
     RowBox[{"Times", "[", 
      RowBox[{"x", ",", "2"}], "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.8351154926623554`*^9},
 CellLabel->"In[45]:=",ExpressionUUID->"85f641ed-8229-46a6-bda9-e5d629053b1e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Replace", "[", 
     RowBox[{"_", "\[Rule]", "Times"}], "]"}], "}"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", "200"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"2", "\[Rule]", "x"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351154932944307`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"9671ec52-3771-4c42-ae71-e2e31b6682f5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Plus, {
        Tree[5, None], 
        Tree[Log, {
          Tree[Plus, {
            Tree[Times, {
              Tree[3, None], 
              Tree[$CellContext`x, None]}], 
            Tree[$CellContext`y, None]}]}]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4537426064865151, 3.629940851892121}, {0., 
          2.7224556389190906`}}], 
         LineBox[{{0.4537426064865151, 3.629940851892121}, {
          0.9074852129730302, 2.7224556389190906`}}], 
         LineBox[{{0.9074852129730302, 2.7224556389190906`}, {
          0.9074852129730302, 1.8149704259460604`}}], 
         LineBox[{{0.9074852129730302, 1.8149704259460604`}, {
          0.4537426064865151, 0.9074852129730302}}], 
         LineBox[{{0.9074852129730302, 1.8149704259460604`}, {
          1.3612278194595453`, 0.9074852129730302}}], 
         LineBox[{{0.4537426064865151, 0.9074852129730302}, {0., 0.}}], 
         LineBox[{{0.4537426064865151, 0.9074852129730302}, {
          0.9074852129730302, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Plus",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4537426064865151, 3.629940851892121}], 
         InsetBox[
          FrameBox["5",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 2.7224556389190906}], InsetBox[
          FrameBox["Log",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.9074852129730302, 2.7224556389190906}], 
         InsetBox[
          FrameBox["Plus",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.9074852129730302, 1.8149704259460604}], 
         InsetBox[
          FrameBox["Times",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4537426064865151, 0.9074852129730302}], 
         InsetBox[
          FrameBox["3",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9074852129730302, 0.}], InsetBox[
          FrameBox["y",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.3612278194595453, 0.9074852129730302}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{138.5, Automatic}], "               ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[Times, {
        Tree[200, None], 
        Tree[$CellContext`x, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}}], 
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["Times",
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4472135954999579, 0.8944271909999159}], 
         InsetBox[
          FrameBox["200",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["x",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.8944271909999159, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{349., Automatic}]}]], "Input",
 CellChangeTimes->{
  3.835147676665392*^9, {3.8351478844516077`*^9, 
   3.8351478859579363`*^9}},ExpressionUUID->"215b162f-b7f3-4417-b2c8-\
9a53dffe6435"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 9:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.83511597310736*^9, 
  3.8351159734198723`*^9}},ExpressionUUID->"8438e01f-41f0-4179-9162-\
6ac9c0533435"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", "2", "}"}]}], "}"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.8351155022863584`*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"9935d1d4-2539-4126-96f5-91b638580a77"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", "2", "}"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"Delete", "[", "2", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351155030294886`*^9, 3.835173596984812*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"dc662dd1-c43b-40da-b200-2486e3dabbac"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree[List, {
          Tree[1, None]}], 
        Tree[List, {
          Tree[2, None]}]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.47140452079103173`, 1.885618083164127}, {0., 
          0.9428090415820635}}], 
         LineBox[{{0.47140452079103173`, 1.885618083164127}, {
          0.9428090415820635, 0.9428090415820635}}], 
         LineBox[{{0., 0.9428090415820635}, {0., 0.}}], 
         LineBox[{{0.9428090415820635, 0.9428090415820635}, {
          0.9428090415820635, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.47140452079103173, 1.885618083164127}], 
         InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 0.9428090415820635}], InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.9428090415820635, 0.9428090415820635}], 
         InsetBox[
          FrameBox["2",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9428090415820635, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{114., Automatic}], "           ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree[List, {
          Tree[List, {
            Tree[1, None]}], 
          Tree[List, {
            Tree[2, None]}]}]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4767312946227961, 2.8603877677367766`}, {
          0.4767312946227961, 1.9069251784911843`}}], 
         LineBox[{{0.4767312946227961, 1.9069251784911843`}, {0., 
          0.9534625892455921}}], 
         LineBox[{{0.4767312946227961, 1.9069251784911843`}, {
          0.9534625892455922, 0.9534625892455921}}], 
         LineBox[{{0., 0.9534625892455921}, {0., 0.}}], 
         LineBox[{{0.9534625892455922, 0.9534625892455921}, {
          0.9534625892455922, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4767312946227961, 2.8603877677367766}], 
         InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4767312946227961, 1.9069251784911843}], 
         InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0., 0.9534625892455921}], InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.9534625892455922, 0.9534625892455921}], 
         InsetBox[
          FrameBox["2",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9534625892455922, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{84.33333333333334, Automatic}]}]], "Input",
 CellChangeTimes->{
  3.8351477368728423`*^9, {3.8351478729625053`*^9, 
   3.8351478751646533`*^9}},ExpressionUUID->"004d9ae4-80f1-4b90-b9c5-\
780e827dd8b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 10:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.8351159763396063`*^9, 3.8351159771957655`*^9}, {3.835147763050548*^9, 
  3.8351477636432424`*^9}},ExpressionUUID->"969e3ae4-ac44-4e7d-8511-\
be6c55662045"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", "10", "]"}], ",", "10"}], "]"}], ",", 
   RowBox[{"Characters", "[", "\"\<Aman Connor\>\"", "]"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.835115515773597*^9},
 CellLabel->"In[47]:=",ExpressionUUID->"fa52033f-0eb9-4821-979c-041bcdd71e94"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", "\<\"A\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"2", "\[Rule]", "\<\"m\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"3", "\[Rule]", "\<\"a\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"4", "\[Rule]", "\<\"n\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"5", "\[Rule]", "\<\" \"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"6", "\[Rule]", "\<\"C\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"7", "\[Rule]", "\<\"o\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"8", "\[Rule]", "\<\"n\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"9", "\[Rule]", "\<\"n\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"10", "\[Rule]", "\<\"o\"\>"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{"\<\"r\"\>", ",", "11"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351155164379296`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"73e4858b-f785-41c0-b2be-88f8dc8dce71"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree[9, None], 
        Tree[3, None], 
        Tree[4, None], 
        Tree[1, None], 
        Tree[2, None], 
        Tree[5, None], 
        Tree[10, None], 
        Tree[1, None], 
        Tree[0, None], 
        Tree[10, None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {0., 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          0.3287979746107146, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          0.6575959492214292, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          0.9863939238321437, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          1.3151918984428583`, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          1.643989873053573, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          1.9727878476642875`, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          2.301585822275002, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          2.6303837968857167`, 0.}}], 
         LineBox[{{1.4795908857482156`, 0.3287979746107146}, {
          2.9591817714964312`, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {1.4795908857482156, 0.3287979746107146}], 
         InsetBox[
          FrameBox["9",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["3",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.3287979746107146, 0.}], InsetBox[
          FrameBox["4",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.6575959492214292, 0.}], InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9863939238321437, 0.}], InsetBox[
          FrameBox["2",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.3151918984428583, 0.}], InsetBox[
          FrameBox["5",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.643989873053573, 0.}], InsetBox[
          FrameBox["10",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.9727878476642875, 0.}], InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.301585822275002, 0.}], InsetBox[
          FrameBox["0",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.6303837968857167, 0.}], InsetBox[
          FrameBox["10",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.9591817714964312, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{332., Automatic}], "        ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree["A", None], 
        Tree["m", None], 
        Tree["a", None], 
        Tree["n", None], 
        Tree[" ", None], 
        Tree["C", None], 
        Tree["o", None], 
        Tree["n", None], 
        Tree["n", None], 
        Tree["o", None], 
        Tree["r", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {0., 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.30151134457776363`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.6030226891555273, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.9045340337332909, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.2060453783110545`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.507556722888818, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.8090680674665818`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.1105794120443453`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.412090756622109, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.7136021011998728`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          3.015113445777636, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {1.507556722888818, 0.30151134457776363}], 
         InsetBox[
          FrameBox["\<\"A\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"m\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.30151134457776363, 0.}], InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.6030226891555273, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9045340337332909, 0.}], InsetBox[
          FrameBox["\<\" \"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.2060453783110545, 0.}], InsetBox[
          FrameBox["\<\"C\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.507556722888818, 0.}], InsetBox[
          FrameBox["\<\"o\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.8090680674665818, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.1105794120443453, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.412090756622109, 0.}], InsetBox[
          FrameBox["\<\"o\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.7136021011998728, 0.}], InsetBox[
          FrameBox[
           RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}],
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {3.015113445777636, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{371., Automatic}]}]], "Input",
 CellChangeTimes->{{3.835147833628335*^9, 
  3.8351478696137037`*^9}},ExpressionUUID->"570d37d8-6250-4884-a657-\
08328c164718"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 11:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.8351159805470853`*^9, 3.8351159810294857`*^9}, {3.8351477714586043`*^9, 
  3.8351477725865107`*^9}},ExpressionUUID->"efd3a3ae-5db7-4e65-a6f6-\
2049fc19897b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Aman Dewangan\>\"", "]"}], ",", 
   RowBox[{"Characters", "[", "\"\<Aman Connor\>\"", "]"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.835115515773597*^9, 3.835115597453291*^9},
 CellLabel->"In[49]:=",ExpressionUUID->"ca01f11a-a9ed-42bb-8923-413fe13a595d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ReplacePart", "[", 
    RowBox[{"6", "\[Rule]", "\<\"C\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"7", "\[Rule]", "\<\"o\"\>"}], "]"}], ",", 
   RowBox[{"Delete", "[", "8", "]"}], ",", 
   RowBox[{"Delete", "[", "8", "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"9", "\[Rule]", "\<\"n\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"10", "\[Rule]", "\<\"o\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"11", "\[Rule]", "\<\"r\"\>"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351155164379296`*^9, 3.835115598047934*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"4bee23a9-73ec-4f34-8e4c-44b2fff8c660"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree["A", None], 
        Tree["m", None], 
        Tree["a", None], 
        Tree["n", None], 
        Tree[" ", None], 
        Tree["D", None], 
        Tree["e", None], 
        Tree["w", None], 
        Tree["a", None], 
        Tree["n", None], 
        Tree["g", None], 
        Tree["a", None], 
        Tree["n", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {0., 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.30151134457776363`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.6030226891555273, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.9045340337332909, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.2060453783110545`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.507556722888818, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.8090680674665818`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.1105794120443453`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.412090756622109, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.7136021011998728`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          3.015113445777636, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {1.507556722888818, 0.30151134457776363}], 
         InsetBox[
          FrameBox["\<\"A\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"m\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.30151134457776363, 0.}], InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.6030226891555273, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9045340337332909, 0.}], InsetBox[
          FrameBox["\<\" \"\>",
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.2060453783110545, 0.}], InsetBox[
          FrameBox["\<\"D\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.507556722888818, 0.}], InsetBox[
          FrameBox["\<\"e\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.8090680674665818, 0.}], InsetBox[
          FrameBox["\<\"w\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.1105794120443453, 0.}], InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.412090756622109, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.7136021011998728, 0.}], InsetBox[
          FrameBox[
           RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}],
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {3.015113445777636, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{356., Automatic}], "            ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[List, {
        Tree["A", None], 
        Tree["m", None], 
        Tree["a", None], 
        Tree["n", None], 
        Tree[" ", None], 
        Tree["C", None], 
        Tree["o", None], 
        Tree["n", None], 
        Tree["n", None], 
        Tree["o", None], 
        Tree["r", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {0., 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.30151134457776363`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.6030226891555273, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          0.9045340337332909, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.2060453783110545`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.507556722888818, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          1.8090680674665818`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.1105794120443453`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.412090756622109, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          2.7136021011998728`, 0.}}], 
         LineBox[{{1.507556722888818, 0.30151134457776363`}, {
          3.015113445777636, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {1.507556722888818, 0.30151134457776363}], 
         InsetBox[
          FrameBox["\<\"A\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"m\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.30151134457776363, 0.}], InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.6030226891555273, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9045340337332909, 0.}], InsetBox[
          FrameBox["\<\" \"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.2060453783110545, 0.}], InsetBox[
          FrameBox["\<\"C\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.507556722888818, 0.}], InsetBox[
          FrameBox["\<\"o\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.8090680674665818, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.1105794120443453, 0.}], InsetBox[
          FrameBox["\<\"n\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.412090756622109, 0.}], InsetBox[
          FrameBox["\<\"o\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2.7136021011998728, 0.}], InsetBox[
          FrameBox[
           RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}],
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {3.015113445777636, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{323., Automatic}]}]], "Input",
 CellChangeTimes->{{3.8351479463476443`*^9, 
  3.8351479492592597`*^9}},ExpressionUUID->"9ac9a5b4-9057-4ea9-a9f2-\
10c8addd8e0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 12:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, {
  3.8351159848842115`*^9, 3.835115985469246*^9}, {3.835147775226245*^9, 
  3.8351477762100244`*^9}},ExpressionUUID->"3cca376b-3cd9-45ef-b88e-\
441a82ae4e62"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"MoleculePlot3D", "[", 
    TemplateBox[{"\"methane\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Chemical\"", ",", "\"Methane\""}], "]"}], 
      "\"Entity[\\\"Chemical\\\", \\\"Methane\\\"]\"", "\"chemical\""},
     "Entity"], "]"}], ",", 
   RowBox[{"GeoGraphics", "[", 
    TemplateBox[{"\"Raipur\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"City\"", ",", 
          RowBox[{"{", 
            RowBox[{"\"Raipur\"", ",", "\"Chhattisgarh\"", ",", "\"India\""}],
             "}"}]}], "]"}], 
      "\"Entity[\\\"City\\\", {\\\"Raipur\\\", \\\"Chhattisgarh\\\", \
\\\"India\\\"}]\"", "\"city\""},
     "Entity"], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.835115515773597*^9, 3.8351155571500607`*^9, {3.8351155949293227`*^9, 
   3.835115609271203*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"218a7b5b-2db8-4390-b7ad-c9d72af24707"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Replace", "[", 
     RowBox[{"_", "\[Rule]", "GeoGraphics"}], "]"}], "}"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", 
     GraphicsBox[{{
        TagBox[
         {Texture[
           GraphicsBox[
            TagBox[
             RasterBox[CompressedData["
1:eJzsvetzW2W6L7hrTtXUfJx/Yf6Jqanz7VTtqlNT+8PM7F3zYVdNNQcGaGjo
3g3ddLOhDwN0sy+huzfdQLgkQELCJTgJ5OJAHFuWLMm2rrZkSbYsWY4lWdHN
wnISCEHdzO/VI79+vW5auq2LvFK/qJaXlpbetSQ9v+f+/C8P/dPfP/o//M3f
/M0v/ic8/P2Dv/4vTz/94D//w/+MP/7vn/3i8R//7JGH//ef/fKRHz/y9P/2
0H/Czv8Rx/4n9h/brXvbDgyAe3bm7u6m6csYIjxu193mOFzR9lYyGfd3PWwy
XvSmi6avFrh/O9twP3Db9//WXA+YvpgxwN5OLpNObqynBjxPJr2cTkVNvxwH
VobLNWP6GoaISGg+GQ+Zvoxh4crFM12PORsohHKWIAKg6noQRAA6uPd10vTF
2B3bhXUQQS67OuB5mrWsz+cx/XIcWBke9+zYWARjxgJAPreSz0Q0DshVCh/M
F6p185dKKM8+BiJgKHlNX4zdAVsARNCoZAY/FYgA9oXpV+TAsggH/bVS2vRl
DIi7zc1gwD9mLEDIpsMaz07Gi4Dpi+SoeJ8iImhkzpu+GFsD6hlYABjK2RLx
0OZG3PSLcmBZpFORjfWY6csYBGCBwII3ndISmPYFrk6NCwq1bZgDeDR9kRyV
xReICKqxN01fjK0xLL8QoV5KLy44NpoDVcAcgFFg+jL6xnizQKttEfg8k4pP
XYoWLBIm5qhEjhERYMP0xdgaoAAQAehgWCdcXgosRRdNvy4HloV7dmanmjV9
GX0ALODzebLr4xyXVEscmk5ayylEgCFARFAO/Nb0xdga5BcabvwORAA6MP3S
HFgTMApsGjKOLy1qu9DHFWCBiXDBglmy9dSHHSKYf870xdgXjUpmKImjcjhc
4EADmxtx2zmIIAZZEYT1hOGwUM0n5VfXaLIAMVgAG6avUI5G5jwRQcn7S9MX
Y18M3S8kAlyQGMe0CgdDge0sgnxuBRaB6csYEaATTl6VJt5kSsWzgQKIwJos
AOzmLndiBN6nTF+MfUGJo83GzRGdPxT0OyVmDsYDwcA4JL6qweeZ5OYAxH4o
x6wAsED0puXiAiJ2Nz53iGBAQP4PMXFUEdD6Fhe8mfSy6RfrwMEggJD0uF2m
L2NE2N5KNqvMLZCrMP3/g/nCpWgB5oDpC+sKnjXkBIv7BiWObuUSI30XcIHP
53GKCxzYGulUbFxTRuvl1XRyHhtQ/kEBsAJsQQGEkvtJp6BsQAyxoFgb4AL3
7NhqUw6OAqDMGPBLMQUUGqjWWbHY6QVr1Yt1Rc31gNNraBAMt6C4K0AEtgsO
OnBAGOMmWuHADDmFLkVZE6FcpWD6kvTjdsnbKSt2PWj6YmyK4RYUd4XTg8iB
fZHPrYxlW6F8JkLlYyt55hSyTk9RnaglTjq5owMCFLCxnqoblQURCvrH1bJ2
MPYAC4ALTF/GcHG3uUlOoUZzm3JETV9SryjPP+c0GhoQoygo1sDyUmA730PZ
muNHcmAdBANjqMaABZp1dlHedPH0gkXrxbRxy/UIEcFeYdr0xdgRMARGVFCs
hkx6WX8SKX50teIqYPqNcuCg1e4sMWYWQTWfpCuq1rfBArZzCrUOjyfDtunr
sSNGWlCsCFBPSHdLASICw9xWDhxoo1nLetwubaPAXhr13s4GbVDVmOnrSSfn
r1z6pCdc+Pj4+eM/Jug5nlJkHYgYdUGxIlwuXebb7q01Mgfw6zP9RjlwQMAX
0jc3q9Fo6IN5y7VoVgMviMCCseyVvPnLhqD+8TNPPvziz0cEnBxvYfplWgo0
odiwxFGOpeiidpjg7u5ms7pOLAA4YQIHlkI+t+LzeRS5gJLwp5PmS9SumPdd
395iv32aMgOLwPQltdpEAHH9o7eeGRFwcocIJDA4cZRjK5fQ7kEnyn+HBRxY
ENn1ZGDBq8gF2Fkrpevl1TsN66ZJN+sZ7iGhwgGLtBJyiMB4GFZQLAHVF6dT
0XopLZfz2OPEBRxYH+lUOBjw0zYkv0gK3Ji1rFeTasda7YgGWMA6cycdIjAY
BhcUy989ux4LBf0u1/TighcGwnY+hZ0AKICIwMoKlQMHrXZZQSQ0z3PbOBfQ
n/gCGzmzIFdhOT/eNAPUe/ypFrbOZyJ8myrITi9Ywi/UkhHBZ4vXbu1Wnzrz
CrZfOP+n2l4D27+/ehIbPz39MhPsJ57D9ptTZ+lgbOPCX/niOP589ORvQhvx
xp2mLx1+6J1nHSJQxHZhHRbBqBvN6QFkPqwD0AHMBADUAHjcsz6fB0zhmAYO
rIz40iLsgmo+yfOcIf+NzHmGJj+dZPn/pNhLcCnK2KFaPzg+nZznTiEwxUSY
HWadIjIJEVyPe3/44Yelmylsv3TxdWyDCCD2aYOkPbbfc09A+GMDT0H4gzvw
1OXIDFjgtS9PfXv/3um5iw4RKML4xNGugB3NQwOQ/xRKACn0VIDmwIHBiIYX
gI47qG3PGuYUomwfPaCZMrBQrl+7SK/lLGCRfCGCnAjut76HhIc8lxDBc+f+
8Ph7L+BPIgIcDBsBvAD9H0YB/sQjtrGRKKyDHRwikIP7hSwVioUqxV2XfJ0s
W8/nATLp5ex6DOwAXgBNwB63rAPWwVFDYMEL0wAsQNluxniEYAiIoh6kAM0f
4p0/Rm8WuainttIT0/PYDyMCB+NP2m+RfCGCnAiYy2sjXttrkM7PiUD8R0QA
QPLjzxOuc9iGXYCXYwMvXy/lHCKQw/iCYp1QIyYsGCwAwEZYXgqEgn6ACMIZ
cODAXEDeQvLjq5hNh7FhvC0ASa4R6oW2TzL/rSuLJ1yrEkvBau2mFYkAqv63
9+9BmItEAF741cfHXjj/J5EIAO442m6UORHAKHCIQA4L+oX6w95ObnHB6/iO
HBgDqNO8CQO0bu5dIa+Lb27WmBGWlPnPWUBPLfNMbOPNz73yCIIYPrACFIkA
G6fnLpLyrxYj+P3Vk0s3Uw+98ywZDi9dfB1/Lm+t4hjOCA4RSEB+IYMLikcE
cIF71uW0tnYwakD8kmoNLVoSnyUfe6OS8bhdBviFaIikfhaoFVdnpi7hSNgR
eAlejg3rxAVEqBHBf3v719jQIAJYDY07zVu71bvffQP9H8eDGr7/Swuf2v3W
98+d+4NDBBLg62pi4ugoAIvA454dv7aQDiwFiU9eEoqlY5LxUDoVG+kyeOa/
dvI/+CifiUD+T149vxRWroO2ICRE8KuPj0G3p21KHH34xHOQ+bRBBIFtIoUn
Pnjx7emPX/vyFE8Whfw/4TqHkzh1BHKMjV9IBLhgccFr+jIcjCUypSJEvRh4
lYDHW/caW6MebU8DhdVyPrPp8LzverOegeS3YyWOU1BmGMgcGD/9eVizz8JB
v9P42gEB6jf3CGlA7NsZWPCO9MfF+YibA/XyKt4Rkh8sAJh+0waBQwTGoNm4
OWZ+IY50KppdH4JVvp1PhlnJ8wxMjORKeCu3slsfN9J0oBMatVpqRBCNLI5O
keB+IdDB9lYSyv/1axdjEb9dPD9d4RCBMdgurOeyq2PmFyJAKXLPurTb2fWE
nWoWLJCIB2FrgBfADqvJiDFpIQ4sAm+6CC6AnNc2CkQiGOk4y9XV+Ovnpt78
3DsxPd8cR/3EaUNtDKjR3Lj2bQAXQI3n+hiVKmPnUEx18MLmRhykAJUPBLFn
Qwesg76RKRXFIiwNIsiuJ4cbL4a2n4z7J6+eB8Ay7/s2rdMsdOjQP5iGD6O5
NPF+T4NsnME01iwoHi7SqSiNwuStwEQM5S2280kyEwCwg+mX7MAwQCYreorE
pm3bW8n40uIQ37RePlSqTMlL1kz+NAy3y/OdafWuB01fjO1AAwgsWFA8RED+
Qz7DLlheCgDghcp+QzACrKFh1X7WSmmPeza5Enb8RUcH1L1fLWuo1f4G8vbU
QwGfJkmgmuJxtQh0opY4SURQ8v7S9MXYDkQEYxkgkAA/xq1cAiywFF10z7oy
a0sS02BYmXWwrTbWYxRcHmM7ywFBLOkVIY4koxLjIb5pwH9D/JMaR1uqQZDx
KM8/17EIYm+avhjbYZwKivUDjAC9HTYCeGFzI84NhOHK7dVkJJOOmn6xDkYK
EIGia0hS2AWtoNczw0qVaP4cPs+k+Gem1KkjyFWOLhfccj1CRHC75FQP9QYo
yRvrKeMHU1oBkPnU1Bp0QKNwKJQwxHzv9tg1xygYc1Ax16UoMwEAKOfedJF3
H+Loo9GERgxLUhrArRLrDBEwGPd2Uw33A2CBmusB0xdjO0ASmjKh2IJYXgqA
DsAL7bzQ6VDQD17YzqcGtJXALPFY0PSrczA6sE7OOtr79EoEbMxxcXX31pri
s/I0UZ68ZLWWccZgN3eZzIHy7GOmL8Z26PiFnB7+be1drEGGXbC5EQc7gBfc
swP1B8AZnMDxGEOn4O3JNUSJqRpxK/l+7h0SYxNHB5XIsQ4RBH5r+mLsBci9
sc8XGgoG9O2ABcAFpl+FA3PRExEUamzcsIaXMhn3y5/l8whACqZfr8HgkeJ6
6kPTF2MvUL6QFSYUjz1iSwsbw+h04cCmuNvcHG7fuaWwRxw3z0FNh84GdHWi
HieUZx8jItgrTJu+GHthXBvNjQIDGgV4ucc960SNjyz2dja6WoU0LFLnCcEC
iq3keNT4qDmIqq4HwQINz4PfNkbVymMs0axlx7XR3OgASS4ZoKwfsAiikWHW
ljqwEaBuBbp1RKeqNJ0zIuvlVbXmRdxBdHSMgvu3szWXkzLUD7Zya45fSD/2
Grk7jRxYYPdW/xlWLGrs9LI+ktBTWcwGssuSTtVwt7m5vaWqxVEGkX77wu7g
zSVuuR4xfTE2AutSvn4U68j6Rm1rhTAIEexUs07U+GiiVkpHwwtDPCE1nVN7
lgqNTy8UxqYTtTZ2Nz7vNJeY/bnpi7ERYA6ACJx8If3gRNDYTg3i6k/Eg06t
8REELEFtxyANkWm1fbY6z7kU1lIqqNj5iKQPVWNvEhFUFl8wfTF2AZkDgFM+
oB+cCIBBWhJRrbHTrfqoIRkP4Ren9uyhpriltE41ft53XeNZ6kd6RNrQQf47
XYZ6BbGAxtfSgRwiEQyY/LOVWwkH/aZfkQMjoVFWDL2iv9boczNXNJ4N5RgR
6A862BoV71NEBI3MedMXYwsU8+vEAkfEeTgsEAXUC0lgcEtqccEbjwWdbFK7
YK+xBUU9n1tJp2LQ7dOpnnuMa1ST1csH8n97K0lTk/Scc/KqltCjDkhHJF7M
iWB343PTF2N94PtMLOB0PNADCGpoa/hV1ktp0Sk0FAGeSUc97lmnysyCwK8D
0j4Smm93F5mBDMcG/iT3DmQ1HoMBP57CHj3aO5Sutj9wa29ng0bj4VWgFZwH
Z8CpcH6YDAAOw/l1KmkzU5c0nqUk0iNCBE41mX7w0MBWTrmNlQMOCHwm/Pf1
tGJicvDogMInsrsZDvodLrAU8AOBWIaUBh1AbmvIZDyFw4gR4kuHZtPjhfiT
y3lIeGKTwIIXwJ5oZLFtWcRwBhjp9HY8Xqx3qUoFZRwUIzgiRMCrye7WtO6J
g9Z+ppATGtDG3o7UYVtc/qjheYiIYOjh9eRK2OlNah1AIENc9+o1JUaAyQBp
z2U+RH06FcZ+PeK9PwVDe0499Zo4IsFiXk12/7aTAKMFHhqAfWr6YiwLmmsv
ohL9E1gA37HRvSmMApqn7MBENJp9soAERobeNIgAl3N05tTcLnmdUcV6AEPV
CQ3ogYQFCvP/1hl4NEoioIRS06/9KGMlX5wOJwZnAYMhmVYpgnccOgpdJsqB
33YaUM8/Z/pirAwnNKATfJD97q210vzznAVKrsdH+r4wCrbzjsvOBBRr21fj
BUUWwJ/N6joe1YZFmg7JtEoRfGia6YscNe7fzlKAgKUM3bxm+nosCyc00Cu+
u52teJ8WWaBeGG1Hpkx62QkZm4JMqehfivnmZuVlXNxPyFJ9mszZAsPBUgq2
RrCYAgRHoQFpLXHS8Qt1hRMa6BX3mquQ/Acs4P2l2qzAISKTjjpEYApw28kW
YHMhS2kxaFvbTxvDU6Ecm0F8NlAAF5i+Zg61GMHR6UQtmgNOTbEanKqBXnHv
68Qt1yOdEkXPQ+XgK8PNF1WDQwSmAPfc456t5FNkC3DJf6jhQ5sITF+qHEth
1U62k/GjMrOStxgCHTj5QopwqgZ6xZ3yPNcuwAL1xAnD3no7n4wtDbM1pYOu
yKSXYQuUN1cgTpvVdT4dGDo/lP9ScatZy9bLqxbsxwUKuH7tohoL8MnF+kcb
2BSiOVBLnDR9PdaEExroCc3CNKUiEws0sheMfPe9Rs5pT20kEvEgbAFiAaof
F+cNQX7SPHqrRYqTcX82HdbIGsWyqenokTIHnBkEanBCAz0BYp+KBcjG3L2p
mowxOrhnZ5zWQ6MG6x2xEgYFLC54K/mU6Pfj/h/IT2/aWkFhkNG87zpYQNtR
CVuGs8BEePwTR7k54EyrV4RTNdATdlY/FFlgr9RlnuCIEA767ft59T2+0xhA
7Y/HgqBa3OTNjbg24Voq/b6aT05ePe/zTGrHKWDC8LjAEWkrwSfRONEBNTih
Af2oRn4vsoCJjUrsGy8mB7vpy5ADAp+SgiD/t3K6modD/p8NWEWdzqbDAf8N
DQqo1lmvacoUJYAOyKk19ii5n+xMookcM30xFoQTGtCP8uJ/52mi5dnH7jXN
lGYQWXZsNMGT7U1fiYi9Ri65EoYJkIgHdzUb8lgQ21tJjRmUVM4wnSzSVGKO
0wvWSm0dKW6X5xuedpc59wP3vnZknRROaEAnvrudLXl/yVmg4n36O7Oty3Qq
YkeL4CDH0hoBDjYaOLLocc+CVS2yJP1o1jOxiD8cUOg3ArsAcv5S9JDwJ2An
7AIrmDCGoTz/HC/zMX0xVoMTGtAJyPxb+3Yl+y7NP2/6klrtNqRbuRXTl9ET
IGn7mKs1Imy1W8YtLnjt2KyDcoEUvUCFGpsswKPAMARgDkDyZ0pHxQskwf3b
WUrwg1HgTB+QwKka0AmxZIx5hIKvmL4kQiIetJ0EkzdrNT7rHmQEY8o9OwND
YKdqv6BhOjk/efW8vFkE5D/3/0yEmfCP3iyOd12ATvCeErfcj5q+GKvBGUOs
B3drYbFkzFI16bGlBdsRwe4t6aTdTnOeIZVjQ8g3q+sglzuNHPl58Ehp/3jE
u1AuEIjAdl4gIJ+J0MACyf6VfCf+CxaALXA01X4NcEXOKSKTwAkN6EGzMC2y
QCP9kelLErGajGxuxE1fRk+oCUPcDmEYzkm53+lgSEQ+Bf0fFICbZkcKaLWr
g6sy3ucUgMejE/ntCbu5yx0WcGbQHAb0JSc00BX1xAmeJoqvkCklY9rYyq0k
V2w2ZU8qqwVeGPzkUPgVWQB2E2WEgg6sE6TuFfO+6+KfjeY2BYKt1tfOUtgT
yv8riy+Yvh7rwAkNdAXrJiokCJlYMqYNmAPpVMT0ZfQKChNQaIDzwlAiBVSe
ILcFwAKxpQWzQhLDuWn1jJgaRMUL1BTiSCX/9IRDjUZdDzpZoyKc0IA2GumP
+JenUyzw9WgnC/SNMRhJQEQwLOGsaA7AEGAl2MNzQJmCWMSfTs7zP8kWGPvW
QANCbDTqTKgX4YQGNAC1X8wRZT2lF140vVhAAza1CESw2O7wVHR5JDoRD8Ic
II+QfZ1CwNzMFfFGUV5oKOcQgRZ4jNjpLCTCCQ1oQGwc0ekjl7ts+qq0sZ1P
xmPBVnt4oumLsQJ4birJTMh/j3u21u4LbV+nEEE0B1r7ROCEBjSwV5h2YsRy
OKEB1TtTC5dnH2NJQW0ioOEyVjYEOHaq2XDQX2zPlvKuOzLhIFiMOwPlHyzA
ywTsawsQ6uVDwXQKEDhEoAFeSnxr4SXTF2MdOKEBRVRjb4ozBUreX9rIlwjh
5p6d2WlugwUcmdASQs+wBUCRdvebHbq0wxXE1DjU+dA1cFAEaslMD1PghAbk
IENAjAjsrNrPkRiNLNquy8TocKeRK2+u8N5xpq9niJB0E4reLFLtgOkLsyxI
wXP8Qhx8DHGjYo+eimvJ+SuXPhkpPn332QvHf8xx7s2ffH7ubckxa4e9stbE
bj3jcc+avgxzQb2jcR8g//Fo08YRGmjWsgH/DXFPtd4JE4ARTF+eBXFvN9Vw
P0DBPtMXYxHYLjQAIfzjZ558+MWfmwgsAMsw/VboQTwWtHsSad/gXYOg/w+r
SYUFUS8rFNzxnhJOHYEct8vzzkhKEbVSmohAe1yRpQAJDFH8o7eeMRFYgF2I
AAIQktD0ZRiPrdyKrVtG6IfixOGVfPHoDBfrFbytRMn9pOmLsQKIBYp5S48F
lMAhgl6RXAln0lHTl2EYKvnU4oI3HPSPsRUgQk2LAwUQFzgtRiXgpWTl+edM
X4zp4DFi01fSExwi6BWUPmT6Mgy4zM2NOO8aZPp6DIPi3BkCpQ85UWMJeMqQ
pdoFmwJeOGC7OhoJEVxb9pxwnaPtt6c/Puu7hA08npq7SDv//fI7N1Z8/Pg3
p87SMcAzH/87Xg48deYV2vPq1ZM4mL92IvAl/iTgVQ+feM6ORNCiQfYWG/44
OLbzydVkBKACYYoFjFkgWA34NJPxECV4zExdUjsMP3MKFjgOIo566kNnSD0H
TSK2UYyYQ0IEd7/75i9//StEOrY9qUCimMEGHpe3VumAT+ev4gDa/uO197FN
T0GqN7+5jSPXi7mv7zYfeufZly68jmdxkm/v38OrcMx2o3xrt4o9/vUIdmLD
pkSwlVsZp4TJvUaOnD8wAXBpYATbzREeEEyRS4dBf8SAGjE+HizIlBwuYODm
QGXpz6YvxlxAkbBdjJhDkQhI/msTwfvu8zgYgp2eevTkb2BK4BE2Ag54/P0X
YBpA8uMpV3Jxo1IgIuDCP7QRB2XYlAiokNb0ZQzxWpz6CAJMg8CC1+N27e1s
qB1DwYKzAcdBtL278bljDnDYMUbMIScCqOuQ5JDnIhFgP+Q2UN3bISKA1QBp
D3nOOYI8RVD1L0dmSNTTyy8Er8NYICKAsYCd4AWc5F8vvW1TIgCgOo6H2wSG
QCa9bPoyLIJ6eRV6XToVls+mFEEOIscoKM0+3jEHIsdMX4y5sGmMmENOBFD1
wQWQ2FyS4xEyHLYAsHQzxV1DJO1FIgA74BhwwfPn/ogj5UQACsABE4EvafvB
d35tUyLIpKNjUFAAQwBEYPoyrINk3A+7HlwAotc4DBQAIpiMH2kiuF2eb3hY
D/mG+4EjPn2Ax4jt22JUkQie+OBF0UekFiMQieCnp1+m+C9kOw7ASW6s+Mg1
hA25a+iE6xwPRtiRCHgzUvuCaiLGvi5APyD/eU1xMOCHXaBxMBkFdvQGDwu8
0VzJ+0vTF2MuKEZsX3OgpUIEFALolQhgCOBP8ixBwh+7egIblyMzMAdgFPBg
MQ4AsLO6t2Nfi2BzI267yZUiKEDshAY4INJrxVWeMoQ/YRTIJ9dz0LSaI1to
fP92lvoLMaPgaDea422FbN1cTp4++tKF12kbMrxr+ij4gj/1wsRrJOR/98Vx
noAKagALPPTOs5L0UewEdzgxAuOxW8/AloEtAC4zfTHWwZ12V20xd5Rxwdys
Wp4wWQRHlggOishmHzN9MSZibCYOOAVl/cHjnrWdUwUUEI0sYuUOBXBA/u/e
WuPDdCavnhefxR6P25VOxeTK3tlA4fTC0U0c4hNmd9Y+Mn0xJmJsJg44RNAf
XC6bFRfDCnDSRCXgQ9ZownKjkvHPXZccAwpIp8Kgg2DAz1sKF9rziY7sFOPd
m9ecrFFuC9i0cEAChwj6g72IACwAW8D0ZVgNEP6cCDKl4nQ4odE9fnsryeoL
GluNZscvdGSbDvEwcTnwW9MXYwp47ZjdQwMcThvq/mAjIoAVsLhwpMN5auAs
gN91KFeciakWkRHwq0/GQ06XCe4XOoJhYij/PEdoPGwBguJgmksXTp178yfi
KJkvzr83orE1Z8+8/8YbbyxFbaav2oUInBxRDRAL3NnvqqrYgJoD+j+EPz73
c/40WMP0xZsFPqf+CI6h4VVj9q0g1o/vbmdLrsf5TEkDOgr6fB57SSro2LGl
BdOXofPebudtH8kaEWAI8KSgvZ2NuZkr8mOqddZ09PRCgVoMXVuIBwN+Ci6Y
vn4T7ljmPDcHjlTTaXw9OAWMjTtIG+XgK5wFGtkLBryj7YhgccFrixLCzY24
ExrQAOx6MgdYiyH/DbmZH715QAET4U5PCaovOGpEcLvkveV+VBg7/iBMA9NX
ZQAkviBb/PAHxx1WNv4Qfdb1xAlj3jQU9G/lEqZfu37YxS9k32IHI4FfupwC
Gs3O9AGiAD6tGEemU+HAgndsnMN6sHvzGnWT4E4hmAamr8oAHClfkIjy7GOd
8aMGTp2j1i5L0cW9HRvMwLJL69EjMkBnECTjfp9nUi7SCzVWJiBaAQd3tV2A
7HG7treOisPt/u0sdwfVXA9UIseOQsqomBd0RHxBHDurH3Kn0N2a0f0TYBRA
wC4vBUy/D9rYa+S0O5JZBJV8yvELaWDed11xGNlKvuMOUisTqJXSyXgoGPCb
fgnGoJY4yQ0B48WC8ZD4gjQyiscS3wm8X4383qxluGddFo8X7FSztujYmU5F
xqA/6ihQzSez6bCiIUCpoTAHtFtM47VUU2D6tRiAIzWJ8sj6gjjKCy9y3v/O
PNPP5bJ6BKpWXLWFpr244HUCBHIshT2Kswaq9W0yBMACejoI4SSwC0y/nFHj
6IyegaHHKQAWwZGKAXHslbw8RmxMppAimrWs9b0u+MLYggjsEtE2DPlMZG7m
ipqlT7aA/nEzEBTaQy3HAwdeAteD93ZTpq9nFJCkhtpu7vwQwWPE5rYW386n
rB8juLu7aX22ssUiFVGsbdfqhZ1hd/W8fu2iYpkAIZTrJAj11D4IFkE6Nc7O
t9vleZ4pRCmjt1yP3Fp4aWftIzxl+vIGhyQccDR9QRz1xAmeEmBuMCiTXrbF
2ETrK9swW2wRyBDhXS9Srg7HRKR4I1lculks1Lb71r3xwmTcX1Wvqms0D5xC
Pb0LRQoUX9KsZ5rVdbvHGUuzPxeJQGQEeoSZAGoouZ8EO9gujiyGA+zeRHpw
3GuuWiFGTFiKLm4XbEDK1m/aYK+5OdD/IfNPzRcg9nPlIowCPIZzxavxgkgN
E2GmsUN7X8kzauDIlNgePGJb4t6vl7uXffVnDhCy6XB8aVHOBZRlauuiM95K
op1M/iirHdgvJRBrCkQUfc+bvmw9OMqpoWooL/53K8SICT6fp9m4afo96Qrr
WwQ2KiUrtpP2IfPV3EHYDyHvTRe5G18bUO8n46yV6OeXL+nJ9ueFY7lKP/MF
fHOzcs2fE4F9gwg8WajhfoDCxHgEO1Qixw6azsmAp75tWLfVOZ8mdjRTQ9XQ
LEzXPI9T4cBu7rK5i4GObf2UIYKViQDyHyyQSUdNX4kegAVgCMyu6VXFIVeh
9kdvMl4gkIEApgAgyclAAAtMTM+/79uEeL8ULeAYtZbR1XqndqzvSfTgmkC7
uaso8ztEYNt2BJD2XLbXEiflB4AUGpnzpdCxkveXJfeTIAvRcVRPfWj6JUjg
hAM0wEm/PP8b0xeznU/ZogeplSt2M+llj3vWUvJnr5HDHQMxLfinAZqMgz/n
/VNfXbtw4tylU19MBeank/H51WSADrtx/XO/97p45LzvOo0PzqbD/rnrk1fP
z0xdwkbAfyMZ96eT89iP7bmZK0thD7cCOGtwU0J0LgHgEWIBkMUgMQgwL7/n
+JNa0kHbZJSULPL2FHbB7fI8F+wlfR0GwAtcmBAKX/5jI2uybskhCQfY10wb
BfjU0ZrrgXtfm9/qJ7O2lLVJAZSlLILdegYyk8YQRyOLVgtehIOqMz13mswc
6JogtNeeJkyzACKhed/cLO4/ZC9tQBvHftYNrC1793aUZwpA84f8p4nzEj8S
6GCQ0cMQ++lUmLiATzewr6gRRbpOFuAoBV6Rh5VvuR8t+p7/+uaXplwOPh0n
HKABSH7If0sVDOKnZBeXHZa6moxA/OK3v9cwpz8S3jcRZ9MnsRhsbOeTVqMA
AtR7tadm11hSkNqzkKjhoJ9kPggOwjbfvuESGYvvDEwAPBsNL+BIHO9xu8AO
ALbZy+dmxUhBox1xAClA/sMogGRQbDrXK+JLi3jHat72k0oqiy8MkkO4V5hW
CyVTllHJ+8tG5rwBtWlHs2tor8DH0ckHcD1i+mJatgoQtNp++I31GMQvJBUJ
H5JXUMuN+b5B7EP/39yIW1P4i5j3Tynfw7Y5kCsrEAGuDjdzccFbyfdTwUTO
Ga6WY1vNlXenbWuwsfXVIXiMYZjIu5IOhWUMw87aR1yM9+3nh5CHCSBGDRRJ
oTT7+OjCyk6nCD3YWf2Q6ojx2LRGU3H8bG09ThECmVw0uAoIsdHNiMcbwRjB
W5hlifSK1aRyhSC08bOBQ1k6uDRQG2wc6P/DTXmCuq5Y+bW3szFEImix/k6d
DtUAeSHwFnZxR0Ascy/BUApLOwHl2cf5aRXoIHRsuFchyQuyEQsbjEb2Au8m
YYUYMQESIDEunVug0PZdzAU2wcvTqQjOAJFItgb5fwjYTq6ErW8IcKjlL4l+
IYomQ2+HSTUKglOr/GK5PW3H/hC7Cth3WkHJ/eTo2goxUsheBr+I9QjcKTGs
txP7BdnFz2wKGumPOAvg/pteOMARCvrr4+LE09+MCAIQB2+sxyAAycUEgwLb
2MOc4fvSHhsEu1gBIpJx5V4EMAeW2uk0uFhQAMyckbIb5LNajzgK7w73vWzH
BTx1xIDRYxD7krAyK0woDeoQ4O4gJy9IG/XECc4CrIWUBTKFCO2ETJfpyxgW
NNo77FSzW7kVCD0cAOlHbhDo/7AC7Cjku6JcXFGzCD6YL6zki5SLa4yBY2Tl
l7244G4tzF36lciQfTUabyrJOFUsWNAJzgJOREAb1cjvRVvMOizQao+ksYtf
6EaSNUDQPkYysIDNMVkJc4U/EQ9ubsRxjI3cO30D5kBNqcnDTrNDBEYOd+CV
XxLQCPuhC23iAtM/Aj3gTqHy7GMGv3U58NtDIYPI8T5O4rCA3ru9P2uAhYFc
j1vHI0QIBf3bfeWHGA/u0NAAF24Q9diA8Ifk360fRY/l9I1Jxf0gU2r4DFMo
Hgsatp5oeAHiQtzDE4dGob3j7fIjSxsYFvjEAWYUmNFTVGxtV3M90GsqkcMC
egCZzzNFmd3nfdpqLABkmZfYHq6hXLlIBVAaZVCQ+e7ZGRgCsAKO+IywySsT
ivvJIsDNxP1JpyKGrUcyWYz7hdTK0AYE3kitPal1cNBeIPBbs9Yg4QL99QsO
C+gBZP6tfaOP2QLz1u0NCKPARlF+kmMaPqJKPkU5MKYv1Vy4Z6+pPUU3MLkS
Hl2qrRyQyRAa3GNDRDAiFiBoBKkNhqSiAVeNX1wxcuagvYCpc2dEfVWnbcJz
hBwW0MC95qoYiykHXzF9SRpYXgrYxTvUavt8JiJFDaPAyBiolaHR++6DdnOJ
aGTRmF7Nta0VjtCiNxpeaO0TwUjfl2wQKwy9oovFSliNw34BBRcRhsWINVD0
PS/GC3ZvqmoRLYcF9AG2FW8V2/A8ZJEmEhqwUaMhPUjEg3bp/zlSaHQZAhG0
jBqszGSgQATlzTh571l3uNEnLeONggG/YfccQl7SB5X/ScL/AFudCjLTzQGO
WwsvSUoMFOlAJwvElxb19CEfV9wpz4ss0Eh/ZPqSusJGiUNdsZqMQL455gBV
Wys+RTMIWoaM+JGwAAHC2Tc3S1xgwK0ILHgN63VDaj/ogEakib4vDSIwZm16
IO9cBzqAKsuLzvhYGW0WEH2AVkY6OX/l0idDx4WPX79w/McHOPtH7ePXkibP
HmVFVcXVzY24rVtMcEQji7YYbW8AYBOp+f9z5eJEhCVfGdDHVZEIAMgT2AXG
RHKhl47UKCBXD3VYkkr74mq9zJ6i5tiHkPNSka+liABoZM7LZ99gkTtrH+m0
BViqxtysxcP0BAjhHz/z5MMv/txEYAFYhrn3gYgAFoHHPWv6hzLghYDLYA6Y
vhKLIBycVauSC+dYfwncMZ/PM/LPRYkIaIRxOhUGjLkbkEuji0rLhb8elCLH
95MJnzLmJvQERTrIp7x6RgwzE8wmc0IhgSGKf/TWMyYCCzCdCFptW6+ST7pc
07Z2p4SDfiMzIa0PjSgJWGAl37EITHENNbZT5DxnvilD9MZsmqUPjSg1rk8i
2E/atHIM8eubX95yPVKa+n84Z20luqSaj9r+Gi4cIpAAFkE6FWXdg7tJhr2d
nNVyTQdpNDeu0PgczwY6ybe4aaN2nqu5hihqHIv4jTEKiHS4x77R3FachtNf
+zVFj5A26oXORJKG58E+5g4YDFhwt5be4wlF2s0oFHuJWBYOEUiwlUtQg83M
2tLuLWb6QZKwsSP5VCa9nIiHQp2GnNPUrB6b1sk4XU1GNjfipi/DUtjOqyZs
fLA/mMyAgjINIoDqmM+tGGYUBBa8sAtIRnnTRdwECReISyWbRfuE4BT8Unho
gFJD7zRyPDtUyxyIX+Btx8z6hugErxrjviwNLsCtsEWMmEMkgte+PHXCdY62
f/XxsdNzF7Hxwvk/nfVdop1PfPAitp868wr9iY1P56/S9oPv/PrNqbN49pmP
/50ffGru4tvTHz/0zrP4818vvY1nCTjy0ZO/sSARQObX2w2BwQLUdRmPAIQ/
KABEAJqoCw056RMHKdABxgthSDBaJHWNw4YBaZD2gt97XXE/5Y4SEew1cqMO
E2gTAR6T8RCVFYwO+K5CYuNduPUBIrgUZXlTUQi5Uo5kvmSpeIn2XBuJwBeP
xJ9gBCIFRXuB+4VMLCjWAz5lDHTA2pbOPq7NBe24j50S0UUiCG3Ef/jhB9AB
tiGrsY2Nzxav/eWvf6UDXph4DdsQ6STnNyoF/pQrudj85vZ6Mfft/XvgAvDC
dqMMYKd/PYIDbqz4cDAOoGPwWisQAb7k+DaS5l/fH/aKDSj5EKrLS4Fm42bX
k0AFopekU4Ym7UPXhUlCY9mpj7SG9ns00S6pUy4I4kUEhJEO2ekUTx12B8kZ
ATpkMOCHAAE1jGLiMH29YxE/SAdfGO/qFliAzIGJcOFsoEDLYO4a2dp2b2kF
PdWI4I7SLSVawVO3S518IfZoRn8hnZAPmgQXlGcf41wgH6PGok52SBbikBNB
ba/x8InntIkAtsDd776p7u3wp6Dn/+6L43gh9uC1OAYbYASYGNjAfhABjqeD
33efp52mE4GC07KUhjyHWOhvMIGRXX1oUrkp980uKBdX1GaTUcc5/mcmHR1R
qlWzuq4RHZD8SRlENG7SPTsDYKNt7sUGL0qibzhODi7gX3jK88/lWFa82joB
telpEHcSVV+/AOQ9P4cyiWwUoGYgiiNmOBdUPU+wKoOFl8RX+eZslnwoIQKY
h1DXL0dmJEQArR5YupkiIvjp6ZdfvXry1NxFTgTkKYKeDzx68jck6mEXgB2w
8fy5P4IIcGYYDp5UAIyAP61gEUBjPJgYW8tCq28PYQ/1nUOClxujljtxYZ13
SU3PlxDB6LxDRAQQ4wCX/NHVdD6nLHLv7BwIHBKzoAaaSo/H/tZAwpm+6jgb
7A6J/sNMY3UWkKyKQ9Hb0wMR7CvVu7nLpn9V5BDHTSoO+gQXVLxPHXRRC7zS
+cRrWXsFCFoyIgAg+b//SwtcIBIBBDiAZ7lrCJATwafzVyHt/3jtfRgI9JQi
EeA3eGu3CjYxnQgIVEGwvBTwuGcHzPuFPGEnGb2ivmhglah9oWYOtGREAOof
UQkJtwgoKEzyfzKaU9PA5e6U2r7TUuxZqh/kw2/t9/nJZ9iwaYn0ZiJdkwiU
J2wqxX91rgpSlBcUD30k5RA+tVpWz8RhcZgOz4DFzYyErOvpUoScCP7b278u
1Lbvt77XjhFIiID8RdhIFDM4CQwKPPX4+y+AFLABmS+6hnAkdsJqsAIRwAqA
UIUQGFaXoZ1qFhb9SIO2+LmNRwX0qKE2oRLIlIoiEbRGVl8scQ3BKADUzAFF
IuCgKoCu70iaP0W+uNIOacZWUlwFH4FQpAIcXKNJBHQ2EWrJojpvy+2Sl7du
MP17IoE4dLj7hZTnxfHHuxufg3kNKFEcLuREgI2XLr7+Q/uffiLYbpRBASdc
56D2TwS+hOTHU9eWPUs3U1C9KFh897tvLgSvA+RieunC6+YSQb2UhjgNBf0D
WgFy4IsEZhld8HHRPhWL5mLeP6X21NLNTn+JUd9VjRiBPGQAVPPJxnZK0RWj
s/RMoY2DgCqrmpxReKrb8iTvonZ+nbdlZ+0jaxYUi0OHdb5krzDNuaA8+1g0
ODfqBLChQyQCyHyAbycK65Q+BLlNO5/5+N8h7Z8/90f6E9q++BS2QQeXIzMP
vvNreuFGpcCPh/6PbWB5a5VMBhNjBHs7uaXoYtufP6oSgO089K7ZUdSr1tr8
ZeTtsi/UckcB7zrrLyHuIVMuEQ8Ol8HlFoH4Z72QwAHA7q2OKIaxACmkNlMs
nQqzptmltP58Tg7YAmRTgAiwDUGn3zUkD15wh1V/RFCJHLNg4qiYJtrTCxuZ
83Q5Gc+rgRlpEpH1cdQKyiCZE/GQe9a1lRv5uOTNjTi4ZuhcEGYjNZ00UV24
cf1ztaeuxhXGfeLD2liPgcHpJoMUsLGVWxnkQ+QSvqvLBQIcwpZ4QU3OszyW
dDgSmocwx7cLUh2UIQkckPcemj+eAnHEIn4xBym+tOibm11djU9Gc/qDxRxi
+hBzN8msDyoc0C49AHgDn90N1c/ISGgkCOkENSwFCxR9z1eW/mz6FfWEI0UE
NIwynYoa1k0ok44ON7eHRJOR3xD7olZe1ZhNdmq/mkwRlXwK95kG1sRjwUEG
vbGc+Z0MpwPKHeJ2gdz3rh8gDoh6CHaP2wXZTqSQTsWwbPzJmGJuFpSB/eAO
Vra2L6vb1QphMUDQ2E7pJAKYMBIJr+qGUk9mqMbetFRBcdcEIZ3A5czNXKl6
nrBFxwwRR4QIKC90eSlgfEM5iO5hdYR2WKAnFLJhtbKOTEnqF9IG9XS1bFzG
my5CvfcvJ7zByPWF5XP+tGclp9H5B9zBaso4C+jwC4lEQGfGI8W1m3XVN6Jj
JMRxbzdF+UIWaTQHPtWTIKQH5ZshEAHnOAtmQ6lh7NtQ49sICjB3GDGIADJ8
wJNAI3VYoCdouHQmIkWNWc+K2M4b10xSLjy1EcqxDKjpZBGMQI/Rm0W19M5a
u5QAloL+6IAIZjvw6EBb59d4IxHM8dUmDj4X2Ar5QjrTRHUCNzbl+0ScZWP6
BepdufZgmotnzgvzZT5999lRTLEZ0WAafMMh/6HI9VcjPFwM2B06trTgDJoZ
FlbyvZkDHCNt5s9BrX4UXUblUgGCi+IIYpYpDJyzgUJBRm1qUeNOKUEprT80
IMYIRIW/tZ+tqhM8qNrwPLhXmDb3m9BTmqgeeNwufHwl95OcC4q+5829xsEB
C85Gc+dFQA8cdVJQH8B6+utK54wb6w9qkwi+WCpCcvZxQogLPWn8A0JOBO0Q
w1o1n4TaH11Nk39Go9xAhFr6ECsl6JECCCK5EC1qZBDJwUVKef45c78enAX0
p4lqA7TIywfEWTba3aotjru1MP/IbDF3noP6xVlwBj1Nwuo14QcUAHPA9MXb
EWq5o1CeNcLEGoDEM2yoJUQ9bUP+cyEMFmA5n+qdfySQhgna4QBwCk6OC1Fs
fNcVtKpmPRMOzEx8evrKxTMANvTgk1P/cf74jwnshd0cBemRTbDto1igK/K5
Fa4niHEQVmJQsmW+9+1Dc+cftMXc+dZ+gRhg2XkQ1ICiottOAQv0naziIDCv
4HmgpqO9Bgg4xBG0iiNdBgfvAg2dX811Aznc9Twr+WIoV2RcUEpTkqcYDsCF
ZNPh/oiAMOrwolroENdOnbH7vsN9FwtoI50Kiy4mscrMIslRvX0Pa2GRy6zZ
D0oCAwrEhrZU3c2IwkG/wwKDQNERRy2G+iYCUDN1AYUgwnn6czF1Rddi5N1b
XXq7gaRg+NCsAX5OkQgCC14YBdHgXD4T6YkI+PuOOuGQkgmpYTV/03r5wMDp
gwsGLxbQ893gqCVOcgdRI3N+FF+V0YFHOkAHpkdzuuLu7mY6FXXPumw0mYsq
WNW4gGqaQGrOAPpRgIggV+5TgOOXTt0DqnWWtDk6o4Blaarn9vdafUCOfUhU
7miKhObjS4sAVZnppwOqFwMmPj09ciK4eEYi8yXhiV5vwlCKBZRP3tiiSLFk
P3et2CiDqNV2CnX4y/2A9f1aW7kEtOtBukabBcXGdJV8CkoFdTlwBo0NCLUG
1ANaBAA+ICiTLHU/PhJzQAKWpd+Xa0iCTobPTudssYgfLFBrt7xIxkOsJM3n
YVVmehKH2o4mA4gAbyFGN8Qq5j4uf4hponKAWBW7gohGwb2vbdMQgC/bsqMi
CPhYqV/c3s6oGruN/FaX0sQFbaMmgm2nd8Sw4PdeV6spJiLoL1hMgNgE2KSA
JjMKqJfCSMdRyUeGDZLFSmcgc0A8J1iATeuem+1KB1RBJiGCzxav3dqtUgvi
F87/qbbX+Onpl1/78hQ2nvjgRex89ORvsE1Nxi5HZrCdqxReusg6Tz7+3guh
jXjjTtOXDtNkWykR9NvRqPOh9xIa1hmIFwE7UWMAAY8UiMNrLA5OBKYnd6kB
YnN5KWCLcIAIyl2XuJSJC2DUrCYjtjNqrImt3Eo4OFsrqwoKyRiCPgAhjE+N
CcPDOZO8x87QL0oyRLixrfXN12hSRE9RAAIsAKOAxiWLyKbDAdaV3QWyU0sr
UrQIrse9P/zwA7UvfuWL49gGKdB8K5o8AmmP7ROuc/QsdbMEd3BeAGvcb33/
nnuiOxH0UhnUU2iYV0nop1rcVdwujYgDL6CzUch4rzBtZY8WNQuyYGqoNihT
BQjnpETgcrFWYKNrWH10kIzPgwK68ulOO4ra31uQLCX6Flv3iICQHMXV3dlh
I4xBAdoJMyJliO4jHn3GAZSJlIz7QQRqYxHymUho0UvdiqB0gRoA7IkG52jk
MXD6gxMSIqAhJpDnEiL41cfHwAL4k4gAB4MaYCCANXLt2eV4hC2AjURhnaik
q0Wgs4xCPm5Y+/Pt4y3obmgccG83xY0Cu9QU8LFBDfcDWL/p6+Gol9L4Qi5F
F+2oOUP4nJovnDqsiFbyKXIN6W9Y3XcC/BgD983r/tLvva4/qnKqX4uACwrK
vWSBVyUZpRHJNWCgOcl8ag1HUh3bcudSZ3KxpguIDdDJRABcLA1TpnnKsCai
4YUT774lIYL1Ug5KPnT73189KRKB+I+IAIDkx59vT3+MbbwEL/9ReyQKdb/v
SgRds4b6SxDiVdI6w/E4s2KMWAIeMraRUcAHiVok34mXCVuhU8SwQMJ/d19n
28qt4AK17YIbSdZP5oslIwKUdkEsNHv5i0/KReXW/WoAn/YRLMb3kAcrqeEn
NYI+1MazuFrMr6/ktT4jGkM80tvCnFTt2QEaQp4Hi3sFy2VqX6ncNQQigPD/
9v49bIhEAAMBRgGNu+JEAIAFvv9LC4fd2q0SEYBHlrdWdRJBS/B3STBIN1Hy
DumkbBhKkpRRRexufM5DxtZPwiHwgRGVxRcMeDv8vtR+lXZMDdUDYgGJ2MdO
GAhbKuNIWm3x9UHbrKjVB3Jxjw0g//swD/GSU/2mj4IIRPlAYQKIgkhonlsH
EPIjyintG3JzoNauI9CZIyQB8yypEwFFjUn5V4sRwF6AwH/onWfJg/TC+T9B
+NOIq+1GmRhBDxFQzLpTHyGEjwdPENL5qnxuRX8fQl6cVXI/afpXQg8MDhOE
c8XTC1LJhl+rfVNDtaHhCAI1LC54Y0sLis8SEQyY+jgG8Lq/DMxP9/et2Gky
w0p7EkEfgDRg2nW/+e2jg0ZhWt8tJroSAQ091yAC7L9zZw9WwN3vviFHELmS
aFT6c+f+oJMIFD1FQ+8gpAaKEes3N0qhY7xK1xbtqQ0OE5yPFCT52Nn1mMs1
bevUUDXoCQekUxEcI/d4cyIw/SrMAu5bJh3VGcKTAOwJlQP38Gp8+CYVpBCM
glbbJzOiYHF/UCMCUAAbW9w7C9TaAytZr6HquoQIyPlD2xD1kO0Pn3gOFIAN
ygjFI7Ypv/SJD158e/rj1748xZNFIf/BETjJoYKydouJToBbCMfDFsCjpJMS
/uQJQqNmgZZ64YAaIFd5yLgUeMX074Ye8OJiA8IEIALveocIqDoAGDMrgEBF
ZHoShKDVgAskzTNPtVmg74wX+2K3npn3T6m1EiXXIoQ8/xa12pr/0k22B2If
dwy3Dhsr+eKIvGr4vGAUyLtAm4u2/FSeksnaUM/N9kkE+19gY1pM0HtxmS+G
VyRJPtwdNNwOQoroySnEITZtMP3roQdGhgm8wdBSdLFeStulWVDfyKSX9XeN
gHyLRhZFTvxiiQWLtQORYwZcezg46569JmdPcvJwK4kwESmCESDz+Z/ggly5
OGq9Ym9nY9bt9q4OuWvB4KtSa1LRHxHgbIDBvYZahwW+6L0X94+ug5Dije3J
KcRxu+S1V+shPjyi4n1q1O9Fs2PwOGYRYTlgESyqlx8qYiu3wlLW2+XGkG+z
a0eFBSC6YyFmEynKcKoFIFX/AyXgXhkQSZlOHnSZSMZD6ZTlyluG6xo6dOZa
9srFM4ZZBGoABVTzyYMEodEHaPAuYAE9mUKKsFfroVriJLmzRl1fDOHfq2y0
L6jvaK+v2q0zd1k8FtzbsZbCObq75PdehyGgcQxU/VPtoDkYATq/hAWWbhpE
lzQXkrahiGo0GTALaq6hPoLF1cPNTyhYbEobahGj7iAkAucPBvyR0PxA/T2E
1kPW7zjBfVk7ax+N6C1omjwMgWbjpunXaxggz9XGqWtjNclmCx6FTnSxpQXt
QTyQ85D24qxJGErcNOhvBuVQANFqQL1YT9AQ7FBreyICGpRDoME0S2GPznk0
wKfHn6Z5NJ+9/7L+Cbbag2n6GzTZ32cECwh3bChGH88jtXgq6UHWkOfBbxu9
leroAacAy46PGR1q7dE5fb+2HUFeNv0qRo3JKxMaz5JHSB4rIQPBxGVHwwu9
NkMbNTQEO36DvU4iqLXnINDcTB410Jnbyfvt1FMfDn5dYtVwTwlCVG0tRjp0
3Ub203MNKwZ9u+Tl6UNW9hGNro7gKFNAa1+SDxIKoQhyOOgfy6wqjlhINcMW
0n7oVQDDAtTFYc1AHwokreokoHkEvRKBjBfWdE4rLvqeH1aznb5ZABCj5/o9
PPKJMwMCCrY41NiadsEoUoa2cokjQgFiyepuPbOxHgOgxifiQZ2DyboCVKIx
12YMABZQax/qXS9ORCwaMRdH1vaEvcYWPs2hu5W0iQDmQN81ZSKoaXNnfr06
KRQXOlKlHPjtIBcl9o7oVZhIJjtUdbd8H4XT7/7tLB8Kb822/7fcj9LahjKk
kgqEl6KLY08BhBtJlqwIWQ3iw4UvRCLh2DKIAHQwRDV+p5rFyY/g8ALc3qtx
i1ZSQGmEjt3HCyHcDGherWgUdO07p9Nf1Gr3R60XEryNs5QIImcGl3hiaLhX
eaJ4N/SMHqAikVF8YcAFol1gqdgx65jqfoBKHgasg4YwPFIUQJj2LvARY5D8
H8yPKudT/+xjO2Irt6LYdumLpUOFY5YCPguqL7YIuhIBJZH2ESnQNhAUiWA7
NdmxCGYfU1uwOICMl49xiuTDZforGVNLoOr6Qlh5PVUQ9wTI20Ox49Ax0782
BF5BoPF5aQPSj6YGLC8Fxq9HRFdItPS+Z+Pqgf5SZTtCccTYRKRoWHZor4Bi
75vrOT14JCvZ2YDcY3OKu8ltWATR4NzwiYAmS1bXeSOIUtrNI49YGAeN8ukM
elBxK9XLq7x3RK85QgTWXFrTtaUI0mDxmQ59wLGIu7WwGDsuuZ80uBPRt40V
rAHIhK5UVydpZ3n+uU6AINIzNzUbNxPxECgAj0cqKdRE6J9lYDsoVpPdSBZN
TBDtimDAP9yoYh/go2fkoGwZMWAKowC6xBCNAhqdA1AZMkDUACFD4q7qelB/
HzlJ1XDffYQU+69yUMtuOaKRRZrdOeqP7HZ5XuQC3CKIZcO+MMXImY3ZP69M
vZE7818Lp/9zfuFESyh866lpNn6wRAG2mx1mLoq17cH1W4pHjB8X4IrkF7WS
H37v0CECOqQBckPPlGTFmmIe2BWfTcZDgQXvEI0CCco3Q5Ev34acqXifIp9z
fywA+Q8Log+/UFcXmQYX4Oa4XDMGOLfBBaKPiPnnRza2ABZHPXOjFL8AmQ8K
IMQ/ebh46n8FIhee50aK/p5InAIy6eXxk0V2QToVCQf9pi9j6FDMHZqIFK3c
agNGwUgDNxIJD12XcvvlvMD9IaSZS0Zuid4Sj9s13EgBAeeMuU5Frv4pPXsC
6IMIJEGBZi2rc+ikCDX7SHIblb+BxVWwpDFJepDPvJK3wwXlkYSc9kohLv8J
EP7EAmuf/GMt5+Xlz3paDBEFUImTQwGmIx4LAqYvY7jIpKPypqO5sqWNgmhk
cXSxxZZ6+yDF0YrkCGKjW7ZT8rR57jBJp8IwKodIAZXNcMr3CacAANvkbWBE
gGN0sIB86Hx/RKBzzYpGAT7K+BL7QA1L2C4FXiEJXPU8MSK7QEIEkc9fLpz+
z2CBrQ//S+zL10EERNldiz5ocBijgLUlhwKsAxgFMA1MX8ZwceP65/KdV+Nm
tpLgkCjh7RDtGgvfj7L1mUS/5W4i7TENNMJYslOMJtMU5qGwQCZ0BWI/Of0O
UQBkS/Srd2AdEBFAuIEmejUHIIT3Glt9EAHEu85lK5YVMPuu3fIUXAC7SaeP
aEDKgBnlcs2sTL1B7R2GnlYKUQ/5v+45DgqIf/IwsQAeI5f/HfvrmRu8s4Ra
qAIfBDmCQAQOBVgN+ESg141ZE1fFYWQredZuyFyjgEnRdn6jWEVF7Z3ZyOB2
Mswo3lckAuj5g5yKTdVsA+dMxkPAgBSQjc2AAiDBiAKwgT+3Ei66OZwIyjdD
vQaIeZigVyLQDhNLIGd2MeJDjSa6fqw0uYzNs56bjYTmKftUf8EgXoLXggsO
Zhy3w8d7helhfYUg6iHwly/8muR/JzTw+ctkIFST5/ibyl+7nU+Fgn7ImexQ
C6McDBf4aMas0AxXpNim72zAzNEMktlYB+IrHWaBV2HP0N9azIfXUw+lDb7O
aHgBIkuPO10R+ZQXaj+Uf6IAmAOgAJgGYllBf0SAWw1bQCwl008EesLEGq4h
Fvr3ecQ9ePdopEvNIF4FSd7ar7YGC6RTYdxe8AJjB58HZ0inYttbSbFKotVW
s2FOAmR3VGNviqlEVIs3lMzS6uokPiBOAdgA1j75R7IIyDclbz2NpdK8gDEe
GTNO2K1n8F0aSp9Sxbwd46HYjNTEPFLKeJfYAh2LIMd8LCMlAvICsQx8pQBx
TxALuMBfzDWEK+qRAiqbYTEiTOGAlO8T5v85XF+m3zWk2FmatxjSnzWk0YVb
AjXbimhdskc7QxgrxA9Q7VkyJHEMaDcY8JPkxwalJ0kKEu99nRTbUHQ8Ra5H
wBGDMEIpfgGfEbEAhQZgDuTO/FdsJL56lSeOiqNzKB1uK6ccUncggUXcMtTd
bvBCM/oV45EYgeWZtEWfwexQLq7IbRyYAyY2HeKquMQ0qOaTbOBLe9v6BfXi
yvEzZx4MLFtlqJkiBcgjwiAFogCCOGtYDxFcihZW1jNq9QLkGtJJBD2ZA2qU
ShR56KNv96MGaaq9b3xpUWJHdF0nviogFzVLh0+HkTPCreXXe2KEvVKoGDkD
aQ/bjYcGGBFceH75wq+xjU+n6Hs+43l1ZeoNcBOMF1w+rhcY1yYGQ8d2Yb2P
uTOjWkw+OXhxgdqv1fjL8XuvS/ZQ7pDp97m1n9XPWLJ9c4gIIC6sNpuArxZi
p1TcgjiFXOWfKZYNWaTfNaQcEU5J6xFEolQkAqyBycD2NpY0ES5olA9Tlwmd
BWVq6VVyNOtalC03CnAPobpDjcdiwJ4A+XnoWXL+DPdTY5mlsz+X0wFnhMrS
n7syQnV1kqIAIAJ8cKuXOjGCtU/+ER/NzrW/pxMSC2RjM6QYWPabbE3ga+Ce
dVmqpcbGekwcedwH1IjA+KYWgfnp3cO/VivEiyUgRoAcwG/H9MWogc3bXcnh
1s3ENgDRkGFCW4fY3Eq45BFhyA3Fg7taBGcDhej6oRZDwyICXNQgTiEOuVFA
gPBPp2LpVBiaM6wAHEMBYjyCCEZhD7JJMYmT5dnH1BgBd1h73AN9XvTBrXuO
g1zk52HOqNHUL4w9mo2bsAXq1jOdVpORSFhr2ldXfNPMAVB3JQ3BsNPQO1zL
fnXtkrgnlGNEgEfTb7IEkUho6EZTrYbv2BDOc/+bAtYWXM16ExuJTIalZXZC
G6xL/O6tLgGC7XVfZOpk7Ms/dyLCM++GrvxxPXSlshlTFbPVjkVQKa5U20mJ
1cMFZXwNhI2NztCxu3t5+fr3iaD7D01PnyXCt3vdc33lRoHG+8IYX0+Fw0H/
zMw0e2EprXgtA36OleSn5dmfKDICJfyUAq/c+1paz7IRm8YHV/C9XJ97Qs4j
xZmfNPNTw13q0QG+SH6fx7KJOrGlwBALzTqkMHCySh/4cvIL8c9chQ2mhD5p
MCV1BSRVIj7kRjGL2SLQ9TDIB+0DIJEUTbyNdrKTRnSgkgslPGcjk3/m4QBQ
QCZ4EV9+7fzMAyLY8JHUKk0/rCdMrLj+rkSAC6SboDNMzA4rrnYV1JV8SmMg
Nd4RZ+BvLQIM6/XM4OUjKi3Rwwg4gI6srryLm6/GGnoI0YEGNrPxeNTSllQw
4F+3f6FZubhSLx+y4sko8KWtZRRAIOC3P1wlcK1YLNS6HMO0/bajAzIHP2pF
UmiXvKUJPOUJ1gGsGHyHFUU6tP2kbwJiH/r/fjjgzzHXh1yy4Uqpj6gij3Ai
KK1+RWIHaqdE+EOwn14oTIQLEJsa5kBLBxHQGrqaNgR2vfs3oevnRbq92ifO
z4O3xq0Qz7ZOVdsjjqzhE4eQV6MD3HPFcDP2pz3v4tMc6dqOCGAO7FSs6xMG
llfXPG5XaiVsNeW5V8jVqtk1KzqI0qnY0I0CPZALOq4YQ0C1ZA4TOgDSNRyE
qqBQVpyNToECElPHOQVEr7+VT3kV/eqQRTg/ztnua5Q+kMnkfYqeJfmTd/1C
QgRYwI14DujaZVqbCIgK9YOvDehqTIGktD9TsguIajuhtP2vKxsPnUt0fYuh
oJmfUhT7EgoouX9272tm6OEzhaFn/Hd1zABzIGTVbm+sFXAl26yuXwtnAHAB
7ALtRgQWB35Zci6bjDMuwKPpy+Mgo2CkjSbkgJzRzvxsGwIKDhPo/DMz05X8
odeyArHrb/FwALgA4gI7cVHaAg10QE4G3ATR7igG/kBSqOB7WdsppHHftIlA
f1yAO4X6IAJcV1cvCs7WKTyvZrBNPDv0SIHq168aKHmfVeQCWA3kKeJIeM7O
Xzh2d2eE3bHGHmwWgGfmztcWFa0H2Rr5pDfBmrSwcVS5hH25ACsPzt+Q7ycu
sJSPaCMdNt4o6EkScmCdkFT8TzEi7L8xEXN9CKMApkEfCq2ockM0ddwUgT/I
WYA7hbSHzmgQAfPP6L5k0SlU05cRTUTAr6jr8YyX991idIdHrRhQFECcfSll
Ae+z8leB1EAEpdWvDP6ujg2IBSyVLyoCmrOC0pWOumdnmjsjHLc0aszPKWc1
3EgyLkiY13RCAvwqoWZrKIE4YOi+AkgeAMKqpwY7MF4KWdaDmiLCEPs8Irzw
1Qc+z2TfYcRDROD+Wcc1FD2rwQLNRtvDIyvZJteWGhH0xAISpxA/uTaICEjP
F4lAMUbMgVuHgyEryOYiA2HoXzbo8xomAKcGxd5B7GtTWjbYeh0bsFaEFmYB
AmX4iInc9KPzz7nsGyxoVLKSkDEHcUGuYn6VGWnm8ei84pAIMZS5e6u7U6K3
9xWEmx5GoFBmZTO2vnBBpADmOp46CWqABOMr7NW5Icpznq8Ci4PvhGyUtJWT
XAUHkZEiEfTOAsxjI65NjxjEDwf3ipMUvYTScQk4p/z+4AAiHXwTwCM6SUcn
KGVIMRGIRQG8z1L6aCX8Kt9vTJziiGA9FfH7PJb1CMkhfudBAbALAgtzpq9q
FJgIWyVYQIFLKNvyVBNJTstwJYNE1yUBpZFLGVjwBn2TYlJQYup46No7noVA
IpOBuIMEg+CtN8s9rQTHQ7c/+OJtHRQRVIorckOARwdE0XqA/XsoJ4JeWQDg
wpB7b/QQAd53o91Wgq9QdP5IOEWUt8RrsLkod6jWzlCisLK2NaEBbRNAEgXY
3bzCn3VyRIcCCH+I0KHXj48aUKEFRXENXJBaCQ9YaGYiQGTNunIhQ63GjIJ6
s2L6IplPYF/fhlpOCZb0q5en7gz3reXpKzWVDkIbsWko/DwpiCLC2egUywXd
F3G4BJDC5WhvtkChxkhZnjtKA4u38wotpgEeY1WUri0ZEfTBAhKZT1SlRzym
UzEev6AbGwlMf/bph2q4eukTjisXzwDvvP3Gpx+9hw3sUTuyKyY+PHb++GMi
Vq/9rFMLsG8CSMCjMyAO038XYwDWyc0zs5m1RFu5niD/cd1p5EAEdploxkub
yaOFbbVIAXBpqTD4GOjBwQUvjAKemUkuYuIICRfgqeEugAvVg8IB4R0pKWjh
qw/mXJMHNcILF0RRSeKO/Nu9OoVw/FcrRXDBWrGIkxRDx3m8UpT8MApq+/lC
EO8KtsDhlB6RCPpgAUnWKy+v63p1WEAiHs7v994kowAy/MfPPPnwiz83EVgA
uAAmgIZl0TVGMDqwdgTW67cwCMgdZPF6AQ3wThGNSqdTRDWfhHWTlQ2CtBQk
fcN4aMM1dUntJb60ae2pRZAchoTfSIdZbel+EwbIIsV0d+ynvETS5Ify7pxl
+GOtHRGOuT6kGmGwACUFJTxnsZ8O4Cfh+oNGLZX2GmCdeRPsJPn5jpsapgFn
AZawKjiI1FhA1OFBl9R9tA8WACQCn1+ghhQlmw5UiA9RJGu8BEQAUfyjt54x
EVgAzATtD4L7hfKuXxj2/WfaDrO28BGnTGlEMHTc+ToXCvqjkcVxcq9BolLv
INYcQ7O5urkQHRr0dSJGg/TIq7RGT+SLMApMXzmB9PBw0B+Pzov6v34/tgQ6
XcqKjiAeEaZwAChgZuoyHillSO6n4s5wKMP9pcIuZouJTEa0CDZi05DksDK4
nNdvDrTaVjkRQU9pUYpOoVabVmrdckHx2anVgkEC24IIeCihuvKuYd/8dgf7
VAf2Nwrs6w7SCdgIHrfLst0y1boiU8hb8SW5CmtWYPrKCaSZA5Si2S65XdXT
BkdR8kCuKvrq5THHtlmxKkrL9dAVWAFijbD/xkQkMK3tPIGoDK5mobr33TSj
PaIrAfmvmDvakzmAbTqeOZR6ZAHFQIwkEq0IWARqpQ22IAKor9wiMLJqDPoz
JwK7q9CZdNTW7iCdwM8qthQwfRkSlEob4fTGdCyXWldQbkEQqbhXMQm2VrPK
nAIOSGlqPkbiWq0TArWpwa9GTeSuFYtnAwV5G1KN7HQIwGx0SqQAlhTULhDj
5QMiC4jnwduBevDYajdJ6IMIyJPD8m32iUBSVixGCrqaA7iWvolALovE9CSN
S4DxomYNiUTw9Nl/ATrC+cRzz3/2R2z89NRLtMF34pH/+cLEa1yei0cSfvXx
MewUnyXwnTqJAMLfrNxRMgosnmOvjbF0B2nAPTtjtcqCxHram8iCCK6FM3jE
NvR84oXKZhwiCwuORpTnQH0wXwAdmH4JrU6bhY7+T2UFPHFI3hhNj6TFMSSZ
W/tuIhJoOJv4M6fWc6xGeJ8CIp5PYAJQRLiyGaPIhZyJxPfCDcedpLfDyiu9
TKrFOnlDaWAzfoEHi8E+lEHaqzmAFdJLmB+pFxZQDMSLRCC5eyLwWrW+oyIR
hDbi3/+lRcL8zRtnf/jhB2ycW7yGnXQAxD52HrvyLv15Pe7jT73vPo9toFDb
JqbwpyP4E8efnrtIB/8g/MOf+omgmZ8yK2XI7gECKhkeY3eQHMl4SLu033hA
jED4A/RbBi8QKSyvrmEDz+ILNu+Tji0jQIJZIXGoJcsUhUihbFLeo1JkCj1E
IEmwFAujuCgDC0gcQSwp6No7rLh1P2bdqW/SJAKsh+p8W+2OGelUTOdVU27P
wax51nHuCs9y788coKgHEQEbYdCLU4jSn/gN56c99Halg5RU8X2pQrxrjABE
ABGdKma6EgFUehxGkp+egtiHwMd+HIDXgk2w8fLFN/Dyu999S0TQuNMkOwI7
8eyBZdHVIqgGuEWgmFw6OhAR2KjeSgRlB9nanOkDjUrWaiVmu7fWyCjgv2jY
AmymYVsa4ClIhmw6mooraGuhXNEiYQKxXT8lBVHgmAIHdAwnC50WgZrYpHz4
0upXYr9QygulpKCDVhLtLnM6NWcCzAE9vdZxLSIFUF5QTSgoo8ShXs0BniNE
BQiUNUTd7TodsNtFc/hKUONT2qY7L6/54vdZ8hS9IxhBIvbZpAalOyMhgnqz
TJJcQgS0hwQ4iOBXHx+DYBc5giQ8dkLsP332X2AgkKjHwdig4+/cuU3nWbqZ
go3WX7AYLGykdwiqmh09KlhzKOgH7Lj4wdGmP6tcOFgAMp/EPgcZAqJDG/w1
N3NV/vJ6s3JqvpDZHppR8E0zd6u4TqlKLOOllIZkoNu1mD2YFEBCSeP7Q6Ve
rKWD4GbhXUO7VpZRmZhErG3l0jfi7M4oWAFX/pj0TfC8UEhySl6iMTT01jxh
lbxJam+Np+QD2dcTfrFm6tOP3hMhKbASa6Dwp9phkjIrvEVLIAJuEej84NR4
E9eLU+EmEC9LrBLJSWA6KY6dkhABAN0eEhvqPScCbIAgAKj0omsIx4hEAGkP
MwEKGTb4y2EUYAOmBPmR6CTYwLvotwiAysKLYt2x02VCAzABIAnHYHpL34B2
bZHLh5ilsGBlM65t8uNgRSJotfsODcsoAN143K5IeGE1GaFEykgkBAECwYgN
7kVvCa4Gbd0eJCIm4VC5AY9pavxOJSxAZITjxXBwxPMJtH3/jYmgb5JTAAHm
AMUFIAD7GKgn95BABI20ogonJynXNxHIzQECiBiXs54KAyACGiLGOUJyEuoy
JD+5nAh+euolaPUk87VjBBIiIOCLBCEvsQhgI3DXED8PTAP9RIBPTexH5HCB
GigoYNlZk8aA8khNX0arXY0I7RTmABFBJR9R44JWm78UT0K5Q10bU7MeraW0
PFBeqBXxWjyyUe9ul2KGIfWZ9wbDsAiolaiaf1sOUkcVhyoqkgiFBkSxRq+t
bPii19+SWwHJmBfnh3wDbVU2Y6yCoD1Fl8qc1Zze2pB7SEadP8mlnNw1pHPN
ahYBBe7FP2m+MDZgLlH7uINQQimt2DxQTgQU+aWQrn4igJCHqIfApw2KEeDI
q+EZ2Bc8RgADgQIHvRJBy+ECHTiaQQFFBAN+w0o/qC5M7SlW7CYT+5AA07Ec
BY7bkc01OljtLZZusr5DBaX0ocNdOtfEp8ih1NzZmowXNzbSYAGNgjv8mkh6
KDoftH9rkC3UxOxwM1LlV5FAozTRDgXkQuLgmANHkDBHHiYA0QFJOZACSbz+
JquKPRbo2j/96D1jiIA35cDV9UQELaX+KtQ0QyxqIxsBHwcRBMX0qZqYthXv
mIQIoMzTdqqY4URwv/U97eTi/Uf7mUL8KUj1b+/fw7PQKCg7lNKEcAAJfJ41
BO6AxdFT1pD4eYlcUJz5icMFBAoK2K6D3OiAn7kx3YdID5cLYekxh4lgK5cO
pzea9XVxsI5aS2rC2UBBrDKmhkUHWSvpaCS8kIyHVpMRbFMGy7VwJrWeulVc
j0YXoSFgQ/tayOdPHYYl0G4fxKeYqc095+CZQmQswERSpoDDjiCRDkR2gGTr
L0NMnNVIBQK2IIKWzEHUGcTTLUhNAR0a8aB42iEaRA+feE5aIHDiOR4I0HOL
9EDOBYP8ivsA9G38AC0VhKWgQMbanXYMBmSve3Zm9HdeyH7ULNajQIB2EFMt
g5RA0+1hFHDqOVALt5K4WIr/Ms9zOgo6SK2EQYWxpQBYQK2FhRw4ElwAASuJ
OUK9VwsW0AxHna0byOnEKGNnJeb6kFMAIGkTpAdQbvsjAiwASjJEKPXhlBMB
1Ner4RnaplwXiLKXL77BNVjIOnJ9/KgdCaXkGS7uoCRjD9eZf6TkGuqPCCST
bvBhQflXIwL9dXO2qCyW3wpxhFnJ/bM+vgl9g8qNrZNQSo0jjnhQQBEQgKNu
PSTq5IOfze9RDhYTKH3Ily6Kb0qALQCBP5QyOtIbIdLJ60KZRUAln7oa2aDU
FNaAVMhUpzXgSGrsWatt8xpeReD3S0lBnAJYdBgUIKj6OkHBAsnJ8daA9tAB
rBNCOBJhaahkPUm6rvnTEV4DRYFOCHnKgSFp//TZf+Gp8pT90rjTJI8KDvv2
/j3Kxuclt3KLoNcYgXiNxAV0zw/yWo8YEdDN5Km8BnNBe16bVYggk14+Co0j
+gNYYNRzCvomAmZKyAK7Xbunzq6xHnSSwZ2QBjAHqvlk30RQa/fb/2rlQHSL
dABA7YS8pZZl1CqNvM30J18JdiYT8dMLrIb3bEB5eCUUfoh9PjgGFkGnU5zK
lIF2hD2l2IeBjpcEiyH/8e4E8JF8ATiY14jRVdDiFYng7nffQvPXJgLKlv9R
2/tdqG1jA49kOGAx3KwYlmtIvBC1mE6vRNDMT50//pgV2lD3SgQt87iAWpKa
7hqixhFHtlJAJ0bdbqJvIqAXigGClmawmJCrMAHLDyawSup0dJDLbDZUdXiK
5yqKdOo4BFBhL5RzPOJPnIqIoFY7dDy+qFD7uS+IBsfkU17B+9S9f52YcEtV
D/TW/F0ge8FoAJ6SLKAl9Asic4CKINSIIFXMkJIvIQLsB3C7xIwXCHzYBeQL
An2cW7z2o3akldJvRCLg3Zn6tggIRM0aLFDrNq0Mn0gl/CpJ0dVrP5PMiPno
xDGaO2MkqNSiV5hoFxgGXCMU/nbbw5VMOpqIh6IRFvhzz047QYGuGHW7CVEf
ljzVVTLLD9AOFrfa+T+QsXg0/cYSqIUmJfBQggqIIJ2KQUhKgpKVDZ/oC2Jt
gkJX5LlJci5oN1VYbTevSEv2k8CnAHdXIpb0C4L49bFamwPvupwIlm6mqK6W
El04EUDmQ87TTk4EL198AzJ/u1HBYdpEQIvB75rPI+jjzmPlbLCCJgvU1GcK
wwSAtJRPh8Se8uxP8KzpX61eMQZcwOX8xnqM5DyADQACf2Z6mgZK4s9MehmH
4WCLOKasDwPaTdCIHNZiWsjhbFbXgV619AX/dNdjoGkrJpGaAvlM4c7kmraa
zfvIZXwHhgD5glg4QElwsZQYQdpLFFrRdwQioPZBLVlRmwRYwFbugAKwzQPi
onddkQiwgUfqmaYRIyA64F0U8LUj1xDfUHSAUwuLPogAq/W2w4JdiUDCj2xA
PDMBFKYDYyeesrV7wb5cAJEOxV4i56nqH4/YtmxrfRvBmHYT3G8/iItGY1QZ
x6WlYbabGBCKkoeS/IkFGqVlHhHAI7Y3YtMaUquTGylUIkjekSnSbTqQzBoQ
i9pEiC3jWE+P9i+LjTaWpciqEQEE/v3W9xpEQPIfZgKzg+408Sy2sYFHMdle
TgQUsO6VCGieArdlwGvsusRrKaX5ROmD96oGxswEUIQduQBr9nhmnDjvqGGd
dhNdEQnckEQN5NAggmI23PXlw4JkmrwkeM26wMHIjR6kBrGIwNRJNUNAIse4
F0iNwamnkGRnPDov5q+K4QCxHRwRgfx9JUTwvvs8pQz9qJ1KSi1xINV5pdVP
T72EbUoKov5p+JPa+BMXYA8FkbWJgA+v1wOKwogerRvxHAvHCHdP0m60uvKu
oglwO/oynnV9dWHMSrHkXGBxMwdWAEwA05cx9rBOu4mu0CPJJ8KFXEX5l3v9
8sd//etf7337DTb8nquur85jAwh6JzMJf7m4Mqy4OeUUaQhzVvM7dZk3i6DZ
MXr8GKJzW7uETQ4INBYsKKXl4QDJySFL5f2iRz20d0CLgHqA4AJFj1C7vfkG
uEByLbBNKhs+NROgOPOT6PW3arVtGCz4mCwuJ/uAhAtwySXvs9bku+32sHXT
l3FEYGS7iUFQ61aV1mrPqVGLEUDg12rFv7b/3bl7+7t739I2drIkmfCCa+oS
8QIYpz9S6ARt1QV4PuWlafI0Sh5cMH/1uGKpsh4uUEtYUgMuE9KSU4DadACy
HYwnAryFGMjQHyPATcCaJUENMgegGBy6kK2VYui4WHIrRAEeKPheZt2uiqv4
dPaaDRDBjcnPDJOQsD526lVcbyE7cgtdwgUUBNndvGLMlepfpMcz4/j/DYNh
7SYGBJR27Qo4iHQQQb1ZUXy2Xk7BCtj9uv7X/X+cC8R/OAnuBo6EEEjGvD0F
UOS9brj8T/omIP95UDji+QQ/fDyeXigAcrVcJ/TbBeD6ZCJO/n9sbKTDapVW
VIZmPBF8+tF75AuiPktkEUCr174uHIYFiz1FD257LrG97tuMX4Dwz8+/ClVf
0QQAL+AY8YXQBzoDwi5/PLrvM7vAtQX6BNlMnKnLeEdwQdA3acCvic2zkNlE
ljINMullu3itxwPGtJsYHJDkqYRWt6hCtxHGoJK5mavkEQJuTE7gEXsigTnI
HJEj8O/+/e8ghSCu8cPUQwesalhIl2WdzWLTUPtDV/4odoqg1KDQtXcguyCN
8RaXo3k2kLGbzKcQp2RmmTzuKYc4QYaqAziUaatdASEnglG3ocZbSHxWtKFx
83HPKebCrZt89Gx5lgl8ucyXJwIxEyAXWivMAzRSE4BC7vNMQibXatujk8n1
SgrfPQpqQOW4cvEMjBq8Ka46Hjbux3jv6xXQgTVNAw9rz+XkfxoKA9pNDA4I
BLXJxYREvp/BBOBBEEQm4Q96Jyl8AOFz5+5tPje2VNzC/q4GOxEBBAtrEDF1
UpwdJo6SBzXgJw/LxRtZ1pPr3oHguyNtWY/mRmXOar4gGtSi+HaSIgIg5L+h
NlZGBB9Ac+Wzk7z2SmOEDTtyvyyLqqXwKUvGX6pxAe4AcVZnqVsredcv6nNP
aFMAmQDgi4NLy98AwAUdz1iYddXA546bMyIvDRQACP87dw6+Y/wf3rq/qrFB
AMkvNQ3MDiJv55MhpX7gDkZ720ffbmIo0M4gnV0r3kgOmjvarK+DFOZuXMBP
laXZfM9yI2EdzLkmkzHlyeZs7lhpGfI/ev0tsUHEgf7flv8wEEjthP4Pwgqu
ZhXDsmro2uyaQHwkqtaKEWGyWSQ5NhKjQKNLT60dipUYMlyAU7cfmpaFR+zR
yOpXvCh2S6sZscCBZlYe+tLmkzSFgVigOPMTNckPQNGF/OdRABE4D1gAjzSb
gLmD2h86vgD6mxHpBK4rEpiGxUFvsddsQM3A471vv8Ejrndm6rIBMQI5IPYl
N/DWzCPGL4MjsDBni8Dl+GHU7SaGgskrExrPQrrCKBjWe7Hmbwk/xAJ+qqSt
4Scc9E2KwgFSJeE5K3f+UFEANYsT20RIQIku+o0C7YlmckWa5KdkjI5E4It+
FW2jQIJEJgMuE3mKl6R1phiHX4U8gYrOOqaqn0eb3XC3RTqgYgfs5HPH5CxQ
8j4LhX973dfp1NoLyYKpYfuQr56J66F+e/EZgVzSqRh9nXBdsJvwLvhSkQcS
mgYWYKKXHqaBmExbX/vUlGXgI/bLhqU6MAbJeEh/N+ahQGNgjRrUplW29vtL
qEWK+wY0JfxIoXbyHy+oATvv7qyIkwJE5w/2wzqgTnHaoGZEGn2SRcjjworK
/4EJ0A5YEG3RBGRq5Sfp0Q1ZKvYU0sMRInBDvAnGQdQaSFwAdz7TCHs1dP0I
cKtBuPz8EKTUFhUbeDkkJ2cBlvwZ+INeYpXdW9wlCGpQAD5o0AHOPKxvUb2S
wgnxzaGT4x90ANiY1onMcrSbV3cSimquB0xZw8Z6zGkQZBYgH4IBvzHvxQaT
VZmzolci0GhACq13WJOLJcBPA9oafsitdgkthQwg8EXnD8sIajt/dKqgtX33
C2W86OmHIE5RkTj/ubYMsSwR6aTr0kCc1n6XPMmZqXu2/B0V80ilXJbYAP9K
grwU1ObyWZKTo4cIoM/TFB7cW9ArtmnEDI1gA3MlE/HO2wX+MCAL1NpeMmjj
+FhxA/ERt77/fij5QmRUglyg9nO78s6d21At1NyMVkAzP8WNgqLvJeMXsJmN
O/lCJsLjdilWbEnEdR+aPE7LfnHtztKNdvMoPPZ6Eu33TeSLs2sjbC6RXVtg
WeX3v8NvGdJVnBQAqdWH8KGupCRv9TiIKEFI7v/BHuII7So2jWMgBhUnr8FU
6bowvDtzEO0TE9iNGIc13HP9goSJGJmVoLGdgsKPG5gJXiR/GoQ/u6uH4+yA
/8ZEPHwQUiEDAWfuODHmntB4F20KIF0d9gU1TcIj9gwYsYUJAOWBTvvdvW94
LJgsSjX6sw4OjCz3g3eqAYPfHR+uM03SRCh6h/78p9//7d/+Le1v7mw9/tij
+PPMh+/rPKdkXhjO8Hd/93fP//Oveu0RGpy/gfe9MHFW7QCwwBADBIooZCPg
AlwFZwEN/782yBzghkDXzvk1IRTbaQoh65ag/XJQALWI11iPJChAfng9l8Pd
+LW2M4pyXEveZzta5b6izkYnpLzroSuwnqLX3xIVfonYF6MtvBfToUZMQlyA
sUDKy5lIO8YtXl0kME2ymmw9Lqh1sgAuk6S9kJD8GQEmQLlU4PJ/r9kA7+MA
cNnQA9CjwL2vV0AB+wmlDxn87jujb4bpQAPQ0uXtJkQi+NUzT2H79AfH9ZwN
oh4nFCEhgp64YHsrCfbRyBqaCA8/QCBHJR+hBkGQYNoN4rRFkCQUqz1LS+J+
58ECkQjYoJxMRqcM1M8FYCi1kDHeC09RYZpieiongtVrPxMlv4bY58Kfp9om
g1fJOsALD9xuW9K4QLsLZUIjV1ZOAVcvfSJSAHgWAhy2gJ60SfIWzkxd5g4f
xX8wLsAsrq8uwJyBFmHBiIAGqvF3DuLvgd8a/O7u2e6thh2MDjTeXdzDieDl
l36DjbePv8af+t3vXv7sk1O0/W//+jvaBk3gGGzDdnjx/3seZ3v12CvYxk4S
/iACEAr+xE48RV0jmrUsHfbzf3qSmxt4OUyA3zz/z3gj/Gbx58UL59RWzkfS
jBQQTSSsWDuafkUujSeQ7FQUuVzGiu731v7EyZoQONjYYCmp8r46ygI84ZdH
qPERM+E2M80SRzdjEIm1/VCy2nko6wmQdK4jcFmd9rwrF/40eYe13W5HWMgj
FJk6mfRNZKNTPNSeDF7kHZk6tLjuo5Kxjt9p/lVxSbhFYsCCZomKB0AnBwXw
xGAK+pAOr7NMGzcfgp0n/0Da37lzmwPKP1CrsS5/ZAIY0N13RLg184hZDiJY
BE7HURPxTZP1oBO/ukQEZAv8X//n/yEeDJEO4cy3IbGx8Yun/4mOh2DHBvb/
4ffHaCf0eSICbIM4sB8br/3HMezEeXByUABOgp00nvhv2//wWrAGvhjY5rwj
QaFWnIyPvPt0o7RMaUJ4hLBaX7gAwcWFGFNf20IMkopXJ6kp3vLosDwyK6q4
YsY+VZMdyPxSmjz/EIDK9QKbsWTMCyEP8UXuCwhwcoxjG7oxK4JOh69cPIN3
ISdGJBKac01m1xZq3ea/ky2D45OJuMQe4YmIZAWQkk/SHrcO9hST9u1Rm7V2
8o/i+SOeT4hEQtfeYYflQjgtsYBWdLiUlnjSsE6QGlEABXqIAqCu40rZSvRl
reOngZdQxRn+4WysCPHGBAFsQumggO1MADnufZ00y0Hk9JcwHdtbSTF9iIgA
/yg6IFoEakSAbfysIN7pVdhwuWZIjBMR0E5JvOBWcR2/VhgUOPLKRRYLoJfT
+ecXZ/GnWh1BKFcERn1nuFqbmv5XSeKoqOhSBRnFkUXlVhT4kCeUyUM7d2+l
xcisxBcUSWclTfW148Jc8kPOQ/RB0OFNWUy52eCeEJ7BQoorDuNeDqi41Ili
6svLpPCrVUATVeFy6HiaFdJZQy5E4rrqegBvccETgm6s0WdbLW8KlMFNMGIB
7hHKu36hcRNI/8dpuYHA+tftWwHlUoF7bOjgrno7a20XZu0g6EbhLlGNod2l
vTZuRd8wxUHkhAnMwp0Gy+ehrCEQAY8aExFAb8f2Qw89gG3e8EeRCGAL/MM/
/H2rHSMgOY8f3cR1L1549sNTfCfeC9uwAnA8NiDh8SqATA9OBC+/9Bs6v3aw
eKTzaNjUksArkpaVJe+z5PEgz4ZaxJMcIEQKrLJ4M0ZJ+/zktf2WQbV2WUE6
FZPosYlMhvWjSBxqZ8f024Qfcgn6PIANkvwUsmQ9ruNhyKt7337zg+wfhD80
f3woRApcNvJoKWQdxTdxDLgA51ergBaXSg4iXAtdTiX5aSdSPPMTXC+uAseL
LX0OSWwVc4CZObFpHiMQG2bitNoscLDItQVIe5g5dKW4J7hGcBO1tuO9mzTk
OS8t5O4gnAo3GWc2/WdrAMxyEHk8M86sSeNBif21dm4/fh0et4sawIrB4kjg
hqilk7e/1Y4yY78iEWBnrVYki0CNCHAA7cSr4hGvSAT/9q+/o/ciIjjz4fvy
DFLsGXop2b2vE8XQcdEXrda+oOB7GXKGkmEg7bmzSJ4ASaQwMzOdCV6s5CPc
299qOxwASG/ub2eVuW2PTch/4+rVK1cungF4dgp0UUg2yCXINMrYwWuxwZ0e
/B9EVq3GGlDjPJDw5McgBsGfOA+LO9z/DuxAh+FdfJ5JSH5+BhxDNkVXIqCd
1MMN1Em3CPenq6xmBCELcxM74H3J+OKh555YAMxLt47UeLAbbpQk85bqLBS/
BniW6gvEmAJMDD29p8YGZjmI8NHDoDP98o8a+Fhhkv+3iutU5S0SQasdwOWJ
Qz//pydJVoMa5BYB5DPthMAnMa5hEZA58N6JN8nomPjovZYSEeB9a7IcbNgC
sAgGvwMs0zV1puT+qfLIKs0+lpIkdsgfaj1NqTKcFGKuD1mccb8BEaVE3t1Z
4fPCQBMQ79yBjw3s5OWo3937hnLdFf9BQEHdhVTH8eJJYClAoa1XUnKlF9IM
gg7HYFU4jHlv2gKZaIL7kcAL4AK59i6yAOXe44SQ6vi28Egx7gzEqbYvS40d
8Hg5mofuDUbugwUAkBrViP3QbhhFApxlsR5OMaK2FeKdwWW6vrpA4QBJWBk3
xxYpoEOE6CCqhH9vzJs61QSmAPKf/3yYlK5l11ORlVjE77n69vHX+EQYEAT+
hMSm7df+4xhkNdT4zz45dWOSOfAnr0zw/FKQyMUL5/BanArbC/5pyHy8/MLE
WSIC2sZGKrH46rFXAGzg5V9dY2mieJb3lMAvF3/Oz03Ju6T60v0HCCD862sf
k/DXUP5ZyzL3z2AjVJKfVsKvQjuVDzfBTlEE8VHyIAXm34CxoGIpwJTAAeup
MElUyD1IcrnA53sg7culAg6GygTxC1BtGsT11JeXyV6ASFeU/BqQyGpIdSjS
VAwFewEMBakI8cjdOzyjCeKR+IvWQ4EJcuPgllY2WLVdx/2lUsWgqs+3bSLR
I9Q1LiACr8Wa+Q0EKYD1xAMksRg+CqHVnmdHs2noH8wl/Q3JxxKig8iYxqR4
FyeJ1Hh0in8FwEaILQVYrnW/54SEB1mAIyDh//D7YyCFaj7ZqSloN73h2zqr
jHFwWdYBZiJc2G6Ue1rY7uZkYe45beFPg8urK+/e+1q55wyLHRymA1FM1QsJ
PmWez5oXSYGHm3k8FBzB/DbtvvTcmU9zLSGTP/v0QwhYbFCuI0Q9ZYFCxc2u
LQRWr0LK8WIEvBcFo/VzgXyqDksl+uwkdUtOJuIgKSjDvGMzKdUwQ769f4/b
LPzfnfA/S6rJakI0RCdwaf3FBQi8cRCoKrDg5UaNnG4kCVoU0CcjAt9/sqp6
nQ06ZrhTDfAPYtv/vDFvGmIaTsj0az9SYI6Rwz8QEs7BgF+jw0/Xc5758P3j
b76O3yOADfyp+GPUSQRgK0ntM7hGZwXBnfJCafF3EN3awh8HlIKv4mCd1yhp
2AirgeSwhAUYBH2Yl+IyQyA6xWPNbJCl5xPevy507Z24n/Wvg7y9Ec8BiiVj
kMwkn+UjBvQ7MXgKkwjcbXABPjtqmAwCuuE5R0RA66f6WRyA94XM5LlJpdWv
+D2RhAlETxGZGMrymeUI9c8CoEXQFvEpLmFy6ivVxKSEH9o+pD1uMg+yUJwd
dGCXWmADUJr7BTcK7n1thPceRoHTj9p4SH4gtBMi2u/z/P/svftzG/d57/8H
9YfTadppZ+qe9jTNZNKTNPFJ0hO3SVy3jk9iN57Wdhxfekns2Kkl201lWZVl
2YklWpJFSf2KF1viTQIJkCJxsQkSpAAClAmCFElIlChLlmSjyff12Yf88MPd
xWIB4kaZnGc4i8Vid7HYfb+f+1Px2Jqnn3wclJCZXyzw0vkklhxJr4WTsQ0p
m5rzmkFw68r4QuyVuT6vYSWrzerP/exqtquy74jJYKY1Wsr/pAsRuLkjBJ1c
AwpmjS0aaUc0U2yQmSYCW4VyBQjmqjCbzZPDoW5MA61Ci70wEOgFMBGpVug9
qYhsg61klH0pmU9CBzLf2ZXaFrObsgXY5+m2Q+LX4tzePDXyy8FZyVwyt+GE
sbAwFkyLRqda8dVs3Zw+42JGjefP/rA+B92eUFN/sXmH9HpJIio5ON5VShJB
ubuNDnebL10rCNDn5/of84758i7bXL1QnZ7zZsNGQM/pF2KNs0wYxZj/tsCl
mAkqahBuN0MJalDOlHvIFZMBIpCUeN3LrlpEIJiJziw+K9AV8NRfQZBTGqlp
ERsnGdhn8q+z+AsicPUUbZIFEPhImCufn1Ph3WQaMavtuFaq7Dc2qE0AFvhG
fE3WS+qUKqnb2NxVJtc0/DltoMwPP6t/l7qlkqKIbs+srLO4EkHBalJdrDep
U9Db2RLhMW858Ctv15D/HqRsuRjfO99zPxhuRW9/iCT6np0YeXU5fQJ9nne9
lX/5VH7i4MdXUlW/dDpPhqNo/FfpQw6cL0tS46GpYIuEEiAI8M17RoA5cdg/
aklraylzK5bhAzxK/FRnYIoiLf4Tc0sobNXT9d4u8+dwTSVdHZRQPRaQ3oAC
7yw4B0NITpS2AliQDCvW62srtcYSZHHOSvMzKvpOlfzar1O3EWaZ1Oh2+lAd
RKIDK/m0JA7Jg7myZIfKuZkE1OwHt83nWprFYQggLPDS9lT6PMmF2CvlZnWa
bn8+futKrcbuSL/NuVTwI6sTJuIf52WIgMyRERyWkQGS3C4mA1xgSzEyK86c
rhXdtsgnEWjw1/NZXLR0KyFfiEBqdfkvQAqE2s4hEWxddW0FWy/Ej5tcUKxZ
tAQOOMqGgEv5LICg1UvkgpPENLBxhBgCkoKlsqG62lSOqNVMw3Y+zqvkbAD7
GTQQzFTSq9Nt9TkoRBAeCTV2jPIdL9IXVMTbUZNOxnwOryn5tEI6JTnl+sIQ
AI4O713VVUz5n+1/qmK3v1NWuytbTWyKKfkypRcimJ885XxXefjnV90LZemT
3P+x0/8psYNV6yDc7ty/JgUxCiIjIZ+JLuu/vrW9a0drNUtlPB6Nhm/d/NgM
E8/nZpzZONGu/RLg4Dx5aXKBMpeK3BKXs/HNswCkGQx0iqun4+Rhk6FshgBf
QTpOu+yneHTSaSCoBk2fMQNhqe9v137N+tWXTSVj/LTbnehqJ2a+UMmN46Mj
sVgJM80sSSgmrh9cTp/QKf3FwH+h597FwaeRuf7HxE2kt9Rh34qVfzU67fLM
/Hwm+2HSfNh9SjbWLmcCI0gIoCoao1hYElCWJtgqrSjQIqUHxQS9V2a7lwx0
mgBodkDKr6VWzmUVZg6GQ1Kqxs4xOoQIVju2bfxxZXzb6Hu79MgePUGmmFHg
9AipOItv/F/MjXGSEiOW+DXXHxMmHlGTQPlvMwQ4bfiiWNduP6FhmRP62TQQ
Lp0/on+p+f5H63ZcfuJAoHc7iah2cn15+tLChE93fTQyNDEWkRAAmI8RoaqS
y6wV4iN6h+A26O3t+REPz9ULnWYua3dCRYo/vpLCdkD8hxtAe054LpsC7V1n
/voRcemYaH/DyLW+eqG9Kj+NTT9fvDAKF8i4FtXgru9AfmasmIUCaGMX9Pb2
8J+HyIlvosrafjvl5sompN8FIoOVZUBkofDp7VuqnE06jhY+/bT96H4bnC5O
h4WtoIP1t2bWE6sAfCeMmxUZsIAtcOBT0Pn1dGmJYkudHf91LhA/N5aCuyGw
JmWp92oop+EyMqvS7mDR9WUSLKib04Z7dTuJqElEEkoT8XC5z6kp6Hu5RPvM
mcc8qrouDfz9peCji+GduXgrWIeWLjKnRqWnLuZSH0yeH0+tvpQ1Iqj0Iqys
TLc3vfdlOXM03IFmVbnaTo+9cIHOL4127TfTk9SFcvACoI0OL3huRhBsYKt6
3MUjbMBmgSFVS6iRPH1+CDYRjXo+N4NIAwq2t/nhdZu4DSMbODHDKJBqC20L
2Fhg1Rawgib+e1NAXiC8nBXKv1kXLH+skb5J3uN7KisccxoI3Dl3sIFw60oi
b1hwajlfqxicKdevTEvrm21pBlnCRjvbh3JeLv4vTEc+HHzJo6oL2J8Z72LP
lWnplSn28IW0vNj8lVmM7NTf5cZl95LkssSJhODY8GSHuF+EC1SvfmfZglvO
EtguU+BVLwtrBo3UoMlceFUOEBuUoWOtkVkz31KTKRTA8uVLS+m1nvzSjVlv
qbNelbViEAGiAZ8Fvd5kAZZtHqHVFFMf9ianIW2FZNYYpNDb1SZszn/eZaUz
KOyUTaK3zUCQpNM70kDACjDtArigDgmlHDQQ6G34d98WEanw7etz707sFK38
2xT+c2dbV5eDj6L21wjqBQ1Ae2wE0N6/B6kCUcHEgC66eXjze3NeTCkfM7lA
Biirbv+WRSBzG0uSAiLxX5G01e90/SezWMDZn03VLIS6BVfFD1P49FPdzA0S
wUCQOW6JYKu2/uQcZoPPbAgZl2IBLSU9RRwX2FcnU1AnI2aRnCoSHe7xmK1j
452q3QZLU6bX8U6tStPlxnXjgt6e7QZEzSJSeobejl3gzAj1qfwD/v29HXCE
TT8Hrj0KFgaDp/Xy+x/mUFxrCuwViOQOSVyjWJ8in+KayQkLiCigM7hA+eQt
tOe/kIKzqE3bFBUER2x1zVJxLD0lxOnEf2npE+pu1SlDJhHIBAfeFXeWTxYo
SQd8ZR0jVlNyhnuKdZOoGxGYv6DTQLjDXEa54E/XY3m17z6xTQTNI7oGOT46
EgoGltaeO9Pz7xH2net76MPE2cT4B8q/tPaM+EwGMIPFwWTul4Oz04vNZXdj
va4bBQNPbHJv5vCUVZlP6p4Si7kxJxfYDAExE9Ynv28Up87vlGJ2n5qqFuhE
CYcjZIoBK1fNAYMI5MZITUQgC2giGjjMgizLlAEsBRX+XrMgvIGayyu9KfT5
q7rm/JyUhjmLGsqTtSKywtqoiKrIHV+VNhd62rQLasoF2wNrmkfMjNPoSCg6
3J8dedW7nxvU8EH7w+nRLsMv8cHZM736pU/F3twMiwAi8Og11CjRU1S4IBUn
VPBBDRTrXDCfBPTya/NfVM6kkwumwxu4IDuB+MnGVBBqFUqIrE5DtvrEum4f
j/RKJ4e01RZDplW6EgEiYeVVY7D/IcBf+hGpWW9r3q1iZzUwnsH064iuXgSz
qbWaFGZFK6TThTOXdTNSdaC+g5NO68YF4ZHQdgZpA0UaR+hlHpP5ZPds/1Pg
f3/3cRaKKf+L8b0fX0nxEZsvAiJQrU1F5/zQ7y+7spQyHUfgw68GZ2fzzcUF
t66MaU5cHPpJZTsRnV+W3at911RfFsB/PfXGyQV+c/Lnk13vtT3x48e0vPDs
k6/t3Q3Iu2bvqFIySxVnGzbu6FBePhsR6JOMjIQ0EZgeoeB//YcQweDxHelY
FwLwm0eBBaB7xfjxDb2w4IJwqBszBJME6Tt13DsptAKpEUSLlXfnVaXZ4gU1
4oLxeDg7XYU0jG2pQHSNmPICTRy0tfSZ63/sUvBRU/mfOfMYNCF9KpwUcDGn
1qeTsVjsnLnGj2TOD5mdqPP5XMvwLJJvMi6YP/uwZsOyHnA2zl3+QAcC9Ged
Cf82UkA3lhbWwgUKTtdcQ36hbz65Z9fO33L8/e7nPhex1DDb9h0nD0tC6YM/
eIDNjrz9BpThtAj4vTAWhocGzN7UkimKOTPYsUenP+n6CLMGYWQyDQvwE5tZ
TIgEgiVzSdqfVpcFakcEWu48A2H+7A9rHTu+44lAj2tBLi0oI92sumqsLGRC
syGvZv5S8PXh4EsL06vpGZw89OFKASLRyNDYaFRc0P57kEIf8eiAuWbl8gx2
AVKV/M9qiVlcthjZ6f+Dl6+dFwpgwfaWuJpdIUvy/6Nd+6Xbm3BBZrTH7ICd
t7JAx6embIjqJALUeyAdiccGH/i7b8sa3Y9IPDP8l2YO169/hDYeHe6R3FSl
0sfalUwMyAhOWABbYDzQMhVs+Sj2zPXIk5f6H2ID2RUnOTVyYvUjlkgbDR0y
4IQ7ohlb51UOJ0eXqgEYwQwcbBUi0HInVaWZXLB89r5c8KfV3T9EcAfPMnYO
CBNp7Fnpng8enn+sg1y8VZwPc9kUmhtoD7DbAo5Ot17Iamtfbk4dFDkRH7Ct
FC6oyuTiKorZj9TnQ40tIIFgj8iCKxdIwmTeitWuj0h+bxfUoIyCtc20mwWC
9iCCv3/ymfO5nMQIXtu7mzXo/ILbLzz75J/88f/87d/+H3fd9YePP/JQofBp
Pj/37D89/OUv/3nXe23RaJgtv/TFP209sIP/mBLwCHYK2N7ftp81jzz8AFyA
sB9evv36DgwHVrLMmj/4/d/7xtfvhgtMInAKyn9/X6cYI1BPqFttuZpTVGaF
e5MQgcgdU5Vm+ojENKhi1687mAic08EaSAQyycuj4Fe39Dk9FBkYT4+nNjx6
zjLeYtr+yHCoghkHXCvXiWniIwomm8hBZBoFS2P7Sm4P+IstUDK+7A136N7m
dBvoQCII6N7d8WlY4K0hu5tFE8GOF54H9v/yu9/b+9bhHfvfgQW+8IXPs4YF
AF9o4tt/fQ+bfelLX2S5o6N9YX4WJFfLJw8nxuMgOctAOiu/9tUvs3zPt74J
tveefJ3lv/vO3UIEkAgv2SFvsZJlyIXtWa86RXTtsYV9efahjPC7rwX/6z/4
LjJHABtETVLWaUKWX6WC3hTFpFGZ/3dAVdrF2G49xWY1HlSlrkR3MBF4PNf1
SZJXTGR5/r2Vf6yDS+cP6U/BAqv+eVFKP/RLASKTCeUXquBsM+fd50hOzakk
oqYKHOtU+aW+e0tuLLaAGRdwFT9AB2bqNhTmvDMhBcwESMElzdItRoDmD+yL
OcDv1dl2lMeQZaEMCAJMlhgBRMAGX7/7LwThp0ZOcBqf/5M/4iXmQPvR/ZoI
rkeexIiwEQFrWI7HBrEFVLm0dZ5gPuAvI56110sEK2Pw+A5bZDlvOa+gg6p4
imxEIL3B63bzbPWqtFtXEvN9D5oYUpURBndqjGBlqYjDtiIiKGt7/8q/6wxf
6V8tfX5sFODHXT83kxh9v5JYktM1pOXMeVVi1vDfVMvVC+36Ynq3oeOpv3zt
fO7yB4jHZv7VXTRqgFQ61EUDh/v7Ol1JAaRd173XiABl/tUjnV//q++y/MDf
fVtSSUXYAA3/dz/3OaEJXupg8dEjBxIjHUIEQ6d+CVCnho4LyEMfA4FekwjE
iOAj8VA7JobEmvmIjnf7FL6Cq2njUn+xaSKQ8RAV3Aap8RAsWbG0nzjIheL6
aOElK81tOETD73ZXuXT+iGkaLEZe3OQO70giKBYaqIwIwtNeA3xFRPn3bvIv
nv/50bdtk7z4rIiKFc6p1HSbFYD24l9jYcvK+kf1dZ2ECy4tTDjfurSy+KvB
ejuIvB/zY3u+r6ViKJDHvAJkW8yNAc69XW2IU6le7WhtZenAGjCCEMELzz55
aiw3Mpn+/Bf/t/CCWAQP/ePjvOR/Z9cpiR1gF0AET/z4MZbffn0HKr0QQe9J
xTXpWJfEmjm6SQSLw88KEbCTaDQs25w68qIeu7Du17JykDR5Xc7G1QDK3CS2
gHwXttfNrm12QaFI2m3FRCBhiAruEH7B//ejv7//J/9QI2HnquFeHe/5suTm
tUwVRxgMD/XfYVMJPEIDWvwPdi9Y+jAYOJkNOt9CpV8cfNpb+Z/vuX829LOF
zHoytoyP4Rz4D/LbulzarICyTlWkr6/C/lELuTHooLO9NR4dYNl8q7Jy43w+
N57NTc3lKvAs1ecxr1i/ncsmenutZjszYyAzgK8MATdSQCEXjw3/Rf8HvX/7
t/+HuH1WluckXnA8EF6YnxXw578rEYDtqXB7d+dRbAeEc4jHBln/+T/5o8TI
CXYru+roaJ+ZTgoRBAOdqjd4KpgItnKGYq3YDBnTnNFEoJKjisM4pkHFbiKn
a6iy25Wrx+/43f/8UY2EnWMgVHZu9ZHrZof2zQWO77wWE36IoCwNBDRLL4yH
Z7ovX00WNg759fb8L6dP2E5MCgdWllKCP+p/EQrgQa44kFExETglFg3093ZM
jJ/jbDGLsAsAdj8fxIhge7ijNaLiHZKyjm3l/9B1eMyPHjlQGZQhIDBEYLcU
shOQQvjd18BbrYRDBNgCYPLjjzw0HmjhLcBc1vzJH//P+dyMWAR33fWHX/rS
F1kjRHD14qSo9yoFaOj4Pd/6pmxjuo/EoBDw/4Pf/z3ekjhyZ9vRxHhcXENY
DbZgGaTAmQ927MFS0GmlThEfl6tdoF36ldGo7emrzC9UnzvkyNtvNHnbCm0U
XNyEdwhbAIug4d+l6lLy/gSQy9ohRDAx8mrm7GMLPfd6K//zIzv9TPJSQ2es
01D6pKML2SZj2VUkAlM4q6On+l491IZEI0PFyHRueQEbCsrojOd0PRoWASvh
goFxvxTc5EQgvaY9NshODIiZILk9yi905EWNumA7axDVLC6Z3vHC89DBa3t3
J0Y6WAn4z0+eYnuW+SxILkQgayAIoJ6VMuYmHOr+xU/uRXpb/pFTYoNMJnn9
+kfsDbJgAzaznRsrVUui3IzyCOXngv/1H8XMGbXSLeNUAyOkMD41ZStP9k8E
UtBX2Q1ZHyJo8qq09an3sd0V78QamRRu+HephQjSbpIIRPm3Ffy6eP77H7Mp
/6V/PsEKhxWw+S/OOZ89U8PW4lNzKnD8RiBzeigSCgYwGQaDp+PRAb7L+x/m
Tr6vlH8owNUXBC/w2VNjOT/6VTMTgfiFSnYLl1aigO3tWx9jJkiFrzYTtGA7
qAB04DD/zfWraf9W3YEmgqmRE/FQuwzEUTVf2e73469fjzwpBWVq1FSoWzpU
QAoycJktZWjOOklNj3P+QgSqoZxVE8F/zJmhU7+EFyQavj6aof1l1ohniQXO
EyJbzEahgNn83Pmc+llLXLSZscXpMOx2IX48G2tZGtt39UL7rStjQGtlM2ts
d8iO9n2n48H7X3+K5R/+6qcs8//poy/LgmzD8jMndsvG75x7V0Q+8ubZY7z7
aneL7Q4R52EzV6XpkPGl80cqf6iTsUxqtOHfpUbicVt6O96vZrtm+58q6flf
DPtS/m3CoZ2lwVWhABGIIHC2r9bXVmv4aP6A/+FgUiwF2GFuUYU/il3hSysL
wgUlD2EjAh5SHltZ5gHviPSywHMtC/L4s/xIy/PypL/VfwLhAVdP9OtPscy7
/9L6i6oQgatfyCmJ0QEZLsDvi+avJguM9oiZYIveugSa331N5x2ZRDAeaJGW
1FLanElG2Ju+LeWgnJ4cVJGCBftwgZ4dILOSkxOj2AUL87Oqy+jaCees0kUp
jsPowBzwOEmJKQhBCDtwboD8bPCZbN+jud4HxX3qPSzbcqI+fKOingnmHcKP
y1eWm4FfmeXHD+3gNpAF2YZlbgMW3v9wAosJCkPktrlx+yZEwAYmFwgRyLGa
tipNE8FmYgR3cBFBwTNY4PS9fHwl5Vf5n658bC7HtVkB46kkj14VvzUIXAci
0IKSj42AmF2JUKKiw92hQEc6GXNeauGCc+kSXGAjAh5e/Zzyn2UWoIZP/7sg
G8jjz7PPMofgSec/TzovQ8no8vUV9sDGGhbKJQK0X92QoaRfSGQkuDreC4tA
1YUZE8cAebR9hZ9rurf0kQbk+04dB8mlqPnI22888ePHdrzwPPLa3t3YArqV
HJuxz2CgU/ca4v4E+eEIMUNu3fy4/cRBbAEoQI2YsUwYjstKsQUuX1pipe4m
hHEhlXFaBsMhQN41J8pFAvswSYo9OyUF4iiXDpxEwO+LklCSCLgZuHP0ejYT
S0HWuxKBiGTPNpWBoIlgMw2IYtFzW6L16MT4uY6ThyqQ460tRw//yintJ1pk
g9aDrxzb8/+QD9of9lD+F2KvVKD8m6IoYGNSqDgWgFCf4VefAhE02/hRWxej
gsUF0B8o7fEpVyLgUUW99yYCNpAF7RPALuBdXpoqX7lEAEhKBwnVic6HX0jU
dfRt8JbjfvLJbUAeanBWnOn4Mv9T4yGZeskhhAJYiHygtPc9u3a+8OyTYkpM
BVtkt/zpqgpuVO4r1uvZx6j9w0MD0kdO9mmeD1TCelbKxJnRqYSmAJial4u5
MQl/S+mErkRbzT56bxcnIzShp6R5y/XIkx/FnpE6GleNSywI9cSdeXAxstNj
LOnNa5n2o/tNIphbXuSOmshN2YhAViJCBHIbfFL4lDuHleIa4j8f5+7S94wr
EWhpnqq0qhBBeCTUtLmjKrVyMS3XFsSudSYhXOBU/q9e6KzKF3E2iNAgwAbT
i9Vs8llxHUHtZCE3NjLYbVt5PpfzdhA5iYDHVkx4kwhY4C15V/Af7U6UQ+UA
jwfl44+0PM+TzkHlwa/MItDw7scvpHT+UTVZDLwCJQS0QWbUdbNPUTHBFoAF
EuNxGXwpC6yBDiT5UyZILszPquYS1k2LRv0bt79rK8tYBxyXPUAoUADmEowA
6UATWB9yRMBfkruiybSfC6IGt00MpM4dXDLmra96e3runz/78PzAE/PDzy2N
7VvJdnFumDNiH6lm6aNKN7h1ZUxtUDz7bj0Hg70hlq9JO5qO7fm+SQQAvvz0
4uTRRMBLCQcIEYgiwX9sB60YyEr0E+1p9CYC83HLbSz8rHNMuSpEAGI07VQa
yfyR+iaIoNZxQ4igWsq/lpXLM04KsM2gRIE/c165Vqp2YzRlJlh/b4fNR4RO
BfLw6BX7iJMIQskoD7J+0jUR8PAivCtEAOZjAvBo8197BtD0eHnzk1sVWwTr
jBB3JwKQP9TdCuwjKNto4MqCyM+BuqifGpbFLW+6iWwiSaGYAxwF6H7oHx//
+t1/wX+WxUzgKCyMB1raTxxEtEOmcHtJeXu62oKBTo4O6SAKmqzYsTCjcAEn
AJ1xwjL+TDPdyGS6rElkufAeU7EHpT3cO+jw4rOSCchmJ3DowMMlW0ycRCAR
YbnOxVxD3Aka/FnDXcFLcQ3xWZ4fExa4vB5uH95azASnRk6onoQBVfGdCrdn
RlXDWBmFUIcnqypEEAj0VjzpqdaiU0ALdSGC1oOvFDsTEAw+kiICnwIF2PBf
V4c5OyBV94aBCEaGQw3/+Zy/prOX0bl0ziNS4EoELPC8C6YVcw1BBBIpkDU8
4zzpEkTGaghn4pskAoAUMdegWoMYIDA4LOfm/Xf71scS8HWd/AULrCzPPfiD
ByIfjGILfO2rX4YI+A+2s4b1mAN8HAHGAaKPrNlk/AeFZJoYwimpqHGkF0pi
pXiKODegWIYgA/h8i9REpOJJxHpgnAimQUlX+UhwNWcVMjW7N/DB7PQ4hgPM
Aimw54UzD5akBlciAN5lznIxIuAl14F7CUEx4MaQEBL3ktibG/XD74tVgnCR
EU4s1/vgRM/PpSSkWNCfb1d1AyGZGGw/edgmur7+ZOsvne/6lN27XpQFDtFw
rLCJHtpSqAsRcIhiZyLhXTR5P6dt6xSNYqBDA5Kz6iSCCpqFegj7j0bc28c1
VtLJmI3yeEBahmeLoUcxIhB49yACcRzxFh+RmIKkOMrGEi7cDBGAonqmPAtd
76k+DwI+5h9WACvRxvnpwXAA+cjbb8AXWASyAZAId4DMthFgQgQeFoFklkYD
hzmuoDGcku17NB7aMMUSqBfDRLhJuICjc0QoQLJP89Z0zrIvwsyY7vu3Guod
fgnOwgLyvge4ATgliVCYRoHcDM474cblMUUNZx8GfrWvaTFxBMq4dWXMlj6q
47ySSuqaPioaAv/RB7idxBDgDoFHuFt0NqmNCFwFUlDzQAOrhdhSf2dSAyxc
3Zhye+1r7dubr6WGJgIWjh7+lf7F79/31NPvvMR/efnjwzse+uVPWGClLCD/
ePA5hIW/2ftjVorIR1hjbumHCKAA187/NnEOC2CNbhwnreRc1L/FdAVNJDwE
2poYizT853MVZ9R4YDwDRLtubCMCSQfVy0IKPNGy8F0rCsCyqH9sgPKvX8pb
rNF72AwRKBNgIgKGd3adAlHR0pFbNz/+jTVNBuBVHpuj+/kP5KIDo5mjoq8G
mi+oGAEILLAsDnwIhS8LmLOlCh/MJ0HL1/bu1jEC9qljBAePn/zk5gI4kx3c
qUEp2rXfxgJ5a74AH9T+KI6LJSJxCpUsZLHAYm5MB8H9COTCB82gAKryhfjx
vJWkCheUNG+1UcBDER3eVFuDOlSaeBDBxrDIvRCWnNX85ClpUbvar2lj0imA
cG25tIFw81rm6nTbXOjpi73fW+r724XBpy/GdqPz17ylRhMSgdE+1CSCn554
5de//nXo/Orjj8p3ZLCDBVbKAjKWTSIs7Ol++9drf7/qPwH+zy0vYA/ykrf8
WgSWSu+htzspQNqEahaQhnLOhqjlFjj7ERRv18kCzSAT8QFzIGZB1SOo+ciu
mlJ9HnOUOjWJ2DcFgK4gfDDQCYCb+r8grfjenZ+StEzUQnkJALIlAC/0IX+X
Ly2xBgpg/wA4b0nWqGQN8V9eKh/USaVw6tDAUt992Qllm3CnaQ+/pIkK8odD
3SpSPDrAziEgyUHiHPJWTUFHNOO/LjgbazE9NqqaZu3qcWh+XL5CyXbfEing
j/PZjF+0Pr2GVNXb0jA2CJbI0tg+bhiPlCc40TQKxgMt+ltLTHkqqWQ6M+nM
0rl1JXHp/BFrZNXf2oYOOF1hnx0iMFVoJxHwx0JJImiP9c3mc/967D8QWGBn
x37WYxrAI9OLsz6JgDNBXNs+uFoB8pbJAnpCva0tai3CSYl42KcXqyHS32dP
xDo15p4+VE99D0BDo/MYRo+iLoFg1GmZ3iJ/LLOG9VCDh7MdwwewNcfWKNU6
0gsdgNI621P+dHB5INAL8j/x48ce/MED/Md+gR2UdTA6MHh8hziFQCSBYpmq
KTuXtFWhKvgFvNUsxj4lWKCn0nNWPi0CW1Ag1/ugntfJTmA6viM3PBekxC06
OsA2wp4YCBXfS3W4Q4plDaGxwwuugQxxFolgGpifUk3RF9OwgNABkp0eW4q/
Nt//aH5j5lXJmMhnhwjMcjAnEVxaWQTh/2bvj00iAN7R8xHUfiGCD2Ym2QDM
PzXaz8ayB+iAj8MRPonAVebnM85YsH7XZIHCxnEGcIFuf1Hd6IBINDLUzLUh
gA+Yaa65cS0rtca2mFr9DX8ealUPO3lKfh0UeJBNXD0osZJ7o/+AWb4IFOBn
vDv7aYtloQOXIoLzQ4AhuA1FqnQCI9YA8uvE/paObqkXBkLVrLFAi/hnVKqb
dcIS/IUOgFn2JvvhJG1GihzlN1a5mUSW/VDAYjZqCwrMBp8xNxAiwLgYmUxj
cXhXyoOHKn5tkd1mjIImaUN99UK77eKo2IFFBLHT/+ncHs0f8F8cev7Kucc9
YB+jANMAA2Eu9PR834O8tBHBD978l/Vc6Nef4qW5IMs2H/iG+//1p8yASNMS
QcHwDjmJADAXb49JBDdufwzCIzc/uSVEADVAAW+ebWWNthegAP2pCojgYs4+
L8bE/IKDBWwivXqkHXEtBqWBsw0ft8T3kqsk5bFYKAhrpItjZ9tRm/cACgAn
EZML6vCYF/MAY+OnB57nPKEAgNd04KBLA3pCDQAsVoCfrBtJ0S863X7NmSMu
I2wEMRB6u9qOB8JvDSmAffPUCAq/hJjFANE1XMDOqt/G6iDU9V6bnDC2ANfQ
5qqCL1RPCYvUhCZK5otCNGaqP9STjbU4N+PbIdFkenxqKjEe9+4gJHVz8nUq
NgrKHUxz5O03Xtu7u6OjHfnFyz/3P7GipGAgZPseNYlAQskTPT83b3VFGRak
mzfbleB6OTbUsBh5Mff+27lUCHzAfDDlUMsbJhF89PFHFy1lmOXusVByXrk4
Yh8mJubSsgHwCCqC9mwj/nD+2IC33hvpkZd8sPmJQBsFTiL4x4PPged8O43w
rq4hLbzEOviuFSz+7lrs4Ie/eqYsInCODCuXBZCT78+WHHOzGenr663PIE5X
wd6Jj46cPdMbi52bTESRibEIa0bfH8ZUgaRAKgANAbXMZ4RljAIAU3PBJudP
eQiatgiQO5cK8gi7unxvxHdyVqbHRlkHR/dLdbDgpxCBxlIWJBtflmU98Mga
RMcIvIX9C0hyRBjnjf6MGAUsr+YjWTQB2utIZX5mTAyBaDQsKUwL82p7V4Wf
K696qVmOI2iOw3mcjK1SQAUFMi6NqU2RoZZ8BY+0yVWjoLBZo6As4Y7KZJLC
5uro1d4//LhwRg2RzA7uxBwQTxocykqkWN2cUvv7HwX8L6Tj2mXkKi0H37IR
ASD2zlBnSSL4l2P/IVHRF1S55SuYDEsreV6+cbZVweBbz9SaCFwTX0uKuQeJ
FLgSwf37nkKx1/jvJAJxHMEXAD4LmAZscP3GR0IibL9uQ5UiAg8KSBsTJHWm
aAOhuEY9qP0Ian/gbJ9rfyEtq7X5yUg8NhgMBlSjhrVEa+ECP/3oNiPFpmvx
FNsMfNUPwfp/Y2J3tHOXlOKamK/FhH1RifVKBeyTaUFyTB5/fpgJ3QgChfng
8ZPaO6QrlFcTUK0TBqh7T74OSUloGG1fWkl41C9z/SViy/49jAJb4wgzKOCK
/+A5urHYAvys2AUegWMdKdiMUVCWYHDJVYUobf7Jakk21g4LSMWBt9vnYu/3
LsZ2O6vAri1nr12ettkCCNfznUMHbEQArEkphEkEmAkAPsJKIQIB/HB6nDUa
9lkIJqMwgvaZ144IKkt81R/3tgjE228Swa/WkgNR/kX/F6cQb03lpoF9hAVe
spK3SrqGnA2CbF1DeSmgpyvI9JqGSK17UHsIyr8qVPedCpuaiIAY0ldH0tqB
6JXlubeGvMqNNynS/b6YZwYVGnpSs9QndgsL2ATghS9sFGAjBXP9qoY/meZL
SQMfP0SQX4v2SlQatIQLYAFMmN6uNq6Y4CdoNn92tUGWTmGCBVCwV2vNPH0+
YC+0AjBy/W2FDMil2XG9cxHwzfuczUphWZCyeo/fQhsFsFIdjAKujHAl5pLy
v9XgEJI4Ki34bBdQJN9372LkxcrKeNs3Rs0gAswBkBzwN4lA8E37giACgJF3
+c/G2l7AIoBHYAez6UrtiKCCeJ/k2JhZQ+0nWiqOG2I42CImuqbAgwicFOAU
CfWaW85VOmupWlKfHtROicXORSNDZTEgkAvc6ZeYBqoNjmUUlGxMWpkUswUA
TJATLDIDtfDC5LsPu7qMJMVIQgOm5u+kAPOl/+QctsR2ePPUCLCv4R212Vaz
BobrdnM6eA3WiTtIDC4PLlD9q0Pdgop8/Q3vbqwX05UC3qLNOpMR4CyPAWR1
NgrgHe1bY7nqHYGAd924m4Ubl1XeqSqUlkZJw8+tbG6apJMIwHY0f9AehPdw
DemPyBptAqAY8/KNNZW42YjAeY8db62cCHyRhUEEcJCzQVAxX5AZONYrGytV
cQ2pUriZRDoZmxiL2DL/bcIVwBCorIQtHtlwqtgIaKez+TmPcuOKxWNoHYaA
NEOTP/Gui+cctM8Nv7Tkltqnsvf7HpVJjk7TwKfmX1Rdn1QTK6LDPTpwbIYq
pFoZnNdEMNp3AGRLnx8yd6JaUlizaYaHBlhwnpUOOrCwTl7TYfP7suw6rdJF
rPyHvJUUDcbKSHoZo1YscFznSAHH0g1A+MVtt9/mZTEb1S27bYmjVRFXImAB
rR489yAC7AXWg/8sYAU8fmgHn4VBWLARwcnWX9biyleLCEzXUO2IACQ3PT82
L5CJ9jorxlY70AyCRbDJUmXwH2xPxMMsACMjwyFeTiaikpUqk5fV10/G5K2K
s1UlqqhfAgvgFdezNTJbrNy44gMVg69Qd6tmgdu3PkYJB5FMYJeFYjFllULT
96h44zuiGc68pNoPyDsLuFCbWYmwB0RyqPJW5r8MHUDAMUQ8P729PazHZvHw
23DyMshMGNY5QIH9SL8L6EaSi/iaZkxThYazvvJLPcQag1g0cJwaD9XNKNAj
e8QoqPpg+vnJU7qCYGqkvJGFfqQYEfzwrWdufnLLgwieOfHKjVsfi7/oBavJ
RiAxIo4jNjZdQ8f2fH81bbXvwYuRF69mu6rSjM525pzD00dflmUWnrEqwv7l
2H/IwnetVgBs40oEtc4kbDnwK5MCbCyQ/TDpSgEs1/TWrUCikaGKC8r4dnwc
eLc5eUB+gX3MDYhmeKhfkoI2X7lmGwsuHQxgAWCwWhdExQWKYJRqKL3mfoEO
2o/ud60L1oxwaXZctb7ZGFP+aK2kVEK6tgiyy0Gtu8u2cnxqypwII+2gZQ8A
qfSRky0lR1Ql5WYT6YHndb6i8EuxDFUZWGmboQAISw8KldcUVANuTKbL9T7o
UWFXlnDcYoHjatUU+BS+puYCfu7q7jwba9dEwPWu+snb4NSsI5AA6HeL1xFI
2239loCtbsdnEoEzri2h7bnQ00vx125dKe+Rl6IJWwUEVgnEJOemoxvYNbKA
SHRbUGiDEjXYLQNl9BwZLaxxHT0jcry1peTkGijg4IE3gThXCtBuf87KzB2C
AhoYFC4mnBL4DGJXYBSs5vwUj+7VQtDVzYYzvASa0B7fGprNe46t8S/FQgMI
UCDRQ5WoeXR/GVqum4GQDOzTMwvKFe46GxHolhTRZNq0UMwBxNlYy6pF0Pco
1Cm1ve5EkBuTuLyNHcRt/skntweP7zC/DjusCgVokYbYrj+QrinYZKGxH8Gw
khoK6XpX3Z0vZoLrRBCrfI5hManMwVKWY8RPb6VVk6H/0Uvnjzh5QXVJynbN
Dz8Ld+iKCScRgPNYJd5EUJB8IUd2x2z0TXtKs6fd6g3Uzu4QNpmfX1VOAFWT
AvT6JhQu2lJW4XkiHvZwWEk4no11IADuQM9vSCUaOrk+LgsyMKuKIeNi0QFV
n2vhj2StOFPuXbV6XqJ7g7pAN7cfavOGBMvwHvOzpsAR4vxxngl7A+0ls8hG
BGIpSGFCfmMfCZMIJt99WIjAIzFJJhfr0+OltM6LRsMry3Pmt7BVDVdLOHnX
wLHNKKh4ln1JkQPJL66iUelodfd/4/KY7jKU6N1X9fOvAxG0HW+5Ot2WC/5U
mt25tjxy54W+Bz0+4iQCMB+of+bEKyYRqGbgQ52I5D65JvjNhn5m7nmu/7HC
2iB4nnSZlm5+0IMFXLtDmKIL5Fcuz5i5Q83cuqFgNDIC3kPBQDQyBMinJlRV
V3x0JBY7Jy59bJ+zZ3pZ4CXrJRDQQB8XKoSZywcOqFYJU1MAIwC1+f27EgFI
iAkgmAA62dNmiosQgcQCBO1tfdgkv9T5Qek75wrUEhGQ6mMtbM9+uBV1Ywrt
FFo/mcQR7cbpiGakyYPrOUuYgI8HrZo+WZDE3cTICTPpPTf8Ui1YQE6jWHtS
0yioUYZ/wUpOkEIMzIGqBwhEdPpouP3lqu+8Dm2oWw6+BaIuTY9qmZvsmgm9
PH/2h6aGX5Y4m2MI4E/MpS/mcyYR3Lj1MSuRpZW8IoKN98+l2fG5vg3VGfMj
O4tdK9XGpzhcF+sO4fQF2SigqcLBHqIvGnZBdCQE1EMHoD10wHcv1jqv4QK4
mfggTSz9DLj3I5K7YrupQt2tEidVQcOj+/3n+djKB+T/hfhxzQUsAK1ah9eC
zi/thlz3mbdizUIBMKCri8kcKymSGOnQ9Q4YyACdnqosyK9hXwYo8JI9mD0x
zMYIxXpHVFGKBY5FV5e6CYyUGhkFCvzXRjmnHWOSqiLrdQRnXk+Fq+wdctbn
osAfannjrTf37nttN8ICL48fPVisVvedQwfYjG1s6/kIFID09vRIFXM6NSH/
L6Tj2emxfG5CeOHqfDz3/tszfY962Au6S9JS/DWpmLPZMkIEkrME+BdzDW18
RqK2lOZcvDVvTaspS7xLg21BYTN9dKtQgIhHkmTDz81bzEgBQAFqnc/lqmUU
2C5OJhmR8Sj8AYx+usaVFO2l+ch34r1N4AghAteRwQC7bSyaIoLRAW0UyHFH
+w6YyA93mDPINuxkZsz0a1V2zmXI/OroRnRy1cHVETgGmcUoyOfnamEUcHTs
Pp0uW/X8ZJHl+Q+0d2j0vV28rNsTdO3yNIg9Hg+rRi49PfwPj2BnhbViHIue
Gx7q92h9D0h6NLiAFNi/2AvwwvJSgoWFTBB7AV6Y73uQ/7ngT6GJxUzEdhRX
IvjuWsujkkQwn+w2k9kWeu5dyIT0feXz+vikAIkUawpgeWtRwNrNUJQImtMW
0HJpUSmx+iX4zK9wakylD1XrmdVJpJgA0paN/2YKvVM8LAXnW7nhlzajXUs4
QDxCtrdAcmfOT96qhpZSaJlfPz/wBPgP/nhAOkQADy5eGDX1KzVufq3nao3E
tPhM76sWm1HA/VDdGwxNQ2zA69c/UnMZanYnx07/pzYKwu0vN2QW8MV8bnAq
B7Siz0MHAaUS9EMKJT/I2ZpdsgX/xTqQZRAeRJ2ZPo+wpTYcbKxhw2cbEQD4
Urxw/+tPscx5StRYFr5rVT0vreRXb3JnaPhC3Ly1Sn6pkqXBOiJge9kkpWEV
yNYlgoI1qkBjPl8E6MMcqJaDSPYJF4RD3ZK4XixGXFKKsQPrTS6QeEFZe57P
zXCGznamkZGQzSmkRQ95EWAXb/9qdYPbwB2+L2Rh2gKwQFmjeSoTW8EIyr9T
l8MokNzOy5eWqp4+pP1CHLrqYWJT+Hbgf2O54GT0Q7Eu5SWaPFxQxpOynNV0
IEQgyI84Md9pOJQkAp+Sd4SGZ848tvpEJDM6B9vji5QsDdZuH3PLLU0Bq7/g
ViYClEBzbI2abz4RyVuFxlVsOqFjxPzcHR328Y6bFxsX6DyiknL14vqzI8W5
Uk/BMwUnSi87aILNzJCH/joscCxbUbDz6Gj+Ez0/H+07oPUrjz5yxUQqAT3K
9LyJoGB5//h9bYFjMQr4xaUp3GJurFo/OlBs+oVqfSer/IeGckHLudWUA0wD
pLKqz2uXp12RX6Zt8o3kS12/Mq0jCFpWljYkn1RGBLbQ8IeD62kMUndZjAjA
Op8UYEscugMowLwItvDoFvJxdbatNx+TSAFqtjSdcE6uqUAyydWObSiHR48c
qDjtv5hRIAhp+u395+E402mgP7hgeGgAG4ErwHPNRZi1yis042siAOhUIHs6
bCtwMEft2BKcKi4Zk1OVc5C02JIfcfr3pOWgbT26utS4wQVVbAcUj/TKoORa
+4W08L0a6CPSuWfvjeUio+FY9FzFu7qs0uwnPCZsivDtbiynrs7Hq0gEztCw
FsyB7IcK4mz6rZ8ecR52Qd1+oHpK85sATuF2stWXqem60TBPMQoAYLjJ1hNg
i1SQ5bKpcKi7XPB3tp7YIPNJDWtwgQm5Hpn5kiDKfycR8H0Hoh9IhZ2ZWQod
aG1c+9WVAbXWRFRN1904SoYTwDrY4LbaRMmYfE0hgpzyGJfoqlEsyiOBY9tK
1YnUaqbKjw5oVyVCFOpulZZ9SlGsTb6QUxrIBYNTueS8MgdQ1wOBXv5vcodY
B9pZxIIK/S8X5WgOZztiZYmvLqHhjWKWzfrpEVc0U3SmkYMDtsVV0H5tA2v4
pTANgB1xlSCzFRUds6uOk4dFf/YzmcsL892Ex9w2jqrYnHdTRNUXt4/tbCMf
jEp3br6vrfuEJgIgTsPmBmqbGQP8XbunfuSjp7R/Iigtnk4JZ3vSS4sTcIFu
wV2VYEEw0ClXiWP5HDpWFWmsXVCwMoUupOPV2ttl5Us/b4YD5rIpKx9s2oMX
CpUOpvF2XWrFydYjrlwK0Dus5++yLX5EGleaa2CH4NoITlARLtBOEv+CKpi2
xvVKPdFmkNDODmuzdWyyku0yodg1lUgqgiECM0YgplA8Nii7PZfOmUSAcaSJ
AANKiqQAOj2kXstcKmirfUYSvS7tvCoggoJnHyct3kUBEji2baMi2ms9oLgI
ppFYmWjXUC3C0CVlAxe01Y8LQOnhof6q7xbM54Y3GUHzAitlwqY3L/gUHRp2
iqSn+qQAroNqp7yxQRB7WN/bUtO1jNuWguRdhLptj39qImLml2IdyMh7/3Sg
ssctPRMTkp2Xi/zFTAPv5/rG0rBtRqHyyRhKjrhW2LkQgURRZZSA3glf00YE
OgYkGaQq6vHpp052s6WJ6jSh3PBLm2koZ/5Spbc3PGauAr87q8zQ22VcAn+q
km5zLaMXc2MSG7p962PMjfrfzw3hgkCgt5hLv1py/YoapiYJpc4MIlbyVsW8
UJQFlhSM+1H4FeBfnrFRgOxB35zbTqEmFx5e2+Qa4MLcgOcLVbllWLlKBsYz
MEIxwLm0qLqriTkgeSMVjwwwP+izNRNnJeNrzXwel7z9+aQYPvCd7YuI1aD9
QvCC+UHdP8fsmwcF2FxDLNtcVRXWDhiuHo+GfqaUvFCucy0BfwkcS6PsxGjl
/Twl8aBuWUOu90CduSA1EfVTOFBdAfA9eGE6M1kWL7jeSz7rwpwUsOoFsrqx
rRJK8dq6bWk2UR5yK+sbkET1dW7AI4Z1IDqzJJraJl2OBDt7u9r0eC8JQVas
DGsxPTn6TMz5XDa5eqHdZhoA1Fotl/ExiKsjRQLl0AHfDr6zwa9OHOJ7qbao
gzs5kC06IEPnQX5bnX6xcgOfX7xaRFAoMtcSw013jQ4GOjfDBeYUnobcyfXk
AsC2rMKBGonMXxY/kjMNdZ0XLk+7Xgo7Bcz4cvtzOFuDoGLJDA2/PttSlqAh
d73XBhGgH3pstrI8JwaCOE9YFhLBjtBzqWCBsjoLFVOJnSwg4iSCDVC5sauD
4LOCbqsvqM3eKbZ/Z/a+pELdujLmOmfZ5oxSIxXUzLX7TPPET+EbX0TmjpnP
rM94sZ/eQcXmWoLbkuglXFBxzg/7kduAu6h2DU5LfsfYqT114IJQMMDzUvXd
Li8l5jLhihVpvqzwgqWo23nBDD3LZSmXApYX0zYKcBbjbxPBlhZpFIPCXHJL
wErTwRv9GWyBy5eWotGwar/W1YaUmyxkbu8xclGNvL/m3g3Dhpa58B5TXb/U
/xBfLTHSUTJP0qZ+A+kAOMxiMzQ2ZF8bRQQbvp1VbrCh2MFtS4naqxK2Ik9N
ZYlDfBFbhpVe76wy05mfUv2h5sddsGec+hGdOLQwP1v1IZVliY0LbixXOVKZ
nR7bTOGAh+RSod6eHgRzI5kYrEJW6porydbXQniBO8dnUcD8fMasDs5kkmY6
kKtcvXi+gffAtlQsOpHGT2K5+IsOHj/JU48eqIqITx7GstB92LxUBas9mhPi
PNRI7RQq6he6uME4VV6aNRdNtGv/eNcewW0VxgWQrSnnpq4ou5WdAINQCZsV
Sw2VYcpKyS9VMmyVG9xrEoeqdzA+5edH8UUEa4lGYlbIF3H1FzkDxyC/NIaC
0CXjq7vzaAWdiLANJV5ci5E05Uqse3/tuGB4qL8WDfOtGp8+WGAscibU3yuM
wEJqIlotu8YWYvAZCzAny0iPON2Q31u2w8RbUQAHbj6AIhzq9jZ7Qaf0+SE0
QFgDJVCSRWGEgmS5WOPUdU9mltkbH0FsczNNePdgH72BRxmsQF8umzJrmUFd
WCDRu88VzwXSVUh34ImlsX0IC7wshv834jtvLA2fOvKiT2ReFUe5geIRy1NU
zP1l++7aZPAQrq1cQCEOaaDhUWWWGF9PfVcufWtmTWQkJCmg/KYgebngwxEl
DUkajzf8fq4RFwCkoWCgFid8dT5+9kzPULD3w8RZZDpxFkYIBFYZgfVzmXB1
PV02zLe1AwLwbcPFZGTYelOF+eTsXGZ0eob17rflHVpKfMeLTFosWPkkZlei
goVIqfEQ2iMQAcij+4kCKQDy5qmR1ogdqAElmdIFI1SrlYGrFMuxhIY4VYXz
RXw7JUWMCJC89+TrzsQh/+IsN1BB5Gx5ndmECiWOIP395JE0LSmfZcLyXBes
cfPmFDl+XO3eKbfo2Ewc4sqzN+6iKrYzqkDgAtQAzQUf5cc3v8/xeDiTqsR1
VlIAfwA/NXpWiEALjIClAEcII2CPVCs8oRF+5fKMxnxpB2TrETRnhJbUvWcZ
BSyHp1UOCVywbRTcSWJmkGLpoysKyEgtqmpcY5UJ6D90Px75kWCnjDY4Nebe
ngIu8BOorUBMNdgm4qfSjUYXp8MX4sdVIwjl87/XFkRgvQ3/MQ1ywy/pUa06
cUj1aqs0FI4hsDGIfB9mSI369pe8bhgFfBfdKU6Qnyupm4RUUHSs249L0yH2
iZKgqpgb8R1FbHbB0uym2qKikAPItQhAY7CMDCrl38YCpmTGNjACy/ncpnqJ
i+enYAwUA/9tw8WgAA8wFyJ4/8Mc26zklQVhu+crmO2+LQ0X8Q6ZZa2ZpGop
zLOs44k86fO5GYAdDAE0dD8B6VznWn3GfoIVtWf0c8IFR4Agb03GcZ0voOXI
0NRguA+onz/78ETPz6Nd+xUsWxEE1VDU4fznmwrEAY9o0ZURQV7mQA08AdGE
ulvTA89LXtNKtqv+v7X6FtaUee3Mkd998cKoLjqODveUlVAKj7AfbSquJ5LV
bE6NHxntO6Dtgg/efSWXClW8qwvpeI1qB2AosB0u8CACkxHYUhiB/yhjy0uV
2AjSCFTHi22B4zm3+dc2wRSHC/L5dQ0QRlBTLLfNgS0uIHw0GtaPraiIgoHX
VpaBCPRGTH7YwRmLlN4UrrtlPyCzM4+9KmJXvK1kUbigOBpPwFm6pSdfudgw
grwVd2BLlGeBTVBOLXuiva2RtVPmJ09BBIg2QBaHflLPJjkQqE77h+IhejNT
yCw65hcva7gAdw57Q0nguomX6TdWpXlj84jOD70z1vWqcAELU9EKZ1yGgoEa
lRKnxgdc/ULeko73iR0hjJAYDV67VIa6ZQsBmAHizXwX8B9DYJsFtrSoVmxq
AF+ksPZQa6cx0FEymeTUWK7YaAPAR8Y4Vv2cbR4hHgw1Z6GEZj6hq2CcRCAj
iU2DAmzULRRUS3/PnesT88j5kfk1Zoqpml+TOFKfX3kk2CkNlIql/bOBTgHi
Hij3V0NJ4IpxofRRGh4+vhDv1FyAgYCZUPZtNp+sRWehguUXGgqW8At5Cwwi
eygr9dRJAXLPN/aX2pYmEfB/eGiAW0IPtJLe9XPZREkiAO2LOYgKa3ZB1X1E
Ej/NW9Pn4RrvIhcN9XozMJ8P2gwK1vBf+5fYXjtMSsaL9Yl5VwGAwDy64iBa
r4A7+/CNy7UNsC7mxvgK8OBq1CMYcJ1rieknMC6/vs92HzbRsRVupJqOLfMj
C5lgpGOXDhmwXFYqUSx6Ljtdk5+mLL+Qt9hST6eSMQ9Lc4MjaK0uYLtB3LZo
kXYTKhvcSiwEAzW+8ZbZocgp53M56UTh6hbWPqIqOo2lZtY7KGATjfZ8F1mW
EDDWgWlQmDvUmCYa8uaJQJiLw12IH7dNN1iM7KyRU53dHnn7jfRaV6h8fo4f
NzEed7Iz9Mo3FYc//ytIKEXCoW4ZZIwl1ajWE6ZcnY+H216uIHyMgn32zGZ7
tBYT9HlwOx3v2zwRmIxQMvXURgFKahDI25atKxI1lsRCHmRb9khidAD08EAq
uEDaULiOuQEeo9Ew2AvXiAdmM8ml3LrotFIk5bMzj+n/4bOi+avK6N4eMYVk
g2gyPTC+Orm1Oz599MgBYPPWzY85bY8AhKk5r9Z2FSmgM+0C6HVx+Flbz7qq
B5FlVKV21wDvEsaVimPnr8A5s73kCVQ2xUaOKIfjEJvpZVQtwQow7YIP3n3F
T8hgKvlBjcLE1y4lAWpYpoos4GCEbtfU0yXb8O5tFtiWjcLz2/VeGxj4G6vT
mtMtgGIfHe7xqAXWHf6hA1dPEfvknpSEVZDQynwor0ENwMWnzHwknWMvpGBW
opmJ907rgJ0AyDrXlDVAPTQBYXF6vAVTcJIsAJ4AqUeTbVeolNOQDaAGG2Fp
LrixNLxw5sENWawDT1QriMwJAPtSMqaDPvpsXduTFjZOsUF7DAbKnjXAR8Qo
EGOqgprlWsho3wEzZBA7tcf7OgfU5KaaRD8XMxHJBa0REYhI6qnQAQYIBgIE
ZLt1V5a8MkW35TMoYLM4W2amkx7J5LPpKDpeMS1Rigv08Md88bkG7EHQWHz1
JU9PfEGAJ3BdgY4qdKDwPJmWkLH4iEyPDQI+QzSIIoIRxVZ69kqou9WVBVwd
6TbYl21WZ9OvEZPmAk5PlTlvLDeoShAZQtcswHdXIzg3XjrX9qQFK6FUjSEu
fPqbiqbYKAI6ul+oRBWhH91f0+pC/3Ih3ok54MdNxO8S9uzHuBlBYwecp2vJ
AqZ1YOYmSfK/UIDO+Wz477ItTSI8p4A/cAcs9Ha1eUcJpVtdsQJSbAEsAnPg
i7OLtRYQgydOAr62eZqmgJ8C1EjFIzVBYMBwYDwjLSk4one6KSCJgSCJNLdu
uicOeXTMKxZEKBg0IZaRWO63roxhC0y++/CxPd/XAoR2nDxcmRx5+43X9u7u
6GhHWP7Fyz+X9eZYyWLtSQvW7DkUeyGRcKi73GGUYlbIx6+tLDe2rMAUW8gA
Xjg/9I5zs7BlLdbiBD7Kj4f6a+gXsontWOaZCClsTxDYFi0AEhTAA5vJJIGm
kh4bmXdma0lhvotpAP5jFJgGAiuLoQEojYYMONtiyqrNxVq9sDJYoh+wq8om
LMspLczPYtRImMCjXpi3hDUEDD/974Jr4pCHorvBKHCM3RRHVsEqwdZcgLQe
2FHBRHL/ws7hAtuZOOda6rtCT7Ept7igYMWV9Me5mPUfZ+khZicKZzZR7ZoL
IXOZcB38QiLTVgsL81gNv/Lb0rSChq+VNxZknosf/Q2Nuuu9thJjJa0W1tpG
aBmeLWYdFCzNX5rXAY8KSI2gcEF1gBw4MjQl+ylWueAh0kZbAhngkkdMGVsA
/oIFuuPT67NXHERQMrtShy28NxMu4LKzDEoD19/9zx/VSNi5jQgKReZaitiK
C8rtI6SGHRgz7JrEKBCZm+wy3URwgY4gx2ODVRxPbwoPi/hq6mMO2PxC20Sw
LR6iQ3s8s1INiiInuFRSpCWFnwdcUkz9YDiIJNhoBoU5BGv0fMmV5bK/JscV
4eMYFB5EoJw2U1NiL5ijyioYqelTlEfO4oKGEEGheODYWVxQbnxflZVZsQaV
uFjpBJwayUf5cdNNhI0AHSwvJWrUXKhgjaEJ9fcGAlUoH/AjHMjmg2r4Nd+W
5pRLixPShUxayusW9+I5sXlpVJqlW74Zb0WHe0oGBNkAJIcOfI4/MDeTMAEL
+fyca4aqT1ET1vL+BsRbojs2S3lULVhARLjgyNtvNIQICkZ7UucPocoorG4b
FXSrTowOCI80w8wCVzk/9I5pGsS694cCp2t0LBlDg6JeBxbIjNn9QttEsC3F
JDUeEuN9PB4xFTZx2otaLgI1RKPhYgoh4OARQdYCqkAEFSC52SW1KuLdGkgL
+rAk1UvzHNbUrkEQP8SeXTtNIuiI9O5o3yfLr3a3ICy81X9CFhDeZRtZfvPs
MXP7H/7qp++cexdhwQ8RSHtS18CxFBfoxiNlNRc1ywp6u0o4EhslEkGWqMFQ
zxGEl6ys7lHq7BeS3FFbzVrDL/W2NKeo9HhL2QPGnYquTsiXRP2Se8sXSao3
RYLI5Z6nmptQ1eIXnxMhR4KrfjPJIK2FLWCKzSLguDdu3xQkD2fiCAtYNLIg
TMEGsgBhhZJRPiJcwGZa/BBBochcSxGzFSGcyKXwzwW6ky13WlOFjG0ipsFo
3wHEI6GoYoFZAoH6+YXOnukJBLptKxt+kbelCSWTjOjSoSqa7d5uIsyB1kh5
QUMZqVnTUGOxZnFYTFJtLUPZaq3Q2mIEokgD7yWJAPB/5sRuFniJFfD00Zf5
IGsQFh4/tMMPERQ8A8eYe9wt4ihjG2ylxOgAK0tqCIvZqDSwkph7k9QUuIpp
Guhag2qZBg33C20TwbbYRLz6qmjUeq6x+tUzXqWdq24VXW3F3gXHfjnolTvk
FGDEZ/C64qvhkUeqE4f4UrUuknUSAZgvSr5JBMvXVyZyUwiXUYhAgfzrT80t
LyIssD2feqTleUTbCH6IoOCYa7nht0tH9Vwb7hlMA+U/7GpDi+Be8uAFHXOX
moJm6DvhIVPRdjNqAC8MdezZ5D61X6g+dWSufqFtItgWU9TUmECnnlfI41xB
Noi3ABfFFHjWt8Wy/vM/JXJdU3PA202ke+8AYqretpY/jZMIXu1uef/DCeCd
/5oIeIktgMAFJhGwMRyBRcBCxURQsKIVmYy7Iw4MD4e6bXPrivJCNiq8IHXr
emPuPT0LrznFllAkpsFCJljxDsUvFOqvp1/I5VgNv7Db0jwyElxnAVXGFSgK
2hULz7hH/RF6bMuw12B6UyRsXetr4sEFmWRE19iqYQ21CRNwNaLR8Gt7dzuJ
ADD/BMvtvwverqGnj77MQigZZQPxCLHmX1p/wQL/yyICj8BxwSo65jogw0MD
UIZtPJnJC5hywgsoBhgFMIikkv7GKtaGVbkVm6q4wJTT7YeuLWcXMxHNBWNd
r5bsUFRMPrRqu+rjF5LWpq7HavhV3ZYmER497bAVta1GB/Les4SM/YCA9Meu
9WXxDhmr/hJWSF1NtIlU2TyBWaQ3dTAYcAaLJUEIJV/cRMWIgDWYCWzGS1Zi
HWAasBI7ggWfwWJTPALHIlyExdxYajzEHcX18eYFTCrhBRhB96PT1mitf9wK
JDrcl0x88GvrL/V+j60M+UK8vJD39SvT4qupjzkgx3L1QTX8wm5LMwggpllg
INBbU1dtdnrcI5sUnPFZIFz1xFGngGmuwWJWgoQK8dam+lY3GX4xO6FbYUtO
lM01hHovyjzAfjoefKv/hJCCLEhOKev1BhO5Kd5lmTWYAxJWEEuhXCIoWGad
a5VZsWtYjBewZZzUoP+SE6MYC1gHTdKktGDpHoGedmGBuWyK5bnJLmfpmf8Z
kUuz0bNn1IyAuvmFivmgLua2241+1sWM9GGk12GkrHcH49bIbLF5x6bAAjWN
FGuRUQIC/ja3lRTYiq4bGQltfvCWTMaRNtem1t2oyuJiAkpXlrUr8XfhBfEj
cct58AImAzdnMwSR0d5Ptv5SWODWzZssy/qb1zJmI+uy8kvFL1TueOKq+4WU
sRAZOnumd2Q4lE7GttvNfQYFfNOZoqrTcl0Gi/Nce7RwlI4T3gqndJZohoRD
YE0iBZsJGUsPPb6RzAByfq9mIwJuG7hg81ePL47Cr+0FBF4Qb5v51/DhBZnE
IMj/0ccfCRGcbj9kQ0t0e5tpwEvvMTc3llMybr4+5oD3sVZ/1sV0aiIaONs3
MVZbW3tbmkoAHF0ZmsumQt2t9Tkuj39nm3tWKm9J1yBvIshbffsbfgFFdJUx
IOY9u9P1J1CR094eDAGgtdi3rgMRtB7Y4fF76baoWoqVFWxSoBguY/uJg+1H
96scM0tFUdMtj+6vf/j42uVpGAoK0HEB/kDUZMI9OGXrSiE5RWOBFteByDKe
uG5+IZlc7E0EIh+vTEME0AH26ba/6I4XTFoULen3Ir1i6qlg93a1uWYJXlpZ
kIbS3h9PpxKo0A2/hiKz6SjYxWUsfPopl9Rn9qMZCy7p44IIat2G+tie7y+N
7XM9Ot+IC247yZnpZLH0oWqJObzAey5S1SU1PtB2vCXQ0760kv+18QcLRIf7
PD74UX48dmqP6SmStCLpYmoygtR2NYNf6EO3YDHWQSx2rq+v9/ryNhfcsSKd
AcQGF/iqs+ktzhDneikrKxksRh2t0XyQygTdVShVZrt7p5I6Y8ElfyyI4Bcv
/xx5be/uo0cOyFgZp8igmT27dqJRe4+nYSdsjLz9+g4ZdjP57sNqIObwc84T
4Ks5W89J+lCtL2x0uEc3rEZ5KLffdbmihgKcOtF+8vB0ZvLmJ7dMCpjLpqCG
TBFbwCZo+5gGNjrQjHAh3nl1Pt48fiFXIhDBLtgmgjtVwHztEbp182NYYPNR
zgrEVXMWIvCYZSkCkNa6vU9ZIi3UxEEkXLB4wcWFXiwW7LrD9PmhvlPHgXTF
F1yQTz91xlI/+eT2wvxsPDbIZhyUj/j3n3ACnA94fuvKmDkfeX7gCdtO2My1
B2lyYrQOxV98NbmwMt2yFg6ia5eSwYByAY3HwzoQIH+8DI+EeMvbEHAVrAPJ
IzKzTHVAWflqAqfrwAIyhsbbB+V6/vziI8OhWv++29IQuXktY5bEKsiqsZbl
IU4YOZ9TcwG8PwWCAacNv5I2yecmdRe127dUVZSOF9hiwR5QBkePBDuBPj7O
Yyh7c829B7hARY4Yj/TyqcrgUX+KBfB/nQvOPmy+JSxgGxJXsGr6XDtUV1ek
x6l89/ncjHfKWVnCs5AYDQLyALLNBYQ5kMkkMQ0wEPK5zRrLuVQodmoP4K8Z
YajnCOCcCB2tAxE4x9D4IYLJRDQUDGybA3ekSLqjHrxe9Q4S5YrzoZY5Nd6f
qk8pWQUCpXJJ5fKiwPd2taGiSywYKRYL5icAzPkg+I+lwO+iy2z1H5TNx4F9
wD/U3ZoaL2FQVCAq4X/oJ5oLsBGkVBaToRgRqM5U0XAdYrhcH13zzj2zeQOW
W6ir8xg4P5dN/Xrj38V8LtDT3na8JRkPVf2LzE12CSPoUHIdiABboKQPyjxJ
+H14qD8aGdqOFN+pEh3ukQcKlbWkK7sOgs5sixT4sQj4SB0U0coE2FS2QCbJ
RZZBz3rcpBYuu4yAV7kxlucH7nB26WEN66UJA/9BvzpA7mJk57pd0HP/rStj
EikWcaYTsLK6bcCLiXZmwpIVO4igtuhwHyYA7Ox0AclbWGTXr9QWAHWiaeS9
vfXxC40MlshNMk8PWyARD9fhN92WhoiAz3rczc2JXX+x5Vv66UEKcjZzXzIx
u8Sxg3ovbZnRaZXD/+h+Qf6Z6SSw5tT8RfnXPn8+WH+yXhrbtxy4T4IFEz0/
58xR+0Ukd8gU7JT6GAVguG73ms/PlVuyMZcJn24/hBWAwm9zAaVTE+j/VXEB
+ZGFTFAcRGNdr05F2+vjF5IYgYd3yDzD5cV04Gzf3EyT6lrbshmRTDxBnshI
qBlKNUWc3oa3hrxGldWh6WhVvpS2C6AD8HNhftbV4a/Bn20kNAxZL+bGGvsF
FxNH4ILZ4DNAVuz0f6Ikc88gmJNOEa9XHc4qNR7SjVAgUz8lG7oQYDwevnXz
prsLyF8iULUkdmqP9gtFRsO1JoJQf68MIDh7RtEB/1nOjHkRgXXdMnDBdonx
HSZmgFjijA0/JVNsrHRqzGtUWR1aDFVFZKTvqjfDkfDDbzGfmwHWtNsfWGsq
drt6oX2p7z7xEUEKUEOx04MFgsFAfc6KyyXNKLiAHvOAVHR+PCSFADYTADqA
FOrjAnKVSMcuIYLO9tZgLFZrIjDH0GARSB4pEgh0m2UFzvPEIggFA1gH9b9E
21ILEe1Uz1Usa7BsfUSNxcxN6peYAxgFxarbUhN1ajG0eVlemurvU529o9Ew
Vx4DYbVm1koKgv5Y02y/hSk3loZNLihWbqbmDTniILU6pWtZnZrFf+fUJIwp
9BzWo/DYCgFghP732k63H5rLNMwBPjfZpf1CQyOhWg+jKZYvxHqxFLTLyP1s
ZxLbPqI7RnTGRZMEiJ0iA+71Sx52iKBYTVmTBwicIm2RQCd0ftvF5zv6H8TT
ELlxeWy+5/51uyCy03UzbjCMAn4aEZZFirED12Eum+BTsj2WkQo65yb91Lbz
wYFA79EjB17bu7u3q00lG9xekulm2FaYJx0d7WKIAf7otOB/MvHB8aMH33pz
r94JSrKtLgDzYSWfvrac7e32ahC0SdHmQH3yhUD7s2e88oW0y6jYCV9fnuYa
bseOt7rwxOki/eYJEDvF1swfeHSdUCOg2sxatKsUm62sieDUWNnzmusm0LR3
uVlhraCArynCXYewAGLrAnBJQ8U4YiVXQ5rHyvZsA56rWUhWwbUEI6TYzXk+
bPyFL3weFgDwv/3X9/zi5Z+z/e9+7nOA/6f/XeDjv/Vbv8VRCp9+Oh4P/9mf
/SlYd3kx/Z1v38Oy3snf3ved791/n36577Xdv/M7vwMLwNePPvLD2l1MnTga
695faxaYTriPJ3ZKMYtAS3xUzalqQh1yW7xlITd2aWFCnELSR4JnsD6dRSsT
HnkzOVzGVjojBfWZSlYLkbhqsXfP53Ie8fGGiyo3O/uwWW5mc84XKygA5EXn
510pplvMTnir/TIDQiJBUIbT+kOxeeLHj6nxeZ/czmSSe3btLBQ+veuuP+Tl
9esffe2rX0aOvP1GONQNpGMIFCxt/+mnfgT4X0ivzlz+X//rj//qnr+UZW6q
b37j7m/932+wvHvXi6bhUF25EO8UvxB04JwaXDe/kKuUPPltN9HWko9XpkOB
jsH+LuR026GZaZW4cuumcgo1uSJtMwrgL2f6UDNXEHiLmgcdDGwtp5bt/F3L
zbSAya496NQHsxOo8RXcfnzQWYiNXgrUwwWdbcrUXZifhQi+9KUvsgD+YyM8
9I+PYy9wxK999Stq++Us7/Lyn55+Utw+qYkoBgK8wFu8/Mm/PvVvzz8LU7D8
0IPfGxmslb5UZ79QIFDCL1QWERRW2yT2Yx00/G7clmIC/ufSkehwN4A/+2Fa
omPiEeIx6e1qa0g3obJEzb3amD4kDiKzpmDLBQhMQfN0dRBtITHLzZb67rux
NKzfAiUS4/GqH1HNAI0Nrl+020vIJzcXwPwvfOHzjz/yEATEcb/85T/HUuB/
JhnZ8cLzv3j55w/+4IF2a8ICSv5LL6oO2/te240ULAMB5Af/2XMyMQj47/r3
HYda3ihYloKwQ9UF3hS/EEbBaN+BWrOAtDb14xfyTwQiE2OR7WyiZpNLC/ws
qjtBX9dJmBqlSGdKXL1yCUtZSm/KbZLfKDFDxgXLXwQRmA6iZus1V64Aa83T
Pbsy0eVmFhfcu5LtMr9d1TuZQwESU5bfPTs9DgVoOkDVbz9xMBoNS7AAM4H1
mAMvPPskpJBOKUsEbP/e/fch3/q/31AbWCYAHPHWm3v5//0H7p9KxngXUtBG
RC1kKtpeT7+QjCd21gtsngiQi7lU4GwfhlXD78bPsqwspTLnh86dae84eWiw
vwv935YmBwXwVvuJllB3azjU3cCecuUKFoHNKJBCY+0gkqe14edZsWx1B5HI
1QvtBhfcx0tZn8umZqZr0m5Curayf6wqDAGVjHR7SaLG+dzkyvLcA3/37bvu
+sPF7ATrYYo/+P3fO3rkAMYC2r6o+siFdPyb37ibBf6zHAx0wgI/e/afWfNH
f3QX/7s6j4mDqOqCOaDbStTHL3T2jKoU8L99ud9IuaCDge2QQaMEFgDko8P9
KP828E9OjEpcoL/7OJZCw0+1MnEOTDyXVhk14hzYKtVkHqIdRHwv704azSwY
ArZys8LahIIa+b4k80pNtD9xEP3/G1+/m/+qNNKyDna88Dyilq1Ohg/+4AEo
CaZA1R8bG9XhDF7eunlT8oV49zvfvmcln+YXEUvhnUMHOttrMqQvNXJMN6Cu
g1+o5BiazRNBYa36eHuKWf1F+vHmjUpJlqMjIeUaOnVsLNJ79eL5hp/kJiUe
6XU6f06NraZZShZKw09yk5KaUCVmfubvNLPYys2kxKCmEwqgGNEEpOuRGAgc
TlHP7aXEeHw1kcDyGqmJD5a3H+U/VK/C52IyFmhZn00TaKk1EYhfqKxqtcq+
1/JievT9YeiAKzyZ2PYU1UNWLqUA/MuXlsD/6zc+Ggr1tJ9oOXemfSI+sJRV
xTjIHUDN8rDbVubzc1JW0Dwz6zf5HQcCvSOT6dlS83eaXG5dWS83QxaHflKf
CQVcQCk9iMcGZdynTPzkvxSecxr8t1Lfp2PRcyWJQLpS166NqukXSr1f86lk
Z894jSeuIhFogRFGhkPbnqJai7DA1SuXhAVYnhoPCfivS126AddHnO4FbRRI
qVHDz3CTAl5tlQi+t9y8ltlQYjDwRH2akdoE3UAK06Ah7pDV2jSrhQJEkEmN
wgiuH7x+ZToUOH386EFkKNRdk3NbTsnMykTvvjpMoqnAL7R5IkDSyRhS59/9
MyUrS3YWmJkcsbPAHWEOiPBQO2vfxCgAYaypGVveOyQe74afRlXENt0sO7iz
SQL6CuSDAU7m2nKW/2CjbYNkYrDteAsUUKMxNCLaLxTp2FXr5kIfro0nLvdA
m/+a20RQU7m0MKFZgP/FWACyaPipVlH6+zpdjQJJH7oDEm8KWz8V1ia6xOBS
/0OzwWfMEgN3sYK89pc28X7XtqXtU9YCXKAUcqvHGpq/ZqjLi2kxBKCAeGyw
RrUDIutjaDp21ZoFPrTaSpTrF6oKEUyM3QmmenPKgjX6ECtAs0AuHXGywJ1k
DoiImW9bOZufk5qC5MToVs/GLzTOOwTDtkZmB8arz0FLY/vSA89Hu/ZL6bFZ
YmCX20udbUdXKwKsl71dbXt27VxZnnvwBw/w8oG/+7aG9E9uLrCSt5748WNf
v/svtLAHvT2C8sDyqoP09tJqWYHFBamJ6KOP/PCtN/cGA6r1dHgk9Ff3/GVv
d3tX5zEY4emnfvTizuf0ubFl76kTspydHpOE0pde3PF/7v7qN79x99/e9x1b
ZhGflQO5ykf5ce0Xmjx3otYsUJlfqCpEMDIc2q4yq4XAAt2drbdufgwLyHzh
zwgLiLjq/CAYz74Mr9/SJbqFxnmH8lZpRlus+jqwBMGzfY/qVCJdYuCUcKj7
kYcfELQH6r/21S9LsYCsvOdb31xVL626AEkN/ZM//p8qT8AwBAB/2b79xEHZ
g+wQkv32X9/zpS99UR+OzwLjw0P9wPi+13b/zb1/PZX8oGDlmj704PekvkDk
z/7sT7/z7Xtkuf3kYSk0+MpX/hxSKFjUACPoNhTJxCC7Mg9kk9G+A/UsH6jM
L7QZIphenO2M51Yuz4SCgTspTNkkAubDArdv3ZQc0aIsMJ+8I1mgYKHKpUV7
NYRu1zk8NFCsO+UWkob4uGataAuXsepMqhobxgYxBHS3Ul1i4BQI/Qtf+Lzg
uYb61/buRlhAx1azBm4v8RN/+ct/Lm3ovvH1u20eIYwItuc/sL/uZ7MMChAe
eOcBwQQA/L/21a/8w8MP7fr3HeAk2C69JhBQfSoZ041Jh0Ld6Py64xBbwgXX
lrNScSZyqOWNf3v+WVlmYz7CTi4XUYbr7xcaCpbtF9oMEYSn1ZDx+fkMZhdc
cKfCUUNkZnKk79QxYYH53IzyDi1Pq8oXC/yvXjzPPf9ZuOC2jhMFCz2kXTMP
OJij9M+t7JZsiI9LirVtTZz8C/TBr+BcL2aaULOaYjD8XImJNreXUKRBeA31
rEG9lxoxqOEXL/9cQz0LHScP33XXHwL4IvLugz944Ot3/4XUEWsvk/iIWHj0
kR+GAqeB8d27Xvz+A/e/c+gAdABia5wH0n/yr0+x8Ff3/OWFdJyb6qUXdwDy
x1rfAeHTqYlv/d9vZFKjQD0f12fOfuRTvd3t7KpgeZNcM46WZqPiF+J/M/uF
NkMEc4vTZydnZ+cyQFPgbN/F3B0VrGygZM4P9XWdlHqxXHYau0Bj/mcB/E0B
E5yRglNjOZ1+L/OLt27gGPCsv3fofE6pcBWXMEAfebfPRkZCJimzPBt8Zr3E
wDnR5vbS4488xE+soR7BRhDFHpZHqweZ4QhxB73w7JOwA8sin9xcEGcRpgTH
4oPCQaznIxgU7BMwhwJC/b3YAsA7UP+9++9LjAbR/2EH0fNf3Pkc1gEqPZr/
2NgokB7oUe4srIlY9BwbsBkbsB995k8/9SO4gAWI7J+eflIcTbqRhSmx7v31
9wtV9tnKbgYQyXRQTCaicAFaa51v6TtPJuID/b0dwgIz00nsgs8a+JuC8hl2
KFrgmFmQCwgAGg0/1Yql/v1UuXoeA+BKiiuDwNe2nF6ZUGCWGCwOP7vhU5Yj
CMX+a1/9smC4wL4o9qwB2wH/9hMHhSOwAlLjIdMvxEFXt7dCw2IjQBbwC0ZB
13ttIDaafCgYANWBbiAdkIcjvvKVP+cQUMPPnv1nmAhh5XM/e6ZgYbs4uo8f
PcjK73z7nrlsCh4RdiiodlhBtmFXb725F9aQj+/69x0SSrDJul/ovb11IIKK
/UKbsQhszupQf186Gfsso9bmZSzSO9jfJSyQTiX6u483/JQaLrPpqC0QIEkv
eqUEKLdusIAfus7eISigLabaulb2cadfSOwyZyqsmj45n7SVm5mBCSD0dz/3
uVWovzXX29Um7UPVu7eXvn73X9zzrW/qaDJbSgRBJDE60Nl2VIebJeIwHo/w
H4JAN+Bd7QtCsR+Ph6VSABbgKFgHgucFxWKploNvPfroI7w0p5jxKcginZpg
JYYDRgHMwsfhAvbJSh0bTSYGsT5sX38hE9Tjiaei7bVmgbLG0FSRCEyjIDWh
LAJz/vi2lCuwwFCoR1gAC2ubBUTADVs/0oIFZebAGoB062aTNsQ7VHCr3a5Y
ivXWxtJJTozays3gBX1omUSvkT+TjMgAYnkZHe7R6bVsCbCbAtrzbsfJw6rj
qLW9xIxgE+TokQMIuCSJoOjzgHw+p7YExqeSMQT0LlhZQJLuMhTqZhvT1R8d
7oMvxsZG208e7mxvRfS7fMo28libDFqwAurpF8IWqNgvVBUiwBCABSLJTDCZ
m1veqt0UGyvR4e7ocL+wgBoPGuho+Ck1j0AENtTSIWMR0Ui3bjbplq6PKzaO
ubA2SkA6RJnTzZyTLisW8AdSkKNzJuFQNy+hgP6+Tj+XVPrRXb/i5cfAlNAD
LssSPY+sDn4hGU88MlihX2jzRLCUTcACE6kJLM1fDs6+/+EW7qbYKBkZ6Bx9
f3iVBaIDvGz4KTWVXFqccHacGBjPmEZBZCTUJG0NKpBVTbjRp1GZ2GLENpmZ
Xp9faU43c066rFiCgU5UBcwHsQIgAp/D+DKp0ZIsUFjrU1EuF+RSIe0XqkOX
uU36hTZDBAXLqkV9BcTmFqehgPHsNguUFlsY5dyZ9kQ8LCyAUYBp0PAzbELB
2LetyefnzJIo1L+tGylolHdo87KYnfDu+yQTCvRLc7rZfM/9t65UYWRSajwk
FIDYxl57iE8WEGGz4aF+TAP/Z1Vnv1Cov4zxxFUngoJVVjwykYQFMAe6E9tE
UFp0ITD/+7uPJydGhQWGQj1jDr13W0R42FH5bCvNPNKCFZoElLaog2iL9h0K
+igmTYzHza+2cdLlfaVbEnlKf19nx8nDCHaBf/fazPR5gL1ckyQWPRceCZX8
FBsg2i8U695faxbYvF9o80SQTsZOD0WwBSCCYHKbCEqLlAPzv7uzFewSFggF
OibiW76jZk2l6z27UaBbD2mR/sNbkQtSExFUgoafRlniTBl1FeeEgsXEkQq4
gMOptIG1UHJ2ehx7REYYd3ceDYe6URUUK1nZpJlkhDVDamXfSn695jc7PXb8
6MGWg2/pLnMSIEYAUp2HzIKsFEmMBmX9VDImMw5s5wbyc3owRSCgNHNgOdDT
Lk2w2W2tJxRv3i+0eSJYXkxLWXE+r9pNNPzmbDbhyqAO6QoLXl69eH4pm1BN
RKeTwgL9vR1T46GGn2qTi2om7NCZ22JZW3ETj/BWnGW5FSevccJ+estIQYGN
na9eaNfTzVjwak8nYtUR6CoDKUbr7Wr75ObCXXf9oRQR7HjheTZQluPtpW98
/e4Xnn3yxZ3P/ezZf/6zP/tTaRO06993fPMbdz/3s2d+8q9P6aYQvadOsJIt
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
O71mgr41MgqtLd7ULJ7voFdAHZB3WVJgUh0Ep53X0OOxr0aJsTk1BwZBMrkl
zb09Lw1DKaA2NCPO/MJJQT21svVZcuOCXDawOn89mdhk9aWdakJWYWlhVu+r
aqs2qQ4Cgm2FLXQBaATchzHW2CulaxXxMP3hMJQCMdspNzryh+fRURFcgEvj
fntHidruVsS/tHzn2nYm/vzZU9Z30ulBbyFWv9Rt30aeYnuKSktgW40gLUSd
2FHzoAd1Nla5/6As7x0JpQDCnykFIAWrzggWSG7xcTDhuvx+75RUJUqEXasL
N6ACNPar/zz/w7LPPQ9qeDy5omn0MGhD4MpILxf3EQ4J1H2G+zA0YZNS2OMC
KK1LglQFpVbJtarbuHVUnyGTTtbK2VrsXaYUWHI6TMj7cxNbBco1m/iCpWAB
IRn5p+yvVs7fXZ6DIuAEi1qO1oHuLf1iqzqpnuJTGxf8P2rmnfiQ/u4bWIAB
QrJWEXe2heZe3FqlwOv12KFubUFM4DkZ95hS/FJC3A2op/fLd64x+R/0reEj
qOGk7eTWWQ/jGcWV0MR6ik9tHJZjW4ayLaARnBztylkAgISkAm5YrkXeJCLY
d397wHNRNrFNKsJRrtmYuo9ru1vu5ZuQ8JDzULIw1fe557GyXIxB4M9du0Sl
5OrVPSk0yFEBhomtmG6DPKz/OFjJ1SeNCHBdaSGKGd36+j3ug9EExuZExPUE
EEFlX0kEhGw6Dr1A7ik42vlswF/HVvoayG4cXQbZpA9inzLC2F/7qBWNBBQe
gXDAXR1PphsjeD1Lel9RcYnJM0JS1KhtXbEYnm0ZyraA3vrFVlWTCDDVzKST
2KYZt0ApkMoadJrUc79kOUBz4+UyEOJuiHeS8+ACSH4xm2ThQOwPXwHLd65x
H/DEw8BTDF1gUh0EzbpoW29srZy5zykcZYyAWQoeThbJcHK0S25iTVBCAaRl
y/Mt4oLj0p3+zmsT74AmxsVlUNvdgi5Aoj6TirmXb5aLMSgIqws3wA4gbiku
tOMR8LpuB72LTqbACGBggsCLtrU7aXYhBshbvDU25AKwgFNZoisow4WI4NFR
UY8CCMV8iubwjfBrRAQH977Xx0kx5eaSO2AeuFj7uwwSYRdZfrYz8Yj/BYtE
tZwFI0DyOx6BUUJdTXGqgIkHZnd2uwO2VVVsBRABZimAFClqyAIS6iKUAuz1
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
jsZK1SuhCuhgSbBFeQ1L8P8BR8xhRw==
              "], {{0, 518.}, {515., 0}}, {0,
               255}, ColorFunction -> RGBColor], 
             BoxForm`ImageTag[
             "Byte", ColorSpace -> "RGB", Interleaving -> False, 
              MetaInformation -> 
              Association[
               "Exif" -> Association[
                 "Software" -> 
                  "Created with the Wolfram Language: www.wolfram.com"], 
                "GeoMetaInformation" -> {
                 "Software" -> 
                  "Created with the Wolfram Language: www.wolfram.com", 
                  "TileSources" -> 
                  "Wolfram Knowledgebase with data from \[Copyright] \
OpenStreetMap contributors: http://www.openstreetmap.org/copyright", 
                  "Projection" -> "Mercator", 
                  "PlotRange" -> {{81.45332336425781, 81.80694580078125}, {
                   21.566162109375, 21.921844482421875`}}, 
                  "LonLatBox" -> {{81.45364599553969, 81.80635400446027}, {
                   21.074661725316457`, 21.405335598400928`}}, "GeoModel" -> 
                  "ITRF00"}]], Selectable -> False], DefaultBaseStyle -> 
            "ImageGraphics", ImageSizeRaw -> {515., 518.}, 
            PlotRange -> {{0, 515.}, {0, 518.}}]], 
          PolygonBox[{{81.45364599553969, 21.566604497495902`}, {
           81.45364599553969, 21.92137835890167}, {81.80635400446027, 
           21.92137835890167}, {81.80635400446027, 21.566604497495902`}, {
           81.45364599553969, 21.566604497495902`}},
           
           VertexTextureCoordinates->{{0.0009123608927268378, 
            0.0012437729683156817`}, {0.0009123608927268378, 
            0.998689495022731}, {0.9983264740586435, 0.998689495022731}, {
            0.9983264740586435, 0.0012437729683156817`}, {
            0.0009123608927268378, 0.0012437729683156817`}}]},
         Annotation[#, "GeoBackground", "WolframGeoGraphics"]& ], 
        TagBox[
         TagBox[
          TooltipBox[
           {Opacity[0], 
            PolygonBox[{{81.73581240267616, 21.637559269777057`}, {
             81.80635400446027, 21.637559269777057`}, {81.80635400446027, 
             21.566604497495902`}, {81.73581240267616, 21.566604497495902`}, {
             81.73581240267616, 21.637559269777057`}}]},
           
           "\"Wolfram Knowledgebase with data from \[Copyright] OpenStreetMap \
contributors: http://www.openstreetmap.org/copyright\"",
           TooltipStyle->"TextStyling"],
          
          Annotation[#, 
           "Wolfram Knowledgebase with data from \[Copyright] OpenStreetMap \
contributors: http://www.openstreetmap.org/copyright", "Tooltip"]& ],
         Annotation[#, "Metadata", "WolframGeoGraphics"]& ], {{}, 
         TagBox[{},
          Annotation[#, "GeoGridLines", "WolframGeoGraphics"]& ]}}, 
       TagBox[{},
        Annotation[#, "GeoScaleBar", "WolframGeoGraphics"]& ]},
      CoordinatesToolOptions:>{
       "DisplayFunction" -> (
         GeoGraphics`GeoGridPositionDisplay[#, "Mercator", "ITRF00"]& ), 
        "CopiedValueFunction" -> (
         GeoGraphics`GeoGridPositionCopiedValue[#, "Mercator", "ITRF00"]& )},
      Method->{"OriginalInput" -> HoldForm[
          GeoGraphics[{
            Entity["City", {"Raipur", "Chhattisgarh", "India"}]}]], 
        "BasicGeoRange" -> {{21.08969235591121, 21.39030496780618}, {
         81.46967817776336, 81.7903218222366}}},
      PlotRange->{{81.45364599553969, 81.80635400446027}, {
       21.566604497495902`, 21.92137835890167}},
      PlotRangeClipping->True,
      PlotRangePadding->None]}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"2", "\[Rule]", 
     RowBox[{"GeoBackground", "\[Rule]", "Automatic"}]}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"3", "\[Rule]", 
     RowBox[{"GeoCenter", "\[Rule]", 
      RowBox[{"GeoPosition", "[", 
       RowBox[{"{", 
        RowBox[{"21.240000000000002`", ",", "81.62999999999998`"}], "}"}], 
       "]"}]}]}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"4", "\[Rule]", 
     RowBox[{"GeoGridLines", "\[Rule]", "None"}]}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"5", "\[Rule]", 
     RowBox[{"GeoGridLinesStyle", "\[Rule]", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {GrayLevel[0.4], Opacity[0.3], 
            StyleBox[RectangleBox[{0, -1}, {2, 1}],
             FontColor->GrayLevel[0.4]]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->GrayLevel[0.2666666666666667, 0.3],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 
             1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"GrayLevel", "[", 
            RowBox[{"0.4`", ",", "0.3`"}], "]"}], NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 0.3; 
           FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0.4]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["GrayLevelColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       GrayLevel[0.4, 0.3],
       Editable->False,
       Selectable->False]}]}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoGridRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"81.45364599553969`", ",", "81.80635400446027`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"21.566604497495902`", ",", "21.92137835890167`"}], "}"}]}], 
       "}"}]}], ",", "6"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoGridRangePadding", "\[Rule]", "None"}], ",", "7"}], "]"}], 
   ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoModel", "\[Rule]", "\<\"ITRF00\"\>"}], ",", "8"}], "]"}], 
   ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoProjection", "\[Rule]", "\<\"Mercator\"\>"}], ",", "9"}], 
    "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"21.074661725316464`", ",", "21.405335598400928`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"81.45364599553969`", ",", "81.80635400446027`"}], "}"}]}], 
       "}"}]}], ",", "10"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoRangePadding", "\[Rule]", "Full"}], ",", "11"}], "]"}], ",", 
   
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoResolution", "\[Rule]", "Automatic"}], ",", "12"}], "]"}], 
   ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoServer", "\[Rule]", 
      RowBox[{"{", "Automatic", "}"}]}], ",", "13"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"GeoZoomLevel", "\[Rule]", "11"}], ",", "14"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"MetaInformation", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\<\"GeoModel\"\>", "\[Rule]", "\<\"ITRF00\"\>"}], ",", 
        RowBox[{"\<\"LonLatBox\"\>", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"81.45364599553969`", ",", "81.80635400446027`"}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"21.074661725316457`", ",", "21.405335598400928`"}], 
            "}"}]}], "}"}]}], ",", 
        RowBox[{"\<\"PlotRange\"\>", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"81.45332336425781`", ",", "81.80694580078125`"}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"21.566162109375`", ",", "21.921844482421875`"}], "}"}]}],
           "}"}]}], ",", 
        RowBox[{"\<\"Projection\"\>", "\[Rule]", "\<\"Mercator\"\>"}], ",", 
        RowBox[{"\<\"Software\"\>", 
         "\[Rule]", "\<\"Created with the Wolfram Language: www.wolfram.com\"\
\>"}], ",", 
        RowBox[{"\<\"TileSources\"\>", 
         "\[Rule]", "\<\"Wolfram Knowledgebase with data from \[Copyright] \
OpenStreetMap contributors: http://www.openstreetmap.org/copyright\"\>"}]}], 
       "}"}]}], ",", "15"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351155164379296`*^9, 3.83511555784578*^9, 3.8351156098886595`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"0fa8c464-3db1-4728-8bd6-53063237b817"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree[Graphics3D, {
       Tree[List, {
         Tree[Specularity, {
           Tree[GrayLevel, {
             Tree[1, None]}], 
           Tree[100, None]}], 
         Tree[EdgeForm, {
           Tree[None, None]}], 
         Tree[GraphicsComplex, {
           Tree[List, {
             Tree[List, {
               Tree[0.00011536100000000001`, None], 
               Tree[-0.0000644059, None], 
               Tree[-0.000023318000000000003`, None]}], 
             Tree[List, {
               Tree[-0.0698724, None], 
               Tree[1.09314, None], 
               Tree[0.196968, None]}], 
             Tree[List, {
               Tree[-0.5340440000000001, None], 
               Tree[-0.24199700000000002`, None], 
               Tree[-0.946041, None]}], 
             Tree[List, {
               Tree[-0.466211, None], 
               Tree[-0.558814, None], 
               Tree[0.842109, None]}], 
             Tree[List, {
               Tree[1.0700100000000001`, None], 
               Tree[-0.292263, None], 
               Tree[-0.09301310000000002, None]}], 
             Tree[List, {
               Tree[-0.034878519499999996`, None], 
               Tree[0.5465377970499999, None], 
               Tree[0.098472341, None]}], 
             Tree[List, {
               Tree[-0.26696431950000005`, None], 
               Tree[-0.12103070295, None], 
               Tree[-0.473032159, None]}], 
             Tree[List, {
               Tree[-0.23304781949999998`, None], 
               Tree[-0.27943920295, None], 
               Tree[0.421042841, None]}], 
             Tree[List, {
               Tree[0.5350626805, None], 
               Tree[-0.14616370295, None], 
               Tree[-0.04651820900000001, None]}]}], 
           Tree[List, {
             Tree[List, {
               Tree[List, {
                 Tree[RGBColor, {
                   Tree[0.4, None], 
                   Tree[0.4, None], 
                   Tree[0.4, None]}], 
                 Tree[Sphere, {
                   Tree[List, {
                    Tree[1, None]}], 
                   Tree[0.34, None]}]}], 
               Tree[List, {
                 Tree[RGBColor, {
                   Tree[0.65, None], 
                   Tree[0.7, None], 
                   Tree[0.7, None]}], 
                 Tree[Sphere, {
                   Tree[List, {
                    Tree[2, None], 
                    Tree[3, None], 
                    Tree[4, None], 
                    Tree[5, None]}], 
                   Tree[0.24, None]}]}]}], 
             Tree[List, {
               Tree[List, {
                 Tree[RGBColor, {
                   Tree[0.4, None], 
                   Tree[0.4, None], 
                   Tree[0.4, None]}], 
                 Tree[List, {
                   Tree[Cylinder, {
                    Tree[List, {
                    Tree[List, {
                    Tree[1, None], 
                    Tree[6, None]}], 
                    Tree[List, {
                    Tree[1, None], 
                    Tree[7, None]}], 
                    Tree[List, {
                    Tree[1, None], 
                    Tree[8, None]}], 
                    Tree[List, {
                    Tree[1, None], 
                    Tree[9, None]}]}], 
                    Tree[0.15, None]}]}]}], 
               Tree[List, {
                 Tree[RGBColor, {
                   Tree[0.65, None], 
                   Tree[0.7, None], 
                   Tree[0.7, None]}], 
                 Tree[List, {
                   Tree[Cylinder, {
                    Tree[List, {
                    Tree[List, {
                    Tree[6, None], 
                    Tree[2, None]}], 
                    Tree[List, {
                    Tree[7, None], 
                    Tree[3, None]}], 
                    Tree[List, {
                    Tree[8, None], 
                    Tree[4, None]}], 
                    Tree[List, {
                    Tree[9, None], 
                    Tree[5, None]}]}], 
                    Tree[0.15, None]}]}]}]}], 
             Tree[List, {
               Tree[Opacity, {
                 Tree[0.7, None]}], 
               Tree[
                Tree[List, None], None]}]}]}]}], 
       Tree[Rule, {
         Tree[Boxed, None], 
         Tree[False, None]}], 
       Tree[Rule, {
         Tree[Lighting, None], 
         Tree["Neutral", None]}], 
       Tree[Rule, {
         Tree[Method, None], 
         Tree[List, {
           Tree[Rule, {
             Tree["ShrinkWrap", None], 
             Tree[True, None]}], 
           Tree[Rule, {
             Tree["DefaultBoundaryStyle", None], 
             Tree[Automatic, None]}], 
           Tree[Rule, {
             Tree["DefaultGraphicsInteraction", None], 
             Tree[List, {
               Tree[Rule, {
                 Tree["Version", None], 
                 Tree[1.2, None]}], 
               Tree[Rule, {
                 Tree["TrackMousePosition", None], 
                 Tree[List, {
                   Tree[True, None], 
                   Tree[False, None]}]}], 
               Tree[Rule, {
                 Tree["Effects", None], 
                 Tree[List, {
                   Tree[Rule, {
                    Tree["Highlight", None], 
                    Tree[List, {
                    Tree[Rule, {
                    Tree["ratio", None], 
                    Tree[2, None]}]}]}], 
                   Tree[Rule, {
                    Tree["HighlightPoint", None], 
                    Tree[List, {
                    Tree[Rule, {
                    Tree["ratio", None], 
                    Tree[2, None]}]}]}], 
                   Tree[Rule, {
                    Tree["Droplines", None], 
                    Tree[List, {
                    Tree[Rule, {
                    Tree["freeformCursorMode", None], 
                    Tree[True, None]}], 
                    Tree[Rule, {
                    Tree["placement", None], 
                    Tree[List, {
                    Tree[Rule, {
                    Tree["x", None], 
                    Tree["All", None]}], 
                    Tree[Rule, {
                    Tree["y", None], 
                    Tree["None", None]}]}]}]}]}]}]}]}]}], 
           Tree[Rule, {
             Tree["DefaultPlotStyle", None], 
             Tree[Automatic, None]}]}]}], 
       Tree[Rule, {
         Tree[ViewPoint, None], 
         Tree[List, {
           Tree[1.3023040136632529`, None], 
           Tree[-2.393283346182469, None], 
           Tree[2.000149764613196, None]}]}]}]]}, {
     {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
      AbsoluteThickness[1], Opacity[0.7], 
      StyleBox[{
        LineBox[{{8.303264046484207, 2.8737750282559134`}, {3.135707648018822,
          2.634293775901254}}], 
        LineBox[{{8.303264046484207, 2.8737750282559134`}, {6.510896548392304,
          2.634293775901254}}], 
        LineBox[{{8.303264046484207, 2.8737750282559134`}, {6.989859053101623,
          2.634293775901254}}], 
        LineBox[{{8.303264046484207, 2.8737750282559134`}, {
         12.273414183176296`, 2.634293775901254}}], 
        LineBox[{{8.303264046484207, 2.8737750282559134`}, {
         13.470820444949593`, 2.634293775901254}}], 
        LineBox[{{3.135707648018822, 2.634293775901254}, {
         0.11974062617732972`, 2.3948125235465945`}}], 
        LineBox[{{3.135707648018822, 2.634293775901254}, {0.4789625047093189, 
         2.3948125235465945`}}], 
        LineBox[{{3.135707648018822, 2.634293775901254}, {6.151674669860315, 
         2.3948125235465945`}}], 
        LineBox[{{0.11974062617732972`, 2.3948125235465945`}, {0., 
         2.155331271191935}}], 
        LineBox[{{0.11974062617732972`, 2.3948125235465945`}, {
         0.23948125235465945`, 2.155331271191935}}], 
        LineBox[{{0., 2.155331271191935}, {0., 1.9158500188372756`}}], 
        LineBox[{{0.4789625047093189, 2.3948125235465945`}, {
         0.4789625047093189, 2.155331271191935}}], 
        LineBox[{{6.151674669860315, 2.3948125235465945`}, {3.113256280610573,
          2.155331271191935}}], 
        LineBox[{{6.151674669860315, 2.3948125235465945`}, {9.190093059110056,
          2.155331271191935}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {
         0.23948125235465945`, 1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {0.9579250094186378, 
         1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {1.6763687664826161`,
          1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {2.3948125235465945`,
          1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {3.113256280610573, 
         1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {3.831700037674551, 
         1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {4.5501437947385295`,
          1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {5.268587551802508, 
         1.9158500188372756`}}], 
        LineBox[{{3.113256280610573, 2.155331271191935}, {5.987031308866486, 
         1.9158500188372756`}}], 
        LineBox[{{0.23948125235465945`, 1.9158500188372756`}, {0., 
         1.6763687664826161`}}], 
        LineBox[{{0.23948125235465945`, 1.9158500188372756`}, {
         0.23948125235465945`, 1.6763687664826161`}}], 
        LineBox[{{0.23948125235465945`, 1.9158500188372756`}, {
         0.4789625047093189, 1.6763687664826161`}}], 
        LineBox[{{0.9579250094186378, 1.9158500188372756`}, {
         0.7184437570639783, 1.6763687664826161`}}], 
        LineBox[{{0.9579250094186378, 1.9158500188372756`}, {
         0.9579250094186378, 1.6763687664826161`}}], 
        LineBox[{{0.9579250094186378, 1.9158500188372756`}, {
         1.1974062617732972`, 1.6763687664826161`}}], 
        LineBox[{{1.6763687664826161`, 1.9158500188372756`}, {
         1.4368875141279567`, 1.6763687664826161`}}], 
        LineBox[{{1.6763687664826161`, 1.9158500188372756`}, {
         1.6763687664826161`, 1.6763687664826161`}}], 
        LineBox[{{1.6763687664826161`, 1.9158500188372756`}, {
         1.9158500188372756`, 1.6763687664826161`}}], 
        LineBox[{{2.3948125235465945`, 1.9158500188372756`}, {
         2.155331271191935, 1.6763687664826161`}}], 
        LineBox[{{2.3948125235465945`, 1.9158500188372756`}, {
         2.3948125235465945`, 1.6763687664826161`}}], 
        LineBox[{{2.3948125235465945`, 1.9158500188372756`}, {
         2.634293775901254, 1.6763687664826161`}}], 
        LineBox[{{3.113256280610573, 1.9158500188372756`}, {
         2.8737750282559134`, 1.6763687664826161`}}], 
        LineBox[{{3.113256280610573, 1.9158500188372756`}, {3.113256280610573,
          1.6763687664826161`}}], 
        LineBox[{{3.113256280610573, 1.9158500188372756`}, {
         3.3527375329652322`, 1.6763687664826161`}}], 
        LineBox[{{3.831700037674551, 1.9158500188372756`}, {
         3.5922187853198917`, 1.6763687664826161`}}], 
        LineBox[{{3.831700037674551, 1.9158500188372756`}, {3.831700037674551,
          1.6763687664826161`}}], 
        LineBox[{{3.831700037674551, 1.9158500188372756`}, {4.071181290029211,
          1.6763687664826161`}}], 
        LineBox[{{4.5501437947385295`, 1.9158500188372756`}, {
         4.31066254238387, 1.6763687664826161`}}], 
        LineBox[{{4.5501437947385295`, 1.9158500188372756`}, {
         4.5501437947385295`, 1.6763687664826161`}}], 
        LineBox[{{4.5501437947385295`, 1.9158500188372756`}, {
         4.789625047093189, 1.6763687664826161`}}], 
        LineBox[{{5.268587551802508, 1.9158500188372756`}, {5.029106299447848,
          1.6763687664826161`}}], 
        LineBox[{{5.268587551802508, 1.9158500188372756`}, {5.268587551802508,
          1.6763687664826161`}}], 
        LineBox[{{5.268587551802508, 1.9158500188372756`}, {5.508068804157167,
          1.6763687664826161`}}], 
        LineBox[{{5.987031308866486, 1.9158500188372756`}, {5.747550056511827,
          1.6763687664826161`}}], 
        LineBox[{{5.987031308866486, 1.9158500188372756`}, {5.987031308866486,
          1.6763687664826161`}}], 
        LineBox[{{5.987031308866486, 1.9158500188372756`}, {6.226512561221146,
          1.6763687664826161`}}], 
        LineBox[{{9.190093059110056, 2.155331271191935}, {7.064696944462454, 
         1.9158500188372756`}}], 
        LineBox[{{9.190093059110056, 2.155331271191935}, {9.758861033452373, 
         1.9158500188372756`}}], 
        LineBox[{{9.190093059110056, 2.155331271191935}, {11.315489173757658`,
          1.9158500188372756`}}], 
        LineBox[{{7.064696944462454, 1.9158500188372756`}, {6.465993813575805,
          1.6763687664826161`}}], 
        LineBox[{{7.064696944462454, 1.9158500188372756`}, {7.663400075349102,
          1.6763687664826161`}}], 
        LineBox[{{6.465993813575805, 1.6763687664826161`}, {6.16664224813248, 
         1.4368875141279567`}}], 
        LineBox[{{6.465993813575805, 1.6763687664826161`}, {6.765345379019129,
          1.4368875141279567`}}], 
        LineBox[{{6.16664224813248, 1.4368875141279567`}, {5.927160995777821, 
         1.1974062617732972`}}], 
        LineBox[{{6.16664224813248, 1.4368875141279567`}, {6.16664224813248, 
         1.1974062617732972`}}], 
        LineBox[{{6.16664224813248, 1.4368875141279567`}, {6.40612350048714, 
         1.1974062617732972`}}], 
        LineBox[{{6.765345379019129, 1.4368875141279567`}, {6.645604752841799,
          1.1974062617732972`}}], 
        LineBox[{{6.765345379019129, 1.4368875141279567`}, {6.885086005196459,
          1.1974062617732972`}}], 
        LineBox[{{6.645604752841799, 1.1974062617732972`}, {6.645604752841799,
          0.9579250094186378}}], 
        LineBox[{{7.663400075349102, 1.6763687664826161`}, {
         7.3640485099057775`, 1.4368875141279567`}}], 
        LineBox[{{7.663400075349102, 1.6763687664826161`}, {7.962751640792426,
          1.4368875141279567`}}], 
        LineBox[{{7.3640485099057775`, 1.4368875141279567`}, {
         7.124567257551118, 1.1974062617732972`}}], 
        LineBox[{{7.3640485099057775`, 1.4368875141279567`}, {
         7.3640485099057775`, 1.1974062617732972`}}], 
        LineBox[{{7.3640485099057775`, 1.4368875141279567`}, {
         7.603529762260437, 1.1974062617732972`}}], 
        LineBox[{{7.962751640792426, 1.4368875141279567`}, {7.843011014615096,
          1.1974062617732972`}}], 
        LineBox[{{7.962751640792426, 1.4368875141279567`}, {8.082492266969757,
          1.1974062617732972`}}], 
        LineBox[{{7.843011014615096, 1.1974062617732972`}, {7.483789136083107,
          0.9579250094186378}}], 
        LineBox[{{7.843011014615096, 1.1974062617732972`}, {7.723270388437767,
          0.9579250094186378}}], 
        LineBox[{{7.843011014615096, 1.1974062617732972`}, {7.962751640792426,
          0.9579250094186378}}], 
        LineBox[{{7.843011014615096, 1.1974062617732972`}, {8.202232893147086,
          0.9579250094186378}}], 
        LineBox[{{9.758861033452373, 1.9158500188372756`}, {8.800936024033735,
          1.6763687664826161`}}], 
        LineBox[{{9.758861033452373, 1.9158500188372756`}, {
         10.716786042871009`, 1.6763687664826161`}}], 
        LineBox[{{8.800936024033735, 1.6763687664826161`}, {8.561454771679076,
          1.4368875141279567`}}], 
        LineBox[{{8.800936024033735, 1.6763687664826161`}, {9.040417276388395,
          1.4368875141279567`}}], 
        LineBox[{{8.561454771679076, 1.4368875141279567`}, {8.321973519324416,
          1.1974062617732972`}}], 
        LineBox[{{8.561454771679076, 1.4368875141279567`}, {8.561454771679076,
          1.1974062617732972`}}], 
        LineBox[{{8.561454771679076, 1.4368875141279567`}, {8.800936024033735,
          1.1974062617732972`}}], 
        LineBox[{{9.040417276388395, 1.4368875141279567`}, {9.040417276388395,
          1.1974062617732972`}}], 
        LineBox[{{9.040417276388395, 1.1974062617732972`}, {8.920676650211064,
          0.9579250094186378}}], 
        LineBox[{{9.040417276388395, 1.1974062617732972`}, {9.160157902565723,
          0.9579250094186378}}], 
        LineBox[{{8.920676650211064, 0.9579250094186378}, {8.202232893147086, 
         0.7184437570639783}}], 
        LineBox[{{8.920676650211064, 0.9579250094186378}, {8.681195397856404, 
         0.7184437570639783}}], 
        LineBox[{{8.920676650211064, 0.9579250094186378}, {9.160157902565723, 
         0.7184437570639783}}], 
        LineBox[{{8.920676650211064, 0.9579250094186378}, {9.639120407275042, 
         0.7184437570639783}}], 
        LineBox[{{8.202232893147086, 0.7184437570639783}, {8.082492266969757, 
         0.4789625047093189}}], 
        LineBox[{{8.202232893147086, 0.7184437570639783}, {8.321973519324416, 
         0.4789625047093189}}], 
        LineBox[{{8.681195397856404, 0.7184437570639783}, {8.561454771679076, 
         0.4789625047093189}}], 
        LineBox[{{8.681195397856404, 0.7184437570639783}, {8.800936024033735, 
         0.4789625047093189}}], 
        LineBox[{{9.160157902565723, 0.7184437570639783}, {9.040417276388395, 
         0.4789625047093189}}], 
        LineBox[{{9.160157902565723, 0.7184437570639783}, {9.279898528743054, 
         0.4789625047093189}}], 
        LineBox[{{9.639120407275042, 0.7184437570639783}, {9.519379781097713, 
         0.4789625047093189}}], 
        LineBox[{{9.639120407275042, 0.7184437570639783}, {9.758861033452373, 
         0.4789625047093189}}], 
        LineBox[{{10.716786042871009`, 1.6763687664826161`}, {
         10.47730479051635, 1.4368875141279567`}}], 
        LineBox[{{10.716786042871009`, 1.6763687664826161`}, {
         10.956267295225668`, 1.4368875141279567`}}], 
        LineBox[{{10.47730479051635, 1.4368875141279567`}, {10.23782353816169,
          1.1974062617732972`}}], 
        LineBox[{{10.47730479051635, 1.4368875141279567`}, {10.47730479051635,
          1.1974062617732972`}}], 
        LineBox[{{10.47730479051635, 1.4368875141279567`}, {
         10.716786042871009`, 1.1974062617732972`}}], 
        LineBox[{{10.956267295225668`, 1.4368875141279567`}, {
         10.956267295225668`, 1.1974062617732972`}}], 
        LineBox[{{10.956267295225668`, 1.1974062617732972`}, {
         10.83652666904834, 0.9579250094186378}}], 
        LineBox[{{10.956267295225668`, 1.1974062617732972`}, {
         11.076007921402999`, 0.9579250094186378}}], 
        LineBox[{{10.83652666904834, 0.9579250094186378}, {
         10.118082911984361`, 0.7184437570639783}}], 
        LineBox[{{10.83652666904834, 0.9579250094186378}, {10.59704541669368, 
         0.7184437570639783}}], 
        LineBox[{{10.83652666904834, 0.9579250094186378}, {
         11.076007921402999`, 0.7184437570639783}}], 
        LineBox[{{10.83652666904834, 0.9579250094186378}, {
         11.554970426112318`, 0.7184437570639783}}], 
        LineBox[{{10.118082911984361`, 0.7184437570639783}, {
         9.998342285807032, 0.4789625047093189}}], 
        LineBox[{{10.118082911984361`, 0.7184437570639783}, {
         10.23782353816169, 0.4789625047093189}}], 
        LineBox[{{10.59704541669368, 0.7184437570639783}, {10.47730479051635, 
         0.4789625047093189}}], 
        LineBox[{{10.59704541669368, 0.7184437570639783}, {
         10.716786042871009`, 0.4789625047093189}}], 
        LineBox[{{11.076007921402999`, 0.7184437570639783}, {
         10.956267295225668`, 0.4789625047093189}}], 
        LineBox[{{11.076007921402999`, 0.7184437570639783}, {
         11.195748547580328`, 0.4789625047093189}}], 
        LineBox[{{11.554970426112318`, 0.7184437570639783}, {
         11.435229799934987`, 0.4789625047093189}}], 
        LineBox[{{11.554970426112318`, 0.7184437570639783}, {
         11.674711052289647`, 0.4789625047093189}}], 
        LineBox[{{11.315489173757658`, 1.9158500188372756`}, {
         11.195748547580328`, 1.6763687664826161`}}], 
        LineBox[{{11.315489173757658`, 1.9158500188372756`}, {
         11.435229799934987`, 1.6763687664826161`}}], 
        LineBox[{{11.195748547580328`, 1.6763687664826161`}, {
         11.195748547580328`, 1.4368875141279567`}}], 
        LineBox[{{6.510896548392304, 2.634293775901254}, {6.391155922214974, 
         2.3948125235465945`}}], 
        LineBox[{{6.510896548392304, 2.634293775901254}, {6.6306371745696335`,
          2.3948125235465945`}}], 
        LineBox[{{6.989859053101623, 2.634293775901254}, {6.870118426924293, 
         2.3948125235465945`}}], 
        LineBox[{{6.989859053101623, 2.634293775901254}, {7.109599679278952, 
         2.3948125235465945`}}], 
        LineBox[{{12.273414183176296`, 2.634293775901254}, {
         12.153673556998966`, 2.3948125235465945`}}], 
        LineBox[{{12.273414183176296`, 2.634293775901254}, {
         12.393154809353625`, 2.3948125235465945`}}], 
        LineBox[{{12.393154809353625`, 2.3948125235465945`}, {
         11.674711052289647`, 2.155331271191935}}], 
        LineBox[{{12.393154809353625`, 2.3948125235465945`}, {
         12.153673556998966`, 2.155331271191935}}], 
        LineBox[{{12.393154809353625`, 2.3948125235465945`}, {
         12.632636061708284`, 2.155331271191935}}], 
        LineBox[{{12.393154809353625`, 2.3948125235465945`}, {
         13.111598566417603`, 2.155331271191935}}], 
        LineBox[{{11.674711052289647`, 2.155331271191935}, {
         11.554970426112318`, 1.9158500188372756`}}], 
        LineBox[{{11.674711052289647`, 2.155331271191935}, {
         11.794451678466977`, 1.9158500188372756`}}], 
        LineBox[{{12.153673556998966`, 2.155331271191935}, {
         12.033932930821637`, 1.9158500188372756`}}], 
        LineBox[{{12.153673556998966`, 2.155331271191935}, {
         12.273414183176296`, 1.9158500188372756`}}], 
        LineBox[{{12.632636061708284`, 2.155331271191935}, {
         12.512895435530956`, 1.9158500188372756`}}], 
        LineBox[{{12.632636061708284`, 2.155331271191935}, {
         12.752376687885615`, 1.9158500188372756`}}], 
        LineBox[{{12.752376687885615`, 1.9158500188372756`}, {
         12.033932930821637`, 1.6763687664826161`}}], 
        LineBox[{{12.752376687885615`, 1.9158500188372756`}, {
         12.512895435530956`, 1.6763687664826161`}}], 
        LineBox[{{12.752376687885615`, 1.9158500188372756`}, {
         13.470820444949593`, 1.6763687664826161`}}], 
        LineBox[{{12.033932930821637`, 1.6763687664826161`}, {
         11.914192304644306`, 1.4368875141279567`}}], 
        LineBox[{{12.033932930821637`, 1.6763687664826161`}, {
         12.153673556998966`, 1.4368875141279567`}}], 
        LineBox[{{12.512895435530956`, 1.6763687664826161`}, {
         12.393154809353625`, 1.4368875141279567`}}], 
        LineBox[{{12.512895435530956`, 1.6763687664826161`}, {
         12.632636061708284`, 1.4368875141279567`}}], 
        LineBox[{{12.632636061708284`, 1.4368875141279567`}, {
         12.512895435530956`, 1.1974062617732972`}}], 
        LineBox[{{12.632636061708284`, 1.4368875141279567`}, {
         12.752376687885615`, 1.1974062617732972`}}], 
        LineBox[{{13.470820444949593`, 1.6763687664826161`}, {
         13.351079818772263`, 1.4368875141279567`}}], 
        LineBox[{{13.470820444949593`, 1.6763687664826161`}, {
         13.590561071126922`, 1.4368875141279567`}}], 
        LineBox[{{13.590561071126922`, 1.4368875141279567`}, {
         12.991857940240275`, 1.1974062617732972`}}], 
        LineBox[{{13.590561071126922`, 1.4368875141279567`}, {
         13.470820444949593`, 1.1974062617732972`}}], 
        LineBox[{{13.590561071126922`, 1.4368875141279567`}, {
         14.189264202013572`, 1.1974062617732972`}}], 
        LineBox[{{12.991857940240275`, 1.1974062617732972`}, {
         12.872117314062944`, 0.9579250094186378}}], 
        LineBox[{{12.991857940240275`, 1.1974062617732972`}, {
         13.111598566417603`, 0.9579250094186378}}], 
        LineBox[{{13.111598566417603`, 0.9579250094186378}, {
         13.111598566417603`, 0.7184437570639783}}], 
        LineBox[{{13.111598566417603`, 0.7184437570639783}, {
         12.991857940240275`, 0.4789625047093189}}], 
        LineBox[{{13.111598566417603`, 0.7184437570639783}, {
         13.231339192594934`, 0.4789625047093189}}], 
        LineBox[{{13.470820444949593`, 1.1974062617732972`}, {
         13.351079818772263`, 0.9579250094186378}}], 
        LineBox[{{13.470820444949593`, 1.1974062617732972`}, {
         13.590561071126922`, 0.9579250094186378}}], 
        LineBox[{{13.590561071126922`, 0.9579250094186378}, {
         13.590561071126922`, 0.7184437570639783}}], 
        LineBox[{{13.590561071126922`, 0.7184437570639783}, {
         13.470820444949593`, 0.4789625047093189}}], 
        LineBox[{{13.590561071126922`, 0.7184437570639783}, {
         13.710301697304253`, 0.4789625047093189}}], 
        LineBox[{{14.189264202013572`, 1.1974062617732972`}, {
         14.069523575836241`, 0.9579250094186378}}], 
        LineBox[{{14.189264202013572`, 1.1974062617732972`}, {
         14.3090048281909, 0.9579250094186378}}], 
        LineBox[{{14.3090048281909, 0.9579250094186378}, {14.069523575836241`,
          0.7184437570639783}}], 
        LineBox[{{14.3090048281909, 0.9579250094186378}, {14.54848608054556, 
         0.7184437570639783}}], 
        LineBox[{{14.069523575836241`, 0.7184437570639783}, {
         13.949782949658912`, 0.4789625047093189}}], 
        LineBox[{{14.069523575836241`, 0.7184437570639783}, {
         14.189264202013572`, 0.4789625047093189}}], 
        LineBox[{{14.54848608054556, 0.7184437570639783}, {
         14.428745454368231`, 0.4789625047093189}}], 
        LineBox[{{14.54848608054556, 0.7184437570639783}, {14.66822670672289, 
         0.4789625047093189}}], 
        LineBox[{{14.66822670672289, 0.4789625047093189}, {
         14.428745454368231`, 0.23948125235465945`}}], 
        LineBox[{{14.66822670672289, 0.4789625047093189}, {14.90770795907755, 
         0.23948125235465945`}}], 
        LineBox[{{14.428745454368231`, 0.23948125235465945`}, {
         14.3090048281909, 0.}}], 
        LineBox[{{14.428745454368231`, 0.23948125235465945`}, {
         14.54848608054556, 0.}}], 
        LineBox[{{14.90770795907755, 0.23948125235465945`}, {
         14.78796733290022, 0.}}], 
        LineBox[{{14.90770795907755, 0.23948125235465945`}, {
         15.027448585254879`, 0.}}], 
        LineBox[{{13.111598566417603`, 2.155331271191935}, {
         12.991857940240275`, 1.9158500188372756`}}], 
        LineBox[{{13.111598566417603`, 2.155331271191935}, {
         13.231339192594934`, 1.9158500188372756`}}], 
        LineBox[{{13.470820444949593`, 2.634293775901254}, {
         13.351079818772263`, 2.3948125235465945`}}], 
        LineBox[{{13.470820444949593`, 2.634293775901254}, {
         13.590561071126922`, 2.3948125235465945`}}], 
        LineBox[{{13.590561071126922`, 2.3948125235465945`}, {
         13.351079818772263`, 2.155331271191935}}], 
        LineBox[{{13.590561071126922`, 2.3948125235465945`}, {
         13.590561071126922`, 2.155331271191935}}], 
        LineBox[{{13.590561071126922`, 2.3948125235465945`}, {
         13.830042323481582`, 2.155331271191935}}]},
       GraphicsHighlightColor->RGBColor[
        0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
     {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      StyleBox[{InsetBox[
         FrameBox["Graphics3D",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.303264046484207, 2.8737750282559134}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.135707648018822, 2.634293775901254}], 
        InsetBox[
         FrameBox["Specularity",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.11974062617732972, 2.3948125235465945}], 
        InsetBox[
         FrameBox["GrayLevel",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 2.155331271191935}], InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0., 1.9158500188372756}], InsetBox[
         FrameBox["100",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.23948125235465945, 2.155331271191935}], 
        InsetBox[
         FrameBox["EdgeForm",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.4789625047093189, 2.3948125235465945}], 
        InsetBox[
         FrameBox["None",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.4789625047093189, 2.155331271191935}], 
        InsetBox[
         FrameBox["GraphicsComplex",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.151674669860315, 2.3948125235465945}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.113256280610573, 2.155331271191935}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.23948125235465945, 1.9158500188372756}], 
        InsetBox[
         FrameBox["0.00011536100000000001`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0., 1.6763687664826161}], InsetBox[
         FrameBox[
          RowBox[{"-", "0.0000644059`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.23948125235465945, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.000023318000000000003`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.4789625047093189, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.9579250094186378, 1.9158500188372756}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.0698724`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.7184437570639783, 1.6763687664826161}], 
        InsetBox[
         FrameBox["1.09314`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9579250094186378, 1.6763687664826161}], 
        InsetBox[
         FrameBox["0.196968`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.1974062617732972, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {1.6763687664826161, 1.9158500188372756}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.5340440000000001`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.4368875141279567, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.24199700000000002`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.6763687664826161, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.946041`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.9158500188372756, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {2.3948125235465945, 1.9158500188372756}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.466211`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.155331271191935, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.558814`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.3948125235465945, 1.6763687664826161}], 
        InsetBox[
         FrameBox["0.842109`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.634293775901254, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.113256280610573, 1.9158500188372756}], 
        InsetBox[
         FrameBox["1.0700100000000001`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.8737750282559134, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.292263`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.113256280610573, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.09301310000000002`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.3527375329652322, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.831700037674551, 1.9158500188372756}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.034878519499999996`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.5922187853198917, 1.6763687664826161}], 
        InsetBox[
         FrameBox["0.5465377970499999`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.831700037674551, 1.6763687664826161}], 
        InsetBox[
         FrameBox["0.098472341`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.071181290029211, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {4.5501437947385295, 1.9158500188372756}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.26696431950000005`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.31066254238387, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.12103070295`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.5501437947385295, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.473032159`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.789625047093189, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {5.268587551802508, 1.9158500188372756}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.23304781949999998`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.029106299447848, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.27943920295`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.268587551802508, 1.6763687664826161}], 
        InsetBox[
         FrameBox["0.421042841`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.508068804157167, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {5.987031308866486, 1.9158500188372756}], 
        InsetBox[
         FrameBox["0.5350626805`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.747550056511827, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.14616370295`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.987031308866486, 1.6763687664826161}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "0.04651820900000001`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.226512561221146, 1.6763687664826161}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.190093059110056, 2.155331271191935}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.064696944462454, 1.9158500188372756}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.465993813575805, 1.6763687664826161}], 
        InsetBox[
         FrameBox["RGBColor",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.16664224813248, 1.4368875141279567}], 
        InsetBox[
         FrameBox["0.4`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.927160995777821, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.4`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.16664224813248, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.4`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.40612350048714, 1.1974062617732972}], 
        InsetBox[
         FrameBox["Sphere",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.765345379019129, 1.4368875141279567}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.645604752841799, 1.1974062617732972}], 
        InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.645604752841799, 0.9579250094186378}], 
        InsetBox[
         FrameBox["0.34`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.885086005196459, 1.1974062617732972}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.663400075349102, 1.6763687664826161}], 
        InsetBox[
         FrameBox["RGBColor",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.3640485099057775, 1.4368875141279567}], 
        InsetBox[
         FrameBox["0.65`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.124567257551118, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.7`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.3640485099057775, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.7`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.603529762260437, 1.1974062617732972}], 
        InsetBox[
         FrameBox["Sphere",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.962751640792426, 1.4368875141279567}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.843011014615096, 1.1974062617732972}], 
        InsetBox[
         FrameBox["2",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.483789136083107, 0.9579250094186378}], 
        InsetBox[
         FrameBox["3",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.723270388437767, 0.9579250094186378}], 
        InsetBox[
         FrameBox["4",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.962751640792426, 0.9579250094186378}], 
        InsetBox[
         FrameBox["5",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.202232893147086, 0.9579250094186378}], 
        InsetBox[
         FrameBox["0.24`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.082492266969757, 1.1974062617732972}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.758861033452373, 1.9158500188372756}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.800936024033735, 1.6763687664826161}], 
        InsetBox[
         FrameBox["RGBColor",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.561454771679076, 1.4368875141279567}], 
        InsetBox[
         FrameBox["0.4`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.321973519324416, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.4`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.561454771679076, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.4`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.800936024033735, 1.1974062617732972}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.040417276388395, 1.4368875141279567}], 
        InsetBox[
         FrameBox["Cylinder",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.040417276388395, 1.1974062617732972}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.920676650211064, 0.9579250094186378}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.202232893147086, 0.7184437570639783}], 
        InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.082492266969757, 0.4789625047093189}], 
        InsetBox[
         FrameBox["6",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.321973519324416, 0.4789625047093189}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.681195397856404, 0.7184437570639783}], 
        InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.561454771679076, 0.4789625047093189}], 
        InsetBox[
         FrameBox["7",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.800936024033735, 0.4789625047093189}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.160157902565723, 0.7184437570639783}], 
        InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.040417276388395, 0.4789625047093189}], 
        InsetBox[
         FrameBox["8",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.279898528743054, 0.4789625047093189}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.639120407275042, 0.7184437570639783}], 
        InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.519379781097713, 0.4789625047093189}], 
        InsetBox[
         FrameBox["9",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.758861033452373, 0.4789625047093189}], 
        InsetBox[
         FrameBox["0.15`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.160157902565723, 0.9579250094186378}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.716786042871009, 1.6763687664826161}], 
        InsetBox[
         FrameBox["RGBColor",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.47730479051635, 1.4368875141279567}], 
        InsetBox[
         FrameBox["0.65`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.23782353816169, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.7`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.47730479051635, 1.1974062617732972}], 
        InsetBox[
         FrameBox["0.7`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.716786042871009, 1.1974062617732972}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.956267295225668, 1.4368875141279567}], 
        InsetBox[
         FrameBox["Cylinder",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.956267295225668, 1.1974062617732972}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.83652666904834, 0.9579250094186378}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.118082911984361, 0.7184437570639783}], 
        InsetBox[
         FrameBox["6",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.998342285807032, 0.4789625047093189}], 
        InsetBox[
         FrameBox["2",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.23782353816169, 0.4789625047093189}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.59704541669368, 0.7184437570639783}], 
        InsetBox[
         FrameBox["7",
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.47730479051635, 0.4789625047093189}], 
        InsetBox[
         FrameBox["3",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.716786042871009, 0.4789625047093189}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.076007921402999, 0.7184437570639783}], 
        InsetBox[
         FrameBox["8",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.956267295225668, 0.4789625047093189}], 
        InsetBox[
         FrameBox["4",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.195748547580328, 0.4789625047093189}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.554970426112318, 0.7184437570639783}], 
        InsetBox[
         FrameBox["9",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.435229799934987, 0.4789625047093189}], 
        InsetBox[
         FrameBox["5",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.674711052289647, 0.4789625047093189}], 
        InsetBox[
         FrameBox["0.15`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.076007921402999, 0.9579250094186378}], 
        InsetBox[
         FrameBox["List",
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.315489173757658, 1.9158500188372756}], 
        InsetBox[
         FrameBox["Opacity",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.195748547580328, 1.6763687664826161}], 
        InsetBox[
         FrameBox["0.7`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.195748547580328, 1.4368875141279567}], 
        InsetBox[
         FrameBox[
          GraphicsBox[
           NamespaceBox["Trees",
            DynamicModuleBox[{Typeset`tree = HoldComplete[
              Tree[List, None]]}, {{}, 
              {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
               StyleBox[InsetBox[
                 FrameBox["List",
                  
                  Background->RGBColor[
                   0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
                  FrameStyle->Directive[
                    RGBColor[
                    0.6588235294117647, 0.7294117647058823, 
                    0.7058823529411765], 
                    AbsoluteThickness[1]],
                  ImageSize->Automatic,
                  RoundingRadius->0,
                  StripOnInput->False], {1., 1.}],
                
                GraphicsHighlightColor->RGBColor[
                 0.403921568627451, 0.8705882352941177, 
                  0.7176470588235294]]}}]],
           
           BaseStyle->{
            FrontEnd`GraphicsHighlightColor -> 
             RGBColor[
              0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
           FormatType->StandardForm,
           FrameTicks->None,
           PlotRangePadding->0.1],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.435229799934987, 1.6763687664826161}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.510896548392304, 2.634293775901254}], 
        InsetBox[
         FrameBox["Boxed",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.391155922214974, 2.3948125235465945}], 
        InsetBox[
         FrameBox["False",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.6306371745696335, 2.3948125235465945}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.989859053101623, 2.634293775901254}], 
        InsetBox[
         FrameBox["Lighting",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.870118426924293, 2.3948125235465945}], 
        InsetBox[
         FrameBox["\<\"Neutral\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.109599679278952, 2.3948125235465945}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.273414183176296, 2.634293775901254}], 
        InsetBox[
         FrameBox["Method",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.153673556998966, 2.3948125235465945}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.393154809353625, 2.3948125235465945}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.674711052289647, 2.155331271191935}], 
        InsetBox[
         FrameBox["\<\"ShrinkWrap\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.554970426112318, 1.9158500188372756}], 
        InsetBox[
         FrameBox["True",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.794451678466977, 1.9158500188372756}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.153673556998966, 2.155331271191935}], 
        InsetBox[
         FrameBox["\<\"DefaultBoundaryStyle\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.033932930821637, 1.9158500188372756}], 
        InsetBox[
         FrameBox["Automatic",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.273414183176296, 1.9158500188372756}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.632636061708284, 2.155331271191935}], 
        InsetBox[
         FrameBox["\<\"DefaultGraphicsInteraction\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.512895435530956, 1.9158500188372756}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.752376687885615, 1.9158500188372756}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.033932930821637, 1.6763687664826161}], 
        InsetBox[
         FrameBox["\<\"Version\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.914192304644306, 1.4368875141279567}], 
        InsetBox[
         FrameBox["1.2`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.153673556998966, 1.4368875141279567}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.512895435530956, 1.6763687664826161}], 
        InsetBox[
         FrameBox["\<\"TrackMousePosition\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.393154809353625, 1.4368875141279567}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.632636061708284, 1.4368875141279567}], 
        InsetBox[
         FrameBox["True",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.512895435530956, 1.1974062617732972}], 
        InsetBox[
         FrameBox["False",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.752376687885615, 1.1974062617732972}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.470820444949593, 1.6763687664826161}], 
        InsetBox[
         FrameBox["\<\"Effects\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.351079818772263, 1.4368875141279567}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.590561071126922, 1.4368875141279567}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.991857940240275, 1.1974062617732972}], 
        InsetBox[
         FrameBox["\<\"Highlight\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.872117314062944, 0.9579250094186378}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.111598566417603, 0.9579250094186378}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.111598566417603, 0.7184437570639783}], 
        InsetBox[
         FrameBox["\<\"ratio\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.991857940240275, 0.4789625047093189}], 
        InsetBox[
         FrameBox["2",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.231339192594934, 0.4789625047093189}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.470820444949593, 1.1974062617732972}], 
        InsetBox[
         FrameBox["\<\"HighlightPoint\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.351079818772263, 0.9579250094186378}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.590561071126922, 0.9579250094186378}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.590561071126922, 0.7184437570639783}], 
        InsetBox[
         FrameBox["\<\"ratio\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.470820444949593, 0.4789625047093189}], 
        InsetBox[
         FrameBox["2",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.710301697304253, 0.4789625047093189}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.189264202013572, 1.1974062617732972}], 
        InsetBox[
         FrameBox["\<\"Droplines\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.069523575836241, 0.9579250094186378}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.3090048281909, 0.9579250094186378}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.069523575836241, 0.7184437570639783}], 
        InsetBox[
         FrameBox["\<\"freeformCursorMode\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.949782949658912, 0.4789625047093189}], 
        InsetBox[
         FrameBox["True",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.189264202013572, 0.4789625047093189}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.54848608054556, 0.7184437570639783}], 
        InsetBox[
         FrameBox["\<\"placement\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.428745454368231, 0.4789625047093189}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.66822670672289, 0.4789625047093189}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.428745454368231, 0.23948125235465945}], 
        InsetBox[
         FrameBox["\<\"x\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.3090048281909, 0.}], InsetBox[
         FrameBox["\<\"All\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.54848608054556, 0.}], InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.90770795907755, 0.23948125235465945}], 
        InsetBox[
         FrameBox["\<\"y\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.78796733290022, 0.}], InsetBox[
         FrameBox["\<\"None\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {15.027448585254879, 0.}], InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.111598566417603, 2.155331271191935}], 
        InsetBox[
         FrameBox["\<\"DefaultPlotStyle\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.991857940240275, 1.9158500188372756}], 
        InsetBox[
         FrameBox["Automatic",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.231339192594934, 1.9158500188372756}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.470820444949593, 2.634293775901254}], 
        InsetBox[
         FrameBox["ViewPoint",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.351079818772263, 2.3948125235465945}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.590561071126922, 2.3948125235465945}], 
        InsetBox[
         FrameBox["1.3023040136632529`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.351079818772263, 2.155331271191935}], 
        InsetBox[
         FrameBox[
          RowBox[{"-", "2.393283346182469`"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.590561071126922, 2.155331271191935}], 
        InsetBox[
         FrameBox["2.000149764613196`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.830042323481582, 2.155331271191935}]},
       GraphicsHighlightColor->RGBColor[
        0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
  BaseStyle->{
   FrontEnd`GraphicsHighlightColor -> 
    RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
  FormatType->StandardForm,
  FrameTicks->None,
  ImageSize->{1412.4664311968756`, Automatic}]], "Input",ExpressionUUID->\
"1aaf130d-45c5-41ea-bab5-890f53857993"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree[GeoGraphics, {
       Tree[Graphics, {
         Tree[List, {
           Tree[List, {
             Tree[Annotation, {
               Tree[List, {
                 Tree[Texture, {
                   Tree[
                    Image[CompressedData["
1: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
d/M+4fKSS/O9/wKESmFH
                    "], "Byte", ColorSpace -> "RGB", 
                    Interleaving -> False, MetaInformation -> 
                    Association[
                    "Exif" -> Association[
                    "Software" -> 
                    "Created with the Wolfram Language: www.wolfram.com"], 
                    "GeoMetaInformation" -> {
                    "Software" -> 
                    "Created with the Wolfram Language: www.wolfram.com", 
                    "TileSources" -> 
                    "Wolfram Knowledgebase with data from \[Copyright] \
OpenStreetMap contributors: http://www.openstreetmap.org/copyright", 
                    "Projection" -> "Mercator", 
                    "PlotRange" -> {{81.45332336425781, 81.80694580078125}, {
                    21.566162109375, 21.921844482421875`}}, 
                    "LonLatBox" -> {{81.45364599553969, 81.80635400446027}, {
                    21.074661725316457`, 21.405335598400928`}}, "GeoModel" -> 
                    "ITRF00"}]], None]}], 
                 Tree[Polygon, {
                   Tree[List, {
                    Tree[List, {
                    Tree[81.45364599553969, None], 
                    Tree[21.566604497495902`, None]}], 
                    Tree[List, {
                    Tree[81.45364599553969, None], 
                    Tree[21.92137835890167, None]}], 
                    Tree[List, {
                    Tree[81.80635400446027, None], 
                    Tree[21.92137835890167, None]}], 
                    Tree[List, {
                    Tree[81.80635400446027, None], 
                    Tree[21.566604497495902`, None]}], 
                    Tree[List, {
                    Tree[81.45364599553969, None], 
                    Tree[21.566604497495902`, None]}]}], 
                   Tree[Rule, {
                    Tree[VertexTextureCoordinates, None], 
                    Tree[List, {
                    Tree[List, {
                    Tree[0.0009123608927268378, None], 
                    Tree[0.0012437729683156817`, None]}], 
                    Tree[List, {
                    Tree[0.0009123608927268378, None], 
                    Tree[0.998689495022731, None]}], 
                    Tree[List, {
                    Tree[0.9983264740586435, None], 
                    Tree[0.998689495022731, None]}], 
                    Tree[List, {
                    Tree[0.9983264740586435, None], 
                    Tree[0.0012437729683156817`, None]}], 
                    Tree[List, {
                    Tree[0.0009123608927268378, None], 
                    Tree[0.0012437729683156817`, None]}]}]}]}]}], 
               Tree["GeoBackground", None], 
               Tree["WolframGeoGraphics", None]}], 
             Tree[Annotation, {
               Tree[Tooltip, {
                 Tree[List, {
                   Tree[Opacity, {
                    Tree[0, None]}], 
                   Tree[Polygon, {
                    Tree[List, {
                    Tree[List, {
                    Tree[81.73581240267616, None], 
                    Tree[21.637559269777057`, None]}], 
                    Tree[List, {
                    Tree[81.80635400446027, None], 
                    Tree[21.637559269777057`, None]}], 
                    Tree[List, {
                    Tree[81.80635400446027, None], 
                    Tree[21.566604497495902`, None]}], 
                    Tree[List, {
                    Tree[81.73581240267616, None], 
                    Tree[21.566604497495902`, None]}], 
                    Tree[List, {
                    Tree[81.73581240267616, None], 
                    Tree[21.637559269777057`, None]}]}]}]}], 
                 Tree[
                 "Wolfram Knowledgebase with data from \[Copyright] \
OpenStreetMap contributors: http://www.openstreetmap.org/copyright", None]}], 
               
               Tree["Metadata", None], 
               Tree["WolframGeoGraphics", None]}], 
             Tree[List, {
               Tree[List, {
                 Tree[
                  Tree[List, None], None], 
                 Tree[Annotation, {
                   Tree[
                    Tree[List, None], None], 
                   Tree["GeoGridLines", None], 
                   Tree["WolframGeoGraphics", None]}]}]}]}], 
           Tree[Annotation, {
             Tree[
              Tree[List, None], None], 
             Tree["GeoScaleBar", None], 
             Tree["WolframGeoGraphics", None]}]}], 
         Tree[List, {
           Tree[Rule, {
             Tree[Method, None], 
             Tree[List, {
               Tree[Rule, {
                 Tree["OriginalInput", None], 
                 Tree[HoldForm, {
                   Tree[GeoGraphics, {
                    Tree[List, {
                    Tree[Entity, {
                    Tree["City", None], 
                    Tree[List, {
                    Tree["Raipur", None], 
                    Tree["Chhattisgarh", None], 
                    Tree["India", None]}]}]}]}]}]}], 
               Tree[Rule, {
                 Tree["BasicGeoRange", None], 
                 Tree[List, {
                   Tree[List, {
                    Tree[21.08969235591121, None], 
                    Tree[21.39030496780618, None]}], 
                   Tree[List, {
                    Tree[81.46967817776336, None], 
                    Tree[81.7903218222366, None]}]}]}]}]}], 
           Tree[Rule, {
             Tree[CoordinatesToolOptions, None], 
             Tree[List, {
               Tree[Rule, {
                 Tree["DisplayFunction", None], 
                 Tree[Function, {
                   Tree[GeoGraphics`GeoGridPositionDisplay, {
                    Tree[Slot, {
                    Tree[1, None]}], 
                    Tree["Mercator", None], 
                    Tree["ITRF00", None]}]}]}], 
               Tree[Rule, {
                 Tree["CopiedValueFunction", None], 
                 Tree[Function, {
                   Tree[GeoGraphics`GeoGridPositionCopiedValue, {
                    Tree[Slot, {
                    Tree[1, None]}], 
                    Tree["Mercator", None], 
                    Tree["ITRF00", None]}]}]}]}]}], 
           Tree[Rule, {
             Tree[PlotRange, None], 
             Tree[List, {
               Tree[List, {
                 Tree[81.45364599553969, None], 
                 Tree[81.80635400446027, None]}], 
               Tree[List, {
                 Tree[21.566604497495902`, None], 
                 Tree[21.92137835890167, None]}]}]}], 
           Tree[Rule, {
             Tree[PlotRangePadding, None], 
             Tree[None, None]}], 
           Tree[Rule, {
             Tree[PlotRangeClipping, None], 
             Tree[True, None]}]}]}], 
       Tree[Rule, {
         Tree[GeoBackground, None], 
         Tree[Automatic, None]}], 
       Tree[Rule, {
         Tree[GeoCenter, None], 
         Tree[GeoPosition, {
           Tree[List, {
             Tree[21.240000000000002`, None], 
             Tree[81.62999999999998, None]}]}]}], 
       Tree[Rule, {
         Tree[GeoGridLines, None], 
         Tree[None, None]}], 
       Tree[Rule, {
         Tree[GeoGridLinesStyle, None], 
         Tree[GrayLevel, {
           Tree[0.4, None], 
           Tree[0.3, None]}]}], 
       Tree[Rule, {
         Tree[GeoGridRange, None], 
         Tree[List, {
           Tree[List, {
             Tree[81.45364599553969, None], 
             Tree[81.80635400446027, None]}], 
           Tree[List, {
             Tree[21.566604497495902`, None], 
             Tree[21.92137835890167, None]}]}]}], 
       Tree[Rule, {
         Tree[GeoGridRangePadding, None], 
         Tree[None, None]}], 
       Tree[Rule, {
         Tree[GeoModel, None], 
         Tree["ITRF00", None]}], 
       Tree[Rule, {
         Tree[GeoProjection, None], 
         Tree["Mercator", None]}], 
       Tree[Rule, {
         Tree[GeoRange, None], 
         Tree[List, {
           Tree[List, {
             Tree[21.074661725316464`, None], 
             Tree[21.405335598400928`, None]}], 
           Tree[List, {
             Tree[81.45364599553969, None], 
             Tree[81.80635400446027, None]}]}]}], 
       Tree[Rule, {
         Tree[GeoRangePadding, None], 
         Tree[Full, None]}], 
       Tree[Rule, {
         Tree[GeoResolution, None], 
         Tree[Automatic, None]}], 
       Tree[Rule, {
         Tree[GeoServer, None], 
         Tree[List, {
           Tree[Automatic, None]}]}], 
       Tree[Rule, {
         Tree[GeoZoomLevel, None], 
         Tree[11, None]}], 
       Tree[Rule, {
         Tree[MetaInformation, None], 
         Tree[List, {
           Tree[Rule, {
             Tree["GeoModel", None], 
             Tree["ITRF00", None]}], 
           Tree[Rule, {
             Tree["LonLatBox", None], 
             Tree[List, {
               Tree[List, {
                 Tree[81.45364599553969, None], 
                 Tree[81.80635400446027, None]}], 
               Tree[List, {
                 Tree[21.074661725316457`, None], 
                 Tree[21.405335598400928`, None]}]}]}], 
           Tree[Rule, {
             Tree["PlotRange", None], 
             Tree[List, {
               Tree[List, {
                 Tree[81.45332336425781, None], 
                 Tree[81.80694580078125, None]}], 
               Tree[List, {
                 Tree[21.566162109375, None], 
                 Tree[21.921844482421875`, None]}]}]}], 
           Tree[Rule, {
             Tree["Projection", None], 
             Tree["Mercator", None]}], 
           Tree[Rule, {
             Tree["Software", None], 
             Tree[
             "Created with the Wolfram Language: www.wolfram.com", None]}], 
           Tree[Rule, {
             Tree["TileSources", None], 
             Tree[
             "Wolfram Knowledgebase with data from \[Copyright] OpenStreetMap \
contributors: http://www.openstreetmap.org/copyright", None]}]}]}]}]]}, {
     {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
      AbsoluteThickness[1], Opacity[0.7], 
      StyleBox[{
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         8.790993711023198, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         11.461113899739628`, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         13.554630060992377`, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         14.12236325726431, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         14.69009645353624, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         15.399762948876155`, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         15.967496145148088`, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         16.53522934142002, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         17.102962537691955`, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         17.670695733963885`, 2.83866598135966}}], 
        LineBox[{{13.372778021561524`, 3.1225325794956262`}, {
         17.95456233209985, 2.83866598135966}}], 
        LineBox[{{8.790993711023198, 2.83866598135966}, {6.546673419510716, 
         2.554799383223694}}], 
        LineBox[{{8.790993711023198, 2.83866598135966}, {11.035314002535678`, 
         2.554799383223694}}], 
        LineBox[{{6.546673419510716, 2.554799383223694}, {4.861215493078419, 
         2.2709327850877283`}}], 
        LineBox[{{6.546673419510716, 2.554799383223694}, {8.232131345943014, 
         2.2709327850877283`}}], 
        LineBox[{{4.861215493078419, 2.2709327850877283`}, {
         2.0580328364857534`, 1.987066186951762}}], 
        LineBox[{{4.861215493078419, 2.2709327850877283`}, {7.09666495339915, 
         1.987066186951762}}], 
        LineBox[{{4.861215493078419, 2.2709327850877283`}, {7.664398149671083,
          1.987066186951762}}], 
        LineBox[{{2.0580328364857534`, 1.987066186951762}, {
         1.7741662383497876`, 1.703199588815796}}], 
        LineBox[{{2.0580328364857534`, 1.987066186951762}, {
         2.0580328364857534`, 1.703199588815796}}], 
        LineBox[{{2.0580328364857534`, 1.987066186951762}, {
         2.3418994346217197`, 1.703199588815796}}], 
        LineBox[{{1.7741662383497876`, 1.703199588815796}, {0.993533093475881,
          1.4193329906798302`}}], 
        LineBox[{{1.7741662383497876`, 1.703199588815796}, {2.554799383223694,
          1.4193329906798302`}}], 
        LineBox[{{0.993533093475881, 1.4193329906798302`}, {0.993533093475881,
          1.1354663925438642`}}], 
        LineBox[{{2.554799383223694, 1.4193329906798302`}, {1.277399691611847,
          1.1354663925438642`}}], 
        LineBox[{{2.554799383223694, 1.4193329906798302`}, {
         3.8321990748355415`, 1.1354663925438642`}}], 
        LineBox[{{1.277399691611847, 1.1354663925438642`}, {
         0.14193329906798302`, 0.8515997944078979}}], 
        LineBox[{{1.277399691611847, 1.1354663925438642`}, {0.709666495339915,
          0.8515997944078979}}], 
        LineBox[{{1.277399691611847, 1.1354663925438642`}, {1.277399691611847,
          0.8515997944078979}}], 
        LineBox[{{1.277399691611847, 1.1354663925438642`}, {1.845132887883779,
          0.8515997944078979}}], 
        LineBox[{{1.277399691611847, 1.1354663925438642`}, {2.412866084155711,
          0.8515997944078979}}], 
        LineBox[{{0.14193329906798302`, 0.8515997944078979}, {0., 
         0.5677331962719321}}], 
        LineBox[{{0.14193329906798302`, 0.8515997944078979}, {
         0.28386659813596593`, 0.5677331962719321}}], 
        LineBox[{{0.709666495339915, 0.8515997944078979}, {0.5677331962719321,
          0.5677331962719321}}], 
        LineBox[{{0.709666495339915, 0.8515997944078979}, {0.851599794407898, 
         0.5677331962719321}}], 
        LineBox[{{1.277399691611847, 0.8515997944078979}, {
         1.1354663925438642`, 0.5677331962719321}}], 
        LineBox[{{1.277399691611847, 0.8515997944078979}, {1.41933299067983, 
         0.5677331962719321}}], 
        LineBox[{{1.845132887883779, 0.8515997944078979}, {
         1.7031995888157963`, 0.5677331962719321}}], 
        LineBox[{{1.845132887883779, 0.8515997944078979}, {1.987066186951762, 
         0.5677331962719321}}], 
        LineBox[{{2.412866084155711, 0.8515997944078979}, {
         2.2709327850877283`, 0.5677331962719321}}], 
        LineBox[{{2.412866084155711, 0.8515997944078979}, {2.554799383223694, 
         0.5677331962719321}}], 
        LineBox[{{3.8321990748355415`, 1.1354663925438642`}, {
         3.6902657757675583`, 0.8515997944078979}}], 
        LineBox[{{3.8321990748355415`, 1.1354663925438642`}, {
         3.974132373903524, 0.8515997944078979}}], 
        LineBox[{{3.974132373903524, 0.8515997944078979}, {2.83866598135966, 
         0.5677331962719321}}], 
        LineBox[{{3.974132373903524, 0.8515997944078979}, {3.406399177631592, 
         0.5677331962719321}}], 
        LineBox[{{3.974132373903524, 0.8515997944078979}, {3.974132373903524, 
         0.5677331962719321}}], 
        LineBox[{{3.974132373903524, 0.8515997944078979}, {4.541865570175457, 
         0.5677331962719321}}], 
        LineBox[{{3.974132373903524, 0.8515997944078979}, {5.109598766447389, 
         0.5677331962719321}}], 
        LineBox[{{2.83866598135966, 0.5677331962719321}, {2.6967326822916773`,
          0.2838665981359658}}], 
        LineBox[{{2.83866598135966, 0.5677331962719321}, {2.980599280427643, 
         0.2838665981359658}}], 
        LineBox[{{3.406399177631592, 0.5677331962719321}, {
         3.2644658785636094`, 0.2838665981359658}}], 
        LineBox[{{3.406399177631592, 0.5677331962719321}, {3.548332476699575, 
         0.2838665981359658}}], 
        LineBox[{{3.974132373903524, 0.5677331962719321}, {
         3.8321990748355415`, 0.2838665981359658}}], 
        LineBox[{{3.974132373903524, 0.5677331962719321}, {4.116065672971507, 
         0.2838665981359658}}], 
        LineBox[{{4.541865570175457, 0.5677331962719321}, {4.399932271107473, 
         0.2838665981359658}}], 
        LineBox[{{4.541865570175457, 0.5677331962719321}, {4.683798869243439, 
         0.2838665981359658}}], 
        LineBox[{{5.109598766447389, 0.5677331962719321}, {4.967665467379405, 
         0.2838665981359658}}], 
        LineBox[{{5.109598766447389, 0.5677331962719321}, {5.251532065515372, 
         0.2838665981359658}}], 
        LineBox[{{7.09666495339915, 1.987066186951762}, {6.812798355263185, 
         1.703199588815796}}], 
        LineBox[{{7.09666495339915, 1.987066186951762}, {7.09666495339915, 
         1.703199588815796}}], 
        LineBox[{{7.09666495339915, 1.987066186951762}, {7.380531551535116, 
         1.703199588815796}}], 
        LineBox[{{6.812798355263185, 1.703199588815796}, {6.670865056195202, 
         1.4193329906798302`}}], 
        LineBox[{{6.812798355263185, 1.703199588815796}, {6.954731654331168, 
         1.4193329906798302`}}], 
        LineBox[{{6.670865056195202, 1.4193329906798302`}, {6.528931757127218,
          1.1354663925438642`}}], 
        LineBox[{{6.670865056195202, 1.4193329906798302`}, {6.812798355263185,
          1.1354663925438642`}}], 
        LineBox[{{6.528931757127218, 1.1354663925438642`}, {6.528931757127218,
          0.8515997944078979}}], 
        LineBox[{{6.812798355263185, 1.1354663925438642`}, {6.812798355263185,
          0.8515997944078979}}], 
        LineBox[{{6.812798355263185, 0.8515997944078979}, {5.67733196271932, 
         0.5677331962719321}}], 
        LineBox[{{6.812798355263185, 0.8515997944078979}, {
         6.2450651589912525`, 0.5677331962719321}}], 
        LineBox[{{6.812798355263185, 0.8515997944078979}, {6.812798355263185, 
         0.5677331962719321}}], 
        LineBox[{{6.812798355263185, 0.8515997944078979}, {7.380531551535116, 
         0.5677331962719321}}], 
        LineBox[{{6.812798355263185, 0.8515997944078979}, {7.948264747807048, 
         0.5677331962719321}}], 
        LineBox[{{5.67733196271932, 0.5677331962719321}, {5.535398663651337, 
         0.2838665981359658}}], 
        LineBox[{{5.67733196271932, 0.5677331962719321}, {5.819265261787303, 
         0.2838665981359658}}], 
        LineBox[{{6.2450651589912525`, 0.5677331962719321}, {6.10313185992327,
          0.2838665981359658}}], 
        LineBox[{{6.2450651589912525`, 0.5677331962719321}, {
         6.386998458059235, 0.2838665981359658}}], 
        LineBox[{{6.812798355263185, 0.5677331962719321}, {6.670865056195202, 
         0.2838665981359658}}], 
        LineBox[{{6.812798355263185, 0.5677331962719321}, {6.954731654331168, 
         0.2838665981359658}}], 
        LineBox[{{7.380531551535116, 0.5677331962719321}, {7.238598252467133, 
         0.2838665981359658}}], 
        LineBox[{{7.380531551535116, 0.5677331962719321}, {7.5224648506031, 
         0.2838665981359658}}], 
        LineBox[{{7.948264747807048, 0.5677331962719321}, {7.806331448739066, 
         0.2838665981359658}}], 
        LineBox[{{7.948264747807048, 0.5677331962719321}, {8.090198046875031, 
         0.2838665981359658}}], 
        LineBox[{{7.664398149671083, 1.987066186951762}, {7.664398149671083, 
         1.703199588815796}}], 
        LineBox[{{7.664398149671083, 1.703199588815796}, {7.5224648506031, 
         1.4193329906798302`}}], 
        LineBox[{{7.664398149671083, 1.703199588815796}, {7.806331448739066, 
         1.4193329906798302`}}], 
        LineBox[{{7.806331448739066, 1.4193329906798302`}, {7.5224648506031, 
         1.1354663925438642`}}], 
        LineBox[{{7.806331448739066, 1.4193329906798302`}, {7.806331448739066,
          1.1354663925438642`}}], 
        LineBox[{{7.806331448739066, 1.4193329906798302`}, {8.090198046875031,
          1.1354663925438642`}}], 
        LineBox[{{8.232131345943014, 2.2709327850877283`}, {7.948264747807048,
          1.987066186951762}}], 
        LineBox[{{8.232131345943014, 2.2709327850877283`}, {8.232131345943014,
          1.987066186951762}}], 
        LineBox[{{8.232131345943014, 2.2709327850877283`}, {8.51599794407898, 
         1.987066186951762}}], 
        LineBox[{{11.035314002535678`, 2.554799383223694}, {8.941797841282929,
          2.2709327850877283`}}], 
        LineBox[{{11.035314002535678`, 2.554799383223694}, {
         10.715964079632716`, 2.2709327850877283`}}], 
        LineBox[{{11.035314002535678`, 2.554799383223694}, {
         11.993363771244564`, 2.2709327850877283`}}], 
        LineBox[{{11.035314002535678`, 2.554799383223694}, {
         12.561096967516496`, 2.2709327850877283`}}], 
        LineBox[{{11.035314002535678`, 2.554799383223694}, {
         13.128830163788429`, 2.2709327850877283`}}], 
        LineBox[{{8.941797841282929, 2.2709327850877283`}, {8.799864542214946,
          1.987066186951762}}], 
        LineBox[{{8.941797841282929, 2.2709327850877283`}, {9.083731140350912,
          1.987066186951762}}], 
        LineBox[{{9.083731140350912, 1.987066186951762}, {8.728897892680955, 
         1.703199588815796}}], 
        LineBox[{{9.083731140350912, 1.987066186951762}, {9.43856438802087, 
         1.703199588815796}}], 
        LineBox[{{8.728897892680955, 1.703199588815796}, {8.586964593612972, 
         1.4193329906798302`}}], 
        LineBox[{{8.728897892680955, 1.703199588815796}, {8.870831191748938, 
         1.4193329906798302`}}], 
        LineBox[{{8.870831191748938, 1.4193329906798302`}, {8.870831191748938,
          1.1354663925438642`}}], 
        LineBox[{{8.870831191748938, 1.1354663925438642`}, {8.870831191748938,
          0.8515997944078979}}], 
        LineBox[{{8.870831191748938, 0.8515997944078979}, {8.870831191748938, 
         0.5677331962719321}}], 
        LineBox[{{8.870831191748938, 0.5677331962719321}, {8.728897892680955, 
         0.2838665981359658}}], 
        LineBox[{{8.870831191748938, 0.5677331962719321}, {9.01276449081692, 
         0.2838665981359658}}], 
        LineBox[{{9.01276449081692, 0.2838665981359658}, {8.728897892680955, 
         0.}}], LineBox[{{9.01276449081692, 0.2838665981359658}, {
         9.01276449081692, 0.}}], 
        LineBox[{{9.01276449081692, 0.2838665981359658}, {9.296631088952887, 
         0.}}], LineBox[{{9.43856438802087, 1.703199588815796}, {
         9.296631088952887, 1.4193329906798302`}}], 
        LineBox[{{9.43856438802087, 1.703199588815796}, {9.580497687088853, 
         1.4193329906798302`}}], 
        LineBox[{{9.580497687088853, 1.4193329906798302`}, {9.296631088952887,
          1.1354663925438642`}}], 
        LineBox[{{9.580497687088853, 1.4193329906798302`}, {9.864364285224818,
          1.1354663925438642`}}], 
        LineBox[{{9.296631088952887, 1.1354663925438642`}, {9.154697789884903,
          0.8515997944078979}}], 
        LineBox[{{9.296631088952887, 1.1354663925438642`}, {9.43856438802087, 
         0.8515997944078979}}], 
        LineBox[{{9.864364285224818, 1.1354663925438642`}, {9.722430986156835,
          0.8515997944078979}}], 
        LineBox[{{9.864364285224818, 1.1354663925438642`}, {
         10.006297584292803`, 0.8515997944078979}}], 
        LineBox[{{10.715964079632716`, 2.2709327850877283`}, {
         10.574030780564733`, 1.987066186951762}}], 
        LineBox[{{10.715964079632716`, 2.2709327850877283`}, {
         10.8578973787007, 1.987066186951762}}], 
        LineBox[{{10.8578973787007, 1.987066186951762}, {10.43209748149675, 
         1.703199588815796}}], 
        LineBox[{{10.8578973787007, 1.987066186951762}, {11.283697275904649`, 
         1.703199588815796}}], 
        LineBox[{{10.43209748149675, 1.703199588815796}, {10.290164182428768`,
          1.4193329906798302`}}], 
        LineBox[{{10.43209748149675, 1.703199588815796}, {10.574030780564733`,
          1.4193329906798302`}}], 
        LineBox[{{10.574030780564733`, 1.4193329906798302`}, {
         10.574030780564733`, 1.1354663925438642`}}], 
        LineBox[{{10.574030780564733`, 1.1354663925438642`}, {
         10.290164182428768`, 0.8515997944078979}}], 
        LineBox[{{10.574030780564733`, 1.1354663925438642`}, {
         10.574030780564733`, 0.8515997944078979}}], 
        LineBox[{{10.574030780564733`, 1.1354663925438642`}, {
         10.8578973787007, 0.8515997944078979}}], 
        LineBox[{{10.290164182428768`, 0.8515997944078979}, {
         10.290164182428768`, 0.5677331962719321}}], 
        LineBox[{{11.283697275904649`, 1.703199588815796}, {
         11.141763976836666`, 1.4193329906798302`}}], 
        LineBox[{{11.283697275904649`, 1.703199588815796}, {
         11.425630574972631`, 1.4193329906798302`}}], 
        LineBox[{{11.425630574972631`, 1.4193329906798302`}, {
         11.425630574972631`, 1.1354663925438642`}}], 
        LineBox[{{11.425630574972631`, 1.1354663925438642`}, {
         11.141763976836666`, 0.8515997944078979}}], 
        LineBox[{{11.425630574972631`, 1.1354663925438642`}, {
         11.425630574972631`, 0.8515997944078979}}], 
        LineBox[{{11.425630574972631`, 1.1354663925438642`}, {
         11.709497173108598`, 0.8515997944078979}}], 
        LineBox[{{11.141763976836666`, 0.8515997944078979}, {
         11.141763976836666`, 0.5677331962719321}}], 
        LineBox[{{11.993363771244564`, 2.2709327850877283`}, {
         11.851430472176581`, 1.987066186951762}}], 
        LineBox[{{11.993363771244564`, 2.2709327850877283`}, {
         12.135297070312546`, 1.987066186951762}}], 
        LineBox[{{12.135297070312546`, 1.987066186951762}, {
         11.851430472176581`, 1.703199588815796}}], 
        LineBox[{{12.135297070312546`, 1.987066186951762}, {
         12.419163668448514`, 1.703199588815796}}], 
        LineBox[{{11.851430472176581`, 1.703199588815796}, {
         11.709497173108598`, 1.4193329906798302`}}], 
        LineBox[{{11.851430472176581`, 1.703199588815796}, {
         11.993363771244564`, 1.4193329906798302`}}], 
        LineBox[{{12.419163668448514`, 1.703199588815796}, {12.27723036938053,
          1.4193329906798302`}}], 
        LineBox[{{12.419163668448514`, 1.703199588815796}, {
         12.561096967516496`, 1.4193329906798302`}}], 
        LineBox[{{12.561096967516496`, 2.2709327850877283`}, {
         12.419163668448514`, 1.987066186951762}}], 
        LineBox[{{12.561096967516496`, 2.2709327850877283`}, {
         12.703030266584479`, 1.987066186951762}}], 
        LineBox[{{13.128830163788429`, 2.2709327850877283`}, {
         12.986896864720444`, 1.987066186951762}}], 
        LineBox[{{13.128830163788429`, 2.2709327850877283`}, {
         13.270763462856412`, 1.987066186951762}}], 
        LineBox[{{11.461113899739628`, 2.83866598135966}, {
         11.319180600671645`, 2.554799383223694}}], 
        LineBox[{{11.461113899739628`, 2.83866598135966}, {11.60304719880761, 
         2.554799383223694}}], 
        LineBox[{{13.554630060992377`, 2.83866598135966}, {
         13.412696761924394`, 2.554799383223694}}], 
        LineBox[{{13.554630060992377`, 2.83866598135966}, {13.69656336006036, 
         2.554799383223694}}], 
        LineBox[{{13.69656336006036, 2.554799383223694}, {13.69656336006036, 
         2.2709327850877283`}}], 
        LineBox[{{13.69656336006036, 2.2709327850877283`}, {
         13.554630060992377`, 1.987066186951762}}], 
        LineBox[{{13.69656336006036, 2.2709327850877283`}, {
         13.838496659128342`, 1.987066186951762}}], 
        LineBox[{{14.12236325726431, 2.83866598135966}, {13.980429958196327`, 
         2.554799383223694}}], 
        LineBox[{{14.12236325726431, 2.83866598135966}, {14.264296556332292`, 
         2.554799383223694}}], 
        LineBox[{{14.69009645353624, 2.83866598135966}, {14.548163154468257`, 
         2.554799383223694}}], 
        LineBox[{{14.69009645353624, 2.83866598135966}, {14.832029752604225`, 
         2.554799383223694}}], 
        LineBox[{{14.832029752604225`, 2.554799383223694}, {14.69009645353624,
          2.2709327850877283`}}], 
        LineBox[{{14.832029752604225`, 2.554799383223694}, {
         14.973963051672207`, 2.2709327850877283`}}], 
        LineBox[{{15.399762948876155`, 2.83866598135966}, {
         15.257829649808173`, 2.554799383223694}}], 
        LineBox[{{15.399762948876155`, 2.83866598135966}, {15.54169624794414, 
         2.554799383223694}}], 
        LineBox[{{15.54169624794414, 2.554799383223694}, {15.257829649808173`,
          2.2709327850877283`}}], 
        LineBox[{{15.54169624794414, 2.554799383223694}, {15.825562846080105`,
          2.2709327850877283`}}], 
        LineBox[{{15.257829649808173`, 2.2709327850877283`}, {
         15.11589635074019, 1.987066186951762}}], 
        LineBox[{{15.257829649808173`, 2.2709327850877283`}, {
         15.399762948876155`, 1.987066186951762}}], 
        LineBox[{{15.825562846080105`, 2.2709327850877283`}, {
         15.683629547012123`, 1.987066186951762}}], 
        LineBox[{{15.825562846080105`, 2.2709327850877283`}, {
         15.967496145148088`, 1.987066186951762}}], 
        LineBox[{{15.967496145148088`, 2.83866598135966}, {
         15.825562846080105`, 2.554799383223694}}], 
        LineBox[{{15.967496145148088`, 2.83866598135966}, {
         16.109429444216072`, 2.554799383223694}}], 
        LineBox[{{16.53522934142002, 2.83866598135966}, {16.393296042352038`, 
         2.554799383223694}}], 
        LineBox[{{16.53522934142002, 2.83866598135966}, {16.677162640488003`, 
         2.554799383223694}}], 
        LineBox[{{17.102962537691955`, 2.83866598135966}, {16.96102923862397, 
         2.554799383223694}}], 
        LineBox[{{17.102962537691955`, 2.83866598135966}, {
         17.244895836759937`, 2.554799383223694}}], 
        LineBox[{{17.670695733963885`, 2.83866598135966}, {
         17.528762434895903`, 2.554799383223694}}], 
        LineBox[{{17.670695733963885`, 2.83866598135966}, {
         17.812629033031868`, 2.554799383223694}}], 
        LineBox[{{17.812629033031868`, 2.554799383223694}, {
         17.528762434895903`, 2.2709327850877283`}}], 
        LineBox[{{17.812629033031868`, 2.554799383223694}, {
         18.096495631167834`, 2.2709327850877283`}}], 
        LineBox[{{17.528762434895903`, 2.2709327850877283`}, {
         17.38682913582792, 1.987066186951762}}], 
        LineBox[{{17.528762434895903`, 2.2709327850877283`}, {
         17.670695733963885`, 1.987066186951762}}], 
        LineBox[{{18.096495631167834`, 2.2709327850877283`}, {
         17.95456233209985, 1.987066186951762}}], 
        LineBox[{{18.096495631167834`, 2.2709327850877283`}, {
         18.23842893023582, 1.987066186951762}}]},
       GraphicsHighlightColor->RGBColor[
        0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
     {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      StyleBox[{InsetBox[
         FrameBox["GeoGraphics",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.372778021561524, 3.1225325794956262}], 
        InsetBox[
         FrameBox["Graphics",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.790993711023198, 2.83866598135966}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.546673419510716, 2.554799383223694}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {4.861215493078419, 2.2709327850877283}], 
        InsetBox[
         FrameBox["Annotation",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {2.0580328364857534, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {1.7741662383497876, 1.703199588815796}], 
        InsetBox[
         FrameBox["Texture",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.993533093475881, 1.4193329906798302}], 
        InsetBox[
         FrameBox[
          GraphicsBox[
           TagBox[RasterBox[CompressedData["
1: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
qLW9xIxgE+TokQMIuCSJoOjzgHw+p7YExqeSMQT0LlhZQJLuMhTqZhvT1R8d
7oMvxsZG208e7mxvRfS7fMo28libDFqwAurpF8IWqNgvVBUiwBCABSLJTDCZ
m1veqt0UGyvR4e7ocL+wgBoPGuho+Ck1j0AENtTSIWMR0Ui3bjbplq6PKzaO
ubA2SkA6RJnTzZyTLisW8AdSkKNzJuFQNy+hgP6+Tj+XVPrRXb/i5cfAlNAD
LssSPY+sDn4hGU88MlihX2jzRLCUTcACE6kJLM1fDs6+/+EW7qbYKBkZ6Bx9
f3iVBaIDvGz4KTWVXFqccHacGBjPmEZBZCTUJG0NKpBVTbjRp1GZ2GLENpmZ
Xp9faU43c066rFiCgU5UBcwHsQIgAp/D+DKp0ZIsUFjrU1EuF+RSIe0XqkOX
uU36hTZDBAXLqkV9BcTmFqehgPHsNguUFlsY5dyZ9kQ8LCyAUYBp0PAzbELB
2LetyefnzJIo1L+tGylolHdo87KYnfDu+yQTCvRLc7rZfM/9t65UYWRSajwk
FIDYxl57iE8WEGGz4aF+TAP/Z1Vnv1Cov4zxxFUngoJVVjwykYQFMAe6E9tE
UFp0ITD/+7uPJydGhQWGQj1jDr13W0R42FH5bCvNPNKCFZoElLaog2iL9h0K
+igmTYzHza+2cdLlfaVbEnlKf19nx8nDCHaBf/fazPR5gL1ckyQWPRceCZX8
FBsg2i8U695faxbYvF9o80SQTsZOD0WwBSCCYHKbCEqLlAPzv7uzFewSFggF
OibiW76jZk2l6z27UaBbD2mR/sNbkQtSExFUgoafRlniTBl1FeeEgsXEkQq4
gMOptIG1UHJ2ehx7REYYd3ceDYe6URUUK1nZpJlkhDVDamXfSn695jc7PXb8
6MGWg2/pLnMSIEYAUp2HzIKsFEmMBmX9VDImMw5s5wbyc3owRSCgNHNgOdDT
Lk2w2W2tJxRv3i+0eSJYXkxLWXE+r9pNNPzmbDbhyqAO6QoLXl69eH4pm1BN
RKeTwgL9vR1T46GGn2qTi2om7NCZ22JZW3ETj/BWnGW5FSevccJ+estIQYGN
na9eaNfTzVjwak8nYtUR6CoDKUbr7Wr75ObCXXf9oRQR7HjheTZQluPtpW98
/e4Xnn3yxZ3P/ezZf/6zP/tTaRO06993fPMbdz/3s2d+8q9P6aYQvadOsJIt
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
O71mgr41MgqtLd7ULJ7voFdAHZB3WVJgUh0Ep53X0OOxr0aJsTk1BwZBMrkl
zb09Lw1DKaA2NCPO/MJJQT21svVZcuOCXDawOn89mdhk9aWdakJWYWlhVu+r
aqs2qQ4Cgm2FLXQBaATchzHW2CulaxXxMP3hMJQCMdspNzryh+fRURFcgEvj
fntHidruVsS/tHzn2nYm/vzZU9Z30ulBbyFWv9Rt30aeYnuKSktgW40gLUSd
2FHzoAd1Nla5/6As7x0JpQDCnykFIAWrzggWSG7xcTDhuvx+75RUJUqEXasL
N6ACNPar/zz/w7LPPQ9qeDy5omn0MGhD4MpILxf3EQ4J1H2G+zA0YZNS2OMC
KK1LglQFpVbJtarbuHVUnyGTTtbK2VrsXaYUWHI6TMj7cxNbBco1m/iCpWAB
IRn5p+yvVs7fXZ6DIuAEi1qO1oHuLf1iqzqpnuJTGxf8P2rmnfiQ/u4bWIAB
QrJWEXe2heZe3FqlwOv12KFubUFM4DkZ95hS/FJC3A2op/fLd64x+R/0reEj
qOGk7eTWWQ/jGcWV0MR6ik9tHJZjW4ayLaARnBztylkAgISkAm5YrkXeJCLY
d397wHNRNrFNKsJRrtmYuo9ru1vu5ZuQ8JDzULIw1fe557GyXIxB4M9du0Sl
5OrVPSk0yFEBhomtmG6DPKz/OFjJ1SeNCHBdaSGKGd36+j3ug9EExuZExPUE
EEFlX0kEhGw6Dr1A7ik42vlswF/HVvoayG4cXQbZpA9inzLC2F/7qBWNBBQe
gXDAXR1PphsjeD1Lel9RcYnJM0JS1KhtXbEYnm0ZyraA3vrFVlWTCDDVzKST
2KYZt0ApkMoadJrUc79kOUBz4+UyEOJuiHeS8+ACSH4xm2ThQOwPXwHLd65x
H/DEw8BTDF1gUh0EzbpoW29srZy5zykcZYyAWQoeThbJcHK0S25iTVBCAaRl
y/Mt4oLj0p3+zmsT74AmxsVlUNvdgi5Aoj6TirmXb5aLMSgIqws3wA4gbiku
tOMR8LpuB72LTqbACGBggsCLtrU7aXYhBshbvDU25AKwgFNZoisow4WI4NFR
UY8CCMV8iubwjfBrRAQH977Xx0kx5eaSO2AeuFj7uwwSYRdZfrYz8Yj/BYtE
tZwFI0DyOx6BUUJdTXGqgIkHZnd2uwO2VVVsBRABZimAFClqyAIS6iKUAuz1
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
jsZK1SuhCuhgSbBFeQ1L8P8BR8xhRw==
             "], {{0, 518.}, {515., 0}}, {0, 
             255},
             ColorFunction->RGBColor],
            BoxForm`ImageTag[
            "Byte", ColorSpace -> "RGB", Interleaving -> False, 
             MetaInformation -> 
             Association[
              "Exif" -> Association[
                "Software" -> 
                 "Created with the Wolfram Language: www.wolfram.com"], 
               "GeoMetaInformation" -> {
                "Software" -> 
                 "Created with the Wolfram Language: www.wolfram.com", 
                 "TileSources" -> 
                 "Wolfram Knowledgebase with data from \[Copyright] \
OpenStreetMap contributors: http://www.openstreetmap.org/copyright", 
                 "Projection" -> "Mercator", 
                 "PlotRange" -> {{81.45332336425781, 81.80694580078125}, {
                  21.566162109375, 21.921844482421875`}}, 
                 "LonLatBox" -> {{81.45364599553969, 81.80635400446027}, {
                  21.074661725316457`, 21.405335598400928`}}, "GeoModel" -> 
                 "ITRF00"}]],
            Selectable->False],
           DefaultBaseStyle->"ImageGraphics",
           ImageSizeRaw->{515., 518.},
           PlotRange->{{0, 515.}, {0, 518.}}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.993533093475881, 1.1354663925438642}], 
        InsetBox[
         FrameBox["Polygon",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {2.554799383223694, 1.4193329906798302}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {1.277399691611847, 1.1354663925438642}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.14193329906798302, 0.8515997944078979}], 
        InsetBox[
         FrameBox["81.45364599553969`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0., 0.5677331962719321}], InsetBox[
         FrameBox["21.566604497495902`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.28386659813596593, 0.5677331962719321}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.709666495339915, 0.8515997944078979}], 
        InsetBox[
         FrameBox["81.45364599553969`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.5677331962719321, 0.5677331962719321}], 
        InsetBox[
         FrameBox["21.92137835890167`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.851599794407898, 0.5677331962719321}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {1.277399691611847, 0.8515997944078979}], 
        InsetBox[
         FrameBox["81.80635400446027`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.1354663925438642, 0.5677331962719321}], 
        InsetBox[
         FrameBox["21.92137835890167`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.41933299067983, 0.5677331962719321}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {1.845132887883779, 0.8515997944078979}], 
        InsetBox[
         FrameBox["81.80635400446027`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.7031995888157963, 0.5677331962719321}], 
        InsetBox[
         FrameBox["21.566604497495902`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.987066186951762, 0.5677331962719321}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {2.412866084155711, 0.8515997944078979}], 
        InsetBox[
         FrameBox["81.45364599553969`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.2709327850877283, 0.5677331962719321}], 
        InsetBox[
         FrameBox["21.566604497495902`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.554799383223694, 0.5677331962719321}], 
        InsetBox[
         FrameBox["Rule",
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.8321990748355415, 1.1354663925438642}], 
        InsetBox[
         FrameBox["VertexTextureCoordinates",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.6902657757675583, 0.8515997944078979}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.974132373903524, 0.8515997944078979}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {2.83866598135966, 0.5677331962719321}], 
        InsetBox[
         FrameBox["0.0009123608927268378`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.6967326822916773, 0.2838665981359658}], 
        InsetBox[
         FrameBox["0.0012437729683156817`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.980599280427643, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.406399177631592, 0.5677331962719321}], 
        InsetBox[
         FrameBox["0.0009123608927268378`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.2644658785636094, 0.2838665981359658}], 
        InsetBox[
         FrameBox["0.998689495022731`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.548332476699575, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {3.974132373903524, 0.5677331962719321}], 
        InsetBox[
         FrameBox["0.9983264740586435`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {3.8321990748355415, 0.2838665981359658}], 
        InsetBox[
         FrameBox["0.998689495022731`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.116065672971507, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {4.541865570175457, 0.5677331962719321}], 
        InsetBox[
         FrameBox["0.9983264740586435`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.399932271107473, 0.2838665981359658}], 
        InsetBox[
         FrameBox["0.0012437729683156817`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.683798869243439, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {5.109598766447389, 0.5677331962719321}], 
        InsetBox[
         FrameBox["0.0009123608927268378`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {4.967665467379405, 0.2838665981359658}], 
        InsetBox[
         FrameBox["0.0012437729683156817`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.251532065515372, 0.2838665981359658}], 
        InsetBox[
         FrameBox["\<\"GeoBackground\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.0580328364857534, 1.703199588815796}], 
        InsetBox[
         FrameBox["\<\"WolframGeoGraphics\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.3418994346217197, 1.703199588815796}], 
        InsetBox[
         FrameBox["Annotation",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.09666495339915, 1.987066186951762}], 
        InsetBox[
         FrameBox["Tooltip",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.812798355263185, 1.703199588815796}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.670865056195202, 1.4193329906798302}], 
        InsetBox[
         FrameBox["Opacity",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.528931757127218, 1.1354663925438642}], 
        InsetBox[
         FrameBox["0",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.528931757127218, 0.8515997944078979}], 
        InsetBox[
         FrameBox["Polygon",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.812798355263185, 1.1354663925438642}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.812798355263185, 0.8515997944078979}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {5.67733196271932, 0.5677331962719321}], 
        InsetBox[
         FrameBox["81.73581240267616`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.535398663651337, 0.2838665981359658}], 
        InsetBox[
         FrameBox["21.637559269777057`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {5.819265261787303, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.2450651589912525, 0.5677331962719321}], 
        InsetBox[
         FrameBox["81.80635400446027`",
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.10313185992327, 0.2838665981359658}], 
        InsetBox[
         FrameBox["21.637559269777057`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.386998458059235, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {6.812798355263185, 0.5677331962719321}], 
        InsetBox[
         FrameBox["81.80635400446027`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.670865056195202, 0.2838665981359658}], 
        InsetBox[
         FrameBox["21.566604497495902`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.954731654331168, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.380531551535116, 0.5677331962719321}], 
        InsetBox[
         FrameBox["81.73581240267616`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.238598252467133, 0.2838665981359658}], 
        InsetBox[
         FrameBox["21.566604497495902`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.5224648506031, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.948264747807048, 0.5677331962719321}], 
        InsetBox[
         FrameBox["81.73581240267616`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.806331448739066, 0.2838665981359658}], 
        InsetBox[
         FrameBox["21.637559269777057`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.090198046875031, 0.2838665981359658}], 
        InsetBox[
         FrameBox["\<\"Wolfram Knowledgebase with data from \[Copyright] \
OpenStreetMap contributors: http://www.openstreetmap.org/copyright\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {6.954731654331168, 1.4193329906798302}], 
        InsetBox[
         FrameBox["\<\"Metadata\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.09666495339915, 1.703199588815796}], 
        InsetBox[
         FrameBox["\<\"WolframGeoGraphics\"\>",
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.380531551535116, 1.703199588815796}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.664398149671083, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.664398149671083, 1.703199588815796}], 
        InsetBox[
         FrameBox[
          GraphicsBox[
           NamespaceBox["Trees",
            DynamicModuleBox[{Typeset`tree = HoldComplete[
              Tree[List, None]]}, {{}, 
              {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
               StyleBox[InsetBox[
                 FrameBox["List",
                  
                  Background->RGBColor[
                   0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
                  FrameStyle->Directive[
                    RGBColor[
                    0.6588235294117647, 0.7294117647058823, 
                    0.7058823529411765], 
                    AbsoluteThickness[1]],
                  ImageSize->Automatic,
                  RoundingRadius->0,
                  StripOnInput->False], {1., 1.}],
                
                GraphicsHighlightColor->RGBColor[
                 0.403921568627451, 0.8705882352941177, 
                  0.7176470588235294]]}}]],
           
           BaseStyle->{
            FrontEnd`GraphicsHighlightColor -> 
             RGBColor[
              0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
           FormatType->StandardForm,
           FrameTicks->None,
           PlotRangePadding->0.1],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.5224648506031, 1.4193329906798302}], 
        InsetBox[
         FrameBox["Annotation",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {7.806331448739066, 1.4193329906798302}], 
        InsetBox[
         FrameBox[
          GraphicsBox[
           NamespaceBox["Trees",
            DynamicModuleBox[{Typeset`tree = HoldComplete[
              Tree[List, None]]}, {{}, 
              {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
               StyleBox[InsetBox[
                 FrameBox["List",
                  
                  Background->RGBColor[
                   0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
                  FrameStyle->Directive[
                    RGBColor[
                    0.6588235294117647, 0.7294117647058823, 
                    0.7058823529411765], 
                    AbsoluteThickness[1]],
                  ImageSize->Automatic,
                  RoundingRadius->0,
                  StripOnInput->False], {1., 1.}],
                
                GraphicsHighlightColor->RGBColor[
                 0.403921568627451, 0.8705882352941177, 
                  0.7176470588235294]]}}]],
           
           BaseStyle->{
            FrontEnd`GraphicsHighlightColor -> 
             RGBColor[
              0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
           FormatType->StandardForm,
           FrameTicks->None,
           PlotRangePadding->0.1],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.5224648506031, 1.1354663925438642}], 
        InsetBox[
         FrameBox["\<\"GeoGridLines\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.806331448739066, 1.1354663925438642}], 
        InsetBox[
         FrameBox["\<\"WolframGeoGraphics\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.090198046875031, 1.1354663925438642}], 
        InsetBox[
         FrameBox["Annotation",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.232131345943014, 2.2709327850877283}], 
        InsetBox[
         FrameBox[
          GraphicsBox[
           NamespaceBox["Trees",
            DynamicModuleBox[{Typeset`tree = HoldComplete[
              Tree[List, None]]}, {{}, 
              {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
               StyleBox[InsetBox[
                 FrameBox["List",
                  
                  Background->RGBColor[
                   0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
                  FrameStyle->Directive[
                    RGBColor[
                    0.6588235294117647, 0.7294117647058823, 
                    0.7058823529411765], 
                    AbsoluteThickness[1]],
                  ImageSize->Automatic,
                  RoundingRadius->0,
                  StripOnInput->False], {1., 1.}],
                
                GraphicsHighlightColor->RGBColor[
                 0.403921568627451, 0.8705882352941177, 
                  0.7176470588235294]]}}]],
           
           BaseStyle->{
            FrontEnd`GraphicsHighlightColor -> 
             RGBColor[
              0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
           FormatType->StandardForm,
           FrameTicks->None,
           PlotRangePadding->0.1],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {7.948264747807048, 1.987066186951762}], 
        InsetBox[
         FrameBox["\<\"GeoScaleBar\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.232131345943014, 1.987066186951762}], 
        InsetBox[
         FrameBox["\<\"WolframGeoGraphics\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.51599794407898, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.035314002535678, 2.554799383223694}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.941797841282929, 2.2709327850877283}], 
        InsetBox[
         FrameBox["Method",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.799864542214946, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.083731140350912, 1.987066186951762}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.728897892680955, 1.703199588815796}], 
        InsetBox[
         FrameBox["\<\"OriginalInput\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.586964593612972, 1.4193329906798302}], 
        InsetBox[
         FrameBox["HoldForm",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.870831191748938, 1.4193329906798302}], 
        InsetBox[
         FrameBox["GeoGraphics",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.870831191748938, 1.1354663925438642}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.870831191748938, 0.8515997944078979}], 
        InsetBox[
         FrameBox["Entity",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {8.870831191748938, 0.5677331962719321}], 
        InsetBox[
         FrameBox["\<\"City\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.728897892680955, 0.2838665981359658}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.01276449081692, 0.2838665981359658}], 
        InsetBox[
         FrameBox["\<\"Raipur\"\>",
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {8.728897892680955, 0.}], InsetBox[
         FrameBox["\<\"Chhattisgarh\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.01276449081692, 0.}], InsetBox[
         FrameBox["\<\"India\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.296631088952887, 0.}], InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.43856438802087, 1.703199588815796}], 
        InsetBox[
         FrameBox["\<\"BasicGeoRange\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.296631088952887, 1.4193329906798302}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.580497687088853, 1.4193329906798302}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.296631088952887, 1.1354663925438642}], 
        InsetBox[
         FrameBox["21.08969235591121`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.154697789884903, 0.8515997944078979}], 
        InsetBox[
         FrameBox["21.39030496780618`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.43856438802087, 0.8515997944078979}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {9.864364285224818, 1.1354663925438642}], 
        InsetBox[
         FrameBox["81.46967817776336`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {9.722430986156835, 0.8515997944078979}], 
        InsetBox[
         FrameBox["81.7903218222366`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.006297584292803, 0.8515997944078979}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.715964079632716, 2.2709327850877283}], 
        InsetBox[
         FrameBox["CoordinatesToolOptions",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.574030780564733, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.8578973787007, 1.987066186951762}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.43209748149675, 1.703199588815796}], 
        InsetBox[
         FrameBox["\<\"DisplayFunction\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.290164182428768, 1.4193329906798302}], 
        InsetBox[
         FrameBox["Function",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.574030780564733, 1.4193329906798302}], 
        InsetBox[
         FrameBox["GeoGraphics`GeoGridPositionDisplay",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.574030780564733, 1.1354663925438642}], 
        InsetBox[
         FrameBox["Slot",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {10.290164182428768, 0.8515997944078979}], 
        InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.290164182428768, 0.5677331962719321}], 
        InsetBox[
         FrameBox["\<\"Mercator\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.574030780564733, 0.8515997944078979}], 
        InsetBox[
         FrameBox["\<\"ITRF00\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {10.8578973787007, 0.8515997944078979}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.283697275904649, 1.703199588815796}], 
        InsetBox[
         FrameBox["\<\"CopiedValueFunction\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.141763976836666, 1.4193329906798302}], 
        InsetBox[
         FrameBox["Function",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.425630574972631, 1.4193329906798302}], 
        InsetBox[
         FrameBox["GeoGraphics`GeoGridPositionCopiedValue",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.425630574972631, 1.1354663925438642}], 
        InsetBox[
         FrameBox["Slot",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.141763976836666, 0.8515997944078979}], 
        InsetBox[
         FrameBox["1",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.141763976836666, 0.5677331962719321}], 
        InsetBox[
         FrameBox["\<\"Mercator\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.425630574972631, 0.8515997944078979}], 
        InsetBox[
         FrameBox["\<\"ITRF00\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.709497173108598, 0.8515997944078979}], 
        InsetBox[
         FrameBox["Rule",
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.993363771244564, 2.2709327850877283}], 
        InsetBox[
         FrameBox["PlotRange",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.851430472176581, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.135297070312546, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.851430472176581, 1.703199588815796}], 
        InsetBox[
         FrameBox["81.45364599553969`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.709497173108598, 1.4193329906798302}], 
        InsetBox[
         FrameBox["81.80635400446027`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.993363771244564, 1.4193329906798302}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.419163668448514, 1.703199588815796}], 
        InsetBox[
         FrameBox["21.566604497495902`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.27723036938053, 1.4193329906798302}], 
        InsetBox[
         FrameBox["21.92137835890167`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.561096967516496, 1.4193329906798302}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {12.561096967516496, 2.2709327850877283}], 
        InsetBox[
         FrameBox["PlotRangePadding",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.419163668448514, 1.987066186951762}], 
        InsetBox[
         FrameBox["None",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.703030266584479, 1.987066186951762}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.128830163788429, 2.2709327850877283}], 
        InsetBox[
         FrameBox["PlotRangeClipping",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {12.986896864720444, 1.987066186951762}], 
        InsetBox[
         FrameBox["True",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.270763462856412, 1.987066186951762}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {11.461113899739628, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoBackground",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.319180600671645, 2.554799383223694}], 
        InsetBox[
         FrameBox["Automatic",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {11.60304719880761, 2.554799383223694}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.554630060992377, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoCenter",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.412696761924394, 2.554799383223694}], 
        InsetBox[
         FrameBox["GeoPosition",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.69656336006036, 2.554799383223694}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {13.69656336006036, 2.2709327850877283}], 
        InsetBox[
         FrameBox["21.240000000000002`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.554630060992377, 1.987066186951762}], 
        InsetBox[
         FrameBox["81.62999999999998`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.838496659128342, 1.987066186951762}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.12236325726431, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoGridLines",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {13.980429958196327, 2.554799383223694}], 
        InsetBox[
         FrameBox["None",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.264296556332292, 2.554799383223694}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.69009645353624, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoGridLinesStyle",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.548163154468257, 2.554799383223694}], 
        InsetBox[
         FrameBox["GrayLevel",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {14.832029752604225, 2.554799383223694}], 
        InsetBox[
         FrameBox["0.4`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.69009645353624, 2.2709327850877283}], 
        InsetBox[
         FrameBox["0.3`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {14.973963051672207, 2.2709327850877283}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {15.399762948876155, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoGridRange",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {15.257829649808173, 2.554799383223694}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {15.54169624794414, 2.554799383223694}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {15.257829649808173, 2.2709327850877283}], 
        InsetBox[
         FrameBox["81.45364599553969`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {15.11589635074019, 1.987066186951762}], 
        InsetBox[
         FrameBox["81.80635400446027`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {15.399762948876155, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {15.825562846080105, 2.2709327850877283}], 
        InsetBox[
         FrameBox["21.566604497495902`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {15.683629547012123, 1.987066186951762}], 
        InsetBox[
         FrameBox["21.92137835890167`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {15.967496145148088, 1.987066186951762}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {15.967496145148088, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoGridRangePadding",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {15.825562846080105, 2.554799383223694}], 
        InsetBox[
         FrameBox["None",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {16.109429444216072, 2.554799383223694}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {16.53522934142002, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoModel",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {16.393296042352038, 2.554799383223694}], 
        InsetBox[
         FrameBox["\<\"ITRF00\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {16.677162640488003, 2.554799383223694}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {17.102962537691955, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoProjection",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {16.96102923862397, 2.554799383223694}], 
        InsetBox[
         FrameBox["\<\"Mercator\"\>",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {17.244895836759937, 2.554799383223694}], 
        InsetBox[
         FrameBox["Rule",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {17.670695733963885, 2.83866598135966}], 
        InsetBox[
         FrameBox["GeoRange",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {17.528762434895903, 2.554799383223694}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {17.812629033031868, 2.554799383223694}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {17.528762434895903, 2.2709327850877283}], 
        InsetBox[
         FrameBox["21.074661725316464`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {17.38682913582792, 1.987066186951762}], 
        InsetBox[
         FrameBox["21.405335598400928`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {17.670695733963885, 1.987066186951762}], 
        InsetBox[
         FrameBox["List",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {18.096495631167834, 2.2709327850877283}], 
        InsetBox[
         FrameBox["81.45364599553969`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {17.95456233209985, 1.987066186951762}], 
        InsetBox[
         FrameBox["81.80635400446027`",
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {18.23842893023582, 1.987066186951762}], 
        InsetBox[
         FrameBox[
          RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}],
          
          Background->RGBColor[
           0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
          FrameStyle->Directive[
            RGBColor[
            0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
            AbsoluteThickness[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {17.95456233209985, 2.83866598135966}]},
       GraphicsHighlightColor->RGBColor[
        0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
  BaseStyle->{
   FrontEnd`GraphicsHighlightColor -> 
    RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
  FormatType->StandardForm,
  FrameTicks->None,
  ImageSize->{Automatic, 284.02028366533864`}]], "Input",ExpressionUUID->\
"d5ebbbe0-eac1-44c2-8e3e-27b9470f51fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 13:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, 
   3.8351159890272956`*^9, {3.835147778523491*^9, 
   3.8351477788350716`*^9}},ExpressionUUID->"413ff685-55e5-470c-b7d5-\
5aff10982d48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.835115515773597*^9, 3.8351155571500607`*^9, {3.8351155949293227`*^9, 
   3.835115609271203*^9}, 3.835115642157303*^9},
 CellLabel->"In[51]:=",ExpressionUUID->"13aa6c2f-2bc1-4fda-92e0-bae135a4f796"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", "\<\"a\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"2", "\[Rule]", "\<\"b\"\>"}], "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351155164379296`*^9, 3.83511555784578*^9, 3.8351156098886595`*^9, 
  3.8351156427052364`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"181bc51b-89b3-4aca-bc0c-f40b57d2021d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`f, {
        Tree["x", None], 
        Tree["y", None], 
        Tree["z", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.7745966692414834, 0.7745966692414834}, {0., 0.}}], 
         LineBox[{{0.7745966692414834, 0.7745966692414834}, {
          0.7745966692414834, 0.}}], 
         LineBox[{{0.7745966692414834, 0.7745966692414834}, {
          1.5491933384829668`, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["f",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.7745966692414834, 0.7745966692414834}], 
         InsetBox[
          FrameBox["\<\"x\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"y\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.7745966692414834, 0.}], InsetBox[
          FrameBox["\<\"z\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.5491933384829668, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{96.28295460134768, Automatic}], "           ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`f, {
        Tree["a", None], 
        Tree["b", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}}], 
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["f",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4472135954999579, 0.8944271909999159}], 
         InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"b\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.8944271909999159, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{55.27112881806113, Automatic}]}]], "Input",
 CellChangeTimes->{{3.835148128005926*^9, 
  3.8351481301542177`*^9}},ExpressionUUID->"6827f9f1-9389-41c7-a5cd-\
54c1ef1e86a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 14:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, 
   3.83511599210725*^9, {3.835147780962389*^9, 
   3.8351477811711545`*^9}},ExpressionUUID->"143e037b-b303-4f6f-a92c-\
82e5d88c9f55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{
    "\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", ",", "\"\<h\>\""}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.835115515773597*^9, 3.8351155571500607`*^9, {3.8351155949293227`*^9, 
   3.835115609271203*^9}, 3.8351156511744556`*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"85ca2dba-25f5-4026-a2c1-5a851cb6fbc2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", "\<\"x\"\>"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"2", "\[Rule]", "\<\"y\"\>"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{"\<\"z\"\>", ",", "3"}], "]"}], ",", 
   RowBox[{"Insert", "[", 
    RowBox[{"\<\"h\"\>", ",", "4"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351155164379296`*^9, 3.83511555784578*^9, 3.8351156098886595`*^9, 
  3.8351156517246847`*^9, 3.8351399396351767`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"2b8964c5-cf9f-4ffb-874b-420c6298b7ff"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`f, {
        Tree["a", None], 
        Tree["b", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}}], 
         LineBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["f",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4472135954999579, 0.8944271909999159}], 
         InsetBox[
          FrameBox["\<\"a\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"b\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.8944271909999159, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{55.27112881806113, Automatic}], "           ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`f, {
        Tree["x", None], 
        Tree["y", None], 
        Tree["z", None], 
        Tree["h", None]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{LineBox[{{1., 0.6666666666666666}, {0., 0.}}], 
         LineBox[{{1., 0.6666666666666666}, {0.6666666666666666, 0.}}], 
         LineBox[{{1., 0.6666666666666666}, {1.3333333333333333`, 0.}}], 
         LineBox[{{1., 0.6666666666666666}, {2., 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["f",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {1., 0.6666666666666666}], InsetBox[
          FrameBox["\<\"x\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["\<\"y\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.6666666666666666, 0.}], InsetBox[
          FrameBox["\<\"z\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.3333333333333333, 0.}], InsetBox[
          FrameBox["\<\"h\"\>",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {2., 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{127.01641647694919`, Automatic}]}]], "Input",
 CellChangeTimes->{{3.8351480685672045`*^9, 
  3.835148086942226*^9}},ExpressionUUID->"7551596a-5f95-471f-9197-\
e8ec9e8ec8e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 15:", "Subsubsection",
 CellChangeTimes->{{3.835115207358634*^9, 3.835115220493879*^9}, 
   3.8351159950596914`*^9, {3.8351477830661716`*^9, 
   3.8351477834113045`*^9}},ExpressionUUID->"c7f9543b-2c05-4533-93c1-\
15fbab3c7232"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"foo", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"foo", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.832336158739129*^9, 3.8323361725422077`*^9}, {
   3.8351151752156982`*^9, 3.8351151888857822`*^9}, 3.835115453750741*^9, 
   3.835115515773597*^9, 3.8351155571500607`*^9, {3.8351155949293227`*^9, 
   3.835115609271203*^9}, 3.8351156511744556`*^9, 3.835115681724995*^9, 
   3.835148165463433*^9},
 CellLabel->"In[53]:=",ExpressionUUID->"243a7a07-07c9-4dbf-8fbe-b94a10f8547d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ReplacePart", "[", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], "}"}]], "Output",
 CellChangeTimes->{3.835115189772026*^9, 3.835115454498233*^9, 
  3.8351155164379296`*^9, 3.83511555784578*^9, 3.8351156098886595`*^9, 
  3.8351156517246847`*^9, 3.8351156823250637`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"2f30ffc5-47b0-4c0b-bc42-ec829b1623e7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`foo, {
        Tree[List, {
          Tree[1, None], 
          Tree[2, None]}]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.4629100498862757, 1.8516401995451028`}, {
          0.4629100498862757, 0.9258200997725514}}], 
         LineBox[{{0.4629100498862757, 0.9258200997725514}, {0., 0.}}], 
         LineBox[{{0.4629100498862757, 0.9258200997725514}, {
          0.9258200997725514, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["foo",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4629100498862757, 1.8516401995451028}], 
         InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.4629100498862757, 0.9258200997725514}], 
         InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["2",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.9258200997725514, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{73.01014183266932, Automatic}], "         ", 
  GraphicsBox[
   NamespaceBox["Trees",
    DynamicModuleBox[{Typeset`tree = HoldComplete[
      Tree[$CellContext`foo, {
        Tree[List, {
          Tree[1, None], 
          Tree[2, None], 
          Tree[3, None]}]}]]}, {
      {RGBColor[0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
       AbsoluteThickness[1], Opacity[0.7], 
       StyleBox[{
         LineBox[{{0.8164965809277261, 1.6329931618554523`}, {
          0.8164965809277261, 0.8164965809277261}}], 
         LineBox[{{0.8164965809277261, 0.8164965809277261}, {0., 0.}}], 
         LineBox[{{0.8164965809277261, 0.8164965809277261}, {
          0.8164965809277261, 0.}}], 
         LineBox[{{0.8164965809277261, 0.8164965809277261}, {
          1.6329931618554523`, 0.}}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}, 
      {GrayLevel[0], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       StyleBox[{InsetBox[
          FrameBox["foo",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.8164965809277261, 1.6329931618554523}], 
         InsetBox[
          FrameBox["List",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->4,
           StripOnInput->False], {0.8164965809277261, 0.8164965809277261}], 
         InsetBox[
          FrameBox["1",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0., 0.}], InsetBox[
          FrameBox["2",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {0.8164965809277261, 0.}], InsetBox[
          FrameBox["3",
           
           Background->RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941],
           FrameStyle->Directive[
             RGBColor[
             0.6588235294117647, 0.7294117647058823, 0.7058823529411765], 
             AbsoluteThickness[1]],
           ImageSize->Automatic,
           RoundingRadius->0,
           StripOnInput->False], {1.6329931618554523, 0.}]},
        GraphicsHighlightColor->RGBColor[
         0.403921568627451, 0.8705882352941177, 0.7176470588235294]]}}]],
   BaseStyle->{
    FrontEnd`GraphicsHighlightColor -> 
     RGBColor[0.403921568627451, 0.8705882352941177, 0.7176470588235294]},
   FormatType->StandardForm,
   FrameTicks->None,
   ImageSize->{135.27112881806113`, Automatic}]}]], "Input",
 CellChangeTimes->{{3.835148168566061*^9, 
  3.835148182001976*^9}},ExpressionUUID->"62994d92-d2e5-47ec-a09d-\
783e3a5e25b8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Possible Issues:", "Section",
 CellChangeTimes->{{3.835148570105791*^9, 
  3.835148577088977*^9}},ExpressionUUID->"e7275e83-0036-4281-85f6-\
bbf00740d9dd"],

Cell["\<\
Applying ExpressionDifference on Large Expressions may not work :\
\>", "Text",
 CellChangeTimes->{{3.835148585631248*^9, 
  3.835148616544566*^9}},ExpressionUUID->"27d6da27-31d2-4bc8-bc25-\
60b62b9845cc"],

Cell[CellGroupData[{

Cell["\<\
Case 1(Fails for Long Expression which involve Recursive Implementation) :\
\>", "Subsubsection",
 CellChangeTimes->{{3.835148642684584*^9, 3.835148647141841*^9}, {
  3.83514905132708*^9, 
  3.8351490763617754`*^9}},ExpressionUUID->"8b154560-8948-4b7c-84ab-\
4bc3e4fbf05f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s1", " ", "=", " ", 
    RowBox[{"Hold", "@", 
     RowBox[{"Replace", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"expr1", ",", "expr2"}], "}"}], ",", 
       RowBox[{"{", " ", 
        RowBox[{"(*", 
         RowBox[{"Evaluating", " ", "the", " ", "Sequence", " ", 
          StyleBox["\"\<seq\>\"",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], 
          StyleBox["using",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "SequenceAlignment", " ", "Operation", " ", 
          "on", " ", "the", " ", "given", " ", "expression", " ", "depending",
           " ", "upon", " ", "the", " ", "DelayedRule", " ", "of", " ", 
          "Matching", " ", 
          RowBox[{"Condition", "."}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"xHead_", "[", "xe___", "]"}], ",", 
           RowBox[{"yHead_", "[", "ye___", "]"}]}], "}"}], ":>", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"xHead", "===", "yHead"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", 
            RowBox[{"SequenceAlignment", "[", 
             RowBox[{
              RowBox[{"{", "xe", "}"}], ",", 
              RowBox[{"{", "ye", "}"}]}], "]"}]}], "\[IndentingNewLine]", ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{"diff", ",", 
              RowBox[{"ExpressionDifference", "[", 
               RowBox[{"xHead", ",", "yHead"}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", 
            RowBox[{"SequenceAlignment", "[", 
             RowBox[{
              RowBox[{"{", "xe", "}"}], ",", 
              RowBox[{"{", "ye", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "}"}]}], "]"}]}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"s2", " ", "=", " ", 
    RowBox[{"Hold", "@", 
     RowBox[{"ReplacePart", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"expr1", ",", "expr2"}], "}"}], ",", 
       RowBox[{"{", " ", 
        RowBox[{"(*", 
         RowBox[{"Evaluating", " ", "the", " ", "Sequence", " ", 
          StyleBox["\"\<seq\>\"",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], 
          StyleBox["using",
           FontSlant->"Italic"], 
          StyleBox[" ",
           FontSlant->"Italic"], "SequenceAlignment", " ", "Operation", " ", 
          "on", " ", "the", " ", "given", " ", "expression", " ", "depending",
           " ", "upon", " ", "the", " ", "DelayedRule", " ", "of", " ", 
          "Matching", " ", 
          RowBox[{"Condition", "."}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"xHead_", "[", "xe___", "]"}], ",", 
           RowBox[{"yHead_", "[", "ye___", "]"}]}], "}"}], ":>", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"xHead", "===", "yHead"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", 
            RowBox[{"SequenceAlignment", "[", 
             RowBox[{
              RowBox[{"{", "xe", "}"}], ",", 
              RowBox[{"{", "ye", "}"}]}], "]"}]}], "\[IndentingNewLine]", ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{"diff", ",", 
              RowBox[{"ExpressionDifference", "[", 
               RowBox[{"xHead", ",", "yHead"}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Sequence", "[", 
             RowBox[{
              RowBox[{"{", "xe", "}"}], ",", 
              RowBox[{"{", "ye", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "}"}]}], "]"}]}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{"s1", ",", "s2"}], "]"}]}], "Input",
 CellChangeTimes->{{3.835148720080846*^9, 3.835148791025465*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"430c91b9-a8e6-41f4-938c-c48b0c374cea"],

Cell[BoxData[
 TemplateBox[{
  "AppendTo", "rvalue", 
   "\"\\!\\(\\*RowBox[{\\\"diff\\\"}]\\) is not a variable with a value, so \
its value cannot be changed.\"", 2, 6, 1, 26146935186135196870, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8351490957874684`*^9},
 CellLabel->
  "During evaluation of \
In[4]:=",ExpressionUUID->"d890078a-8cc6-4616-bf59-0d21a62bc782"],

Cell[BoxData[
 TemplateBox[{
  "Increment", "rvalue", 
   "\"\\!\\(\\*RowBox[{\\\"count\\\"}]\\) is not a variable with a value, so \
its value cannot be changed.\"", 2, 6, 2, 26146935186135196870, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8351490958676023`*^9},
 CellLabel->
  "During evaluation of \
In[4]:=",ExpressionUUID->"6cba4858-7479-45b7-9b6d-540a031eabef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ReplacePart", "[", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", "ye", "}"}]}], "]"}], "}"}]], "Output",
 CellChangeTimes->{3.835149097037722*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"f87d276b-c26f-48a7-a777-ee8c32841098"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case 2 (Partially Wrong Output in some cases):", "Subsubsection",
 CellChangeTimes->{{3.835149043910615*^9, 3.8351490469190383`*^9}, {
  3.835149079439931*^9, 
  3.835149134487435*^9}},ExpressionUUID->"35fa217b-0996-48b6-a662-\
67828fe2d45b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpressionDifference", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "10", ",", "20", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", "1"}], ",", "x"}], "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"bb1e3576-20be-4609-97c3-4e7bf79c996d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Replace", "[", 
     RowBox[{"_", "\[Rule]", "Plus"}], "]"}], "}"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"1", "\[Rule]", "x"}], "]"}], ",", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"2", "\[Rule]", 
     FractionBox[
      SuperscriptBox["x", "3"], "3"]}], "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}], ",", 
   RowBox[{"Delete", "[", "3", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8351490998162365`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"26fad351-08e3-437e-add9-529843dcb0bc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Concluding remarks", "Section",
 CellChangeTimes->{{3.832335989380006*^9, 
  3.832335995602777*^9}},ExpressionUUID->"29b14138-8419-474a-8ee4-\
caa448e86a23"],

Cell[TextData[{
 "This version of ",
 StyleBox["ExpressionDifference",
  FontSlant->"Italic"],
 " fails to deal with cases figuring out the difference in the long \
expressions which involve recursive implementation of ",
 StyleBox["ExpressionDifferecne",
  FontSlant->"Italic"],
 " though it completely works fine for shorter expressions, and hence the \
recursive case still needs to be worked upon."
}], "Item",
 CellChangeTimes->{{3.8351058308386893`*^9, 3.8351059852069445`*^9}, {
   3.8351060992944365`*^9, 3.83510614965633*^9}, {3.8351062902618628`*^9, 
   3.835106376337492*^9}, {3.835106414426124*^9, 3.8351064342130823`*^9}, {
   3.8351066195202446`*^9, 3.835106654808777*^9}, 3.835107017922037*^9, {
   3.835107398553765*^9, 3.835107403555296*^9}, 3.8351378680169396`*^9},
 TextJustification->1.,ExpressionUUID->"d5bd7fa9-c4d3-44d2-bef1-0ceecd1965d2"],

Cell["\<\
For text, it\[CloseCurlyQuote]s comparatively straightforward to find and \
indicate minimal changes. The idea is to develop an approach that involves \
figuring out how to do this for general symbolic expressions and figure out \
which changes can automatically be merged in a 3-way merge process.\
\>", "Item",
 CellChangeTimes->{{3.8351058308386893`*^9, 3.8351059852069445`*^9}, {
   3.8351060992944365`*^9, 3.83510614965633*^9}, {3.8351062902618628`*^9, 
   3.835106376337492*^9}, {3.835106414426124*^9, 3.8351064342130823`*^9}, {
   3.835106620075277*^9, 3.835106622180249*^9}, {3.8351074273931985`*^9, 
   3.8351074415128913`*^9}, {3.835112814386288*^9, 3.835112843617584*^9}, 
   3.835137890839875*^9},
 TextJustification->1.,ExpressionUUID->"d5b77c11-43af-4155-9113-cdd695fbb22a"],

Cell[TextData[{
 "The ",
 StyleBox["Minimum Tree Distance Approach",
  FontSlant->"Italic"],
 " is one of the possible ways to solve the problem, where we figure out the \
minimum number of operations that we need to perform on any expression \
\[OpenCurlyDoubleQuote]",
 StyleBox["expr1",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] to convert it into \[OpenCurlyDoubleQuote]",
 StyleBox["expr2",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote]. In this way, we could figure out the number of \
changes, and then we can perform operations like ",
 StyleBox["Insert, ReplacePart and Delete",
  FontSlant->"Italic"],
 " accordingly on the given expressions."
}], "Item",
 CellChangeTimes->{{3.8351058308386893`*^9, 3.8351059852069445`*^9}, {
   3.8351060992944365`*^9, 3.83510614965633*^9}, 3.835106440967086*^9, {
   3.8351128029122486`*^9, 3.8351128046393194`*^9}, 3.835137935049314*^9},
 TextJustification->1.,ExpressionUUID->"533d20c2-6258-41fc-a3b6-ffe532400c2e"],

Cell[TextData[{
 "Another approach involves ",
 StyleBox["Hashing",
  FontSlant->"Italic"],
 " of the expression tree and its branches and comparing the hash obtained \
for each branch with another expression to realize what\[CloseCurlyQuote]s \
the difference in the trees and accordingly suggest the necessary changes to \
the given expression."
}], "Item",
 CellChangeTimes->{{3.8351058308386893`*^9, 3.8351059852069445`*^9}, {
   3.8351060992944365`*^9, 3.835106217648347*^9}, {3.835106458244077*^9, 
   3.8351064610720797`*^9}, {3.8351128733224645`*^9, 3.8351129122492905`*^9}, 
   3.835138045231498*^9},
 TextJustification->1.,ExpressionUUID->"15c91930-fe13-471a-97e1-91057f6fb2bd"],

Cell[TextData[{
 "The Future Scope of this Project involves developing with Functions like \
\[OpenCurlyDoubleQuote]",
 StyleBox["DifferenceApply",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote]  and \[OpenCurlyDoubleQuote]",
 StyleBox["DifferenceVisualize",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote]. \[OpenCurlyDoubleQuote]",
 StyleBox["DifferenceApply",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] would apply a List of differences to expression \
\[OpenCurlyDoubleQuote]",
 StyleBox["expr1",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] to convert it into another expression \
\[OpenCurlyDoubleQuote]",
 StyleBox["expr2",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]",
 StyleBox["DifferenceVisualize",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] would show what\[CloseCurlyQuote]s different \
between the two expressions."
}], "Item",
 CellChangeTimes->{{3.8351058308386893`*^9, 3.8351059852069445`*^9}, {
   3.8351060992944365`*^9, 3.835106217648347*^9}, {3.835106458244077*^9, 
   3.835106583179291*^9}, {3.8351066654197717`*^9, 3.8351067393244047`*^9}, {
   3.835106973714991*^9, 3.835106994210873*^9}, {3.8351127738578496`*^9, 
   3.835112791094638*^9}, {3.8351129300265617`*^9, 3.835112934999257*^9}, 
   3.835138083751934*^9, {3.835172769286147*^9, 3.835172800821541*^9}},
 TextJustification->1.,ExpressionUUID->"dfaf71e3-082a-4849-81a4-36e4a1b37651"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Keywords", "Section",
 CellChangeTimes->{{3.802186344523418*^9, 3.80218634588871*^9}},
 CellTags->"Keywords",
 CellID->442466898,ExpressionUUID->"55366c72-1773-4c7a-85a4-dc3be77c9345"],

Cell["Tree Difference", "Item",
 CellChangeTimes->{{3.802186390571724*^9, 3.802186392723897*^9}, {
  3.802186726368737*^9, 3.80218672773493*^9}, {3.832335881427176*^9, 
  3.832335883059238*^9}, {3.835105559499131*^9, 
  3.8351055667551336`*^9}},ExpressionUUID->"908d1f0a-329d-4157-955e-\
bfe72d382676"],

Cell["Tree Diffing", "Item",
 CellChangeTimes->{{3.802186390571724*^9, 3.802186395898718*^9}, {
  3.832335809684029*^9, 3.832335812060302*^9}, {3.8323358845060062`*^9, 
  3.8323358862944727`*^9}, {3.835105568803134*^9, 
  3.835105595989767*^9}},ExpressionUUID->"52b02a21-cc61-4f63-8da0-\
88340e06eac1"],

Cell["Difference", "Item",
 CellChangeTimes->{{3.802186390571724*^9, 3.8021864027417173`*^9}, {
  3.835105588557133*^9, 
  3.8351056082613935`*^9}},ExpressionUUID->"b5350d26-320b-4812-8402-\
214700ab3f93"],

Cell["ExpressionTree", "Item",
 CellChangeTimes->{{3.802186390571724*^9, 3.8021864027417173`*^9}, {
  3.835105588557133*^9, 
  3.835105617777392*^9}},ExpressionUUID->"55bbb78a-55cb-4f75-b36c-\
afdf87ca9c3e"],

Cell["SequenceAlignment", "Item",
 CellChangeTimes->{{3.802186390571724*^9, 3.8021864027417173`*^9}, {
  3.835105588557133*^9, 3.8351056236293926`*^9}, {3.8351132415466423`*^9, 
  3.835113241547637*^9}},ExpressionUUID->"386ee7ca-e4b3-492a-9615-\
1ee7f2330eab"],

Cell["ExpressionDifference", "Item",
 CellChangeTimes->{{3.802186390571724*^9, 3.8021864027417173`*^9}, {
  3.835105588557133*^9, 3.8351056236293926`*^9}, {3.8351132419737253`*^9, 
  3.835113247742827*^9}},ExpressionUUID->"09b93fca-70be-4d24-8e0c-\
7d617fe4507b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Acknowledgment", "Section",
 CellChangeTimes->{{3.802186344523418*^9, 3.802186368848865*^9}},
 CellTags->"Keywords",
 CellID->1836614011,ExpressionUUID->"db342ebb-082f-4ffe-849c-40f4564a4bad"],

Cell["Connor Gray(Mentor)", "Item",
 CellChangeTimes->{{3.802186374730517*^9, 3.802186375456683*^9}, {
  3.802186730191574*^9, 3.802186731523522*^9}, {3.8323358194918003`*^9, 
  3.832335879235589*^9}, {3.833046413458662*^9, 3.833046425662155*^9}, {
  3.8330464797216253`*^9, 3.83304649921472*^9}, {3.834147981103958*^9, 
  3.8341479845364695`*^9}, {3.835102251187663*^9, 
  3.8351022704036627`*^9}},ExpressionUUID->"f3c13fc2-a689-4212-82e1-\
3c1eb50c2598"],

Cell["Carlos Mu\[NTilde]oz (TA)", "Item",
 CellChangeTimes->{{3.802186374730517*^9, 3.802186375456683*^9}, {
  3.802186730191574*^9, 3.802186731523522*^9}, {3.8323358194918003`*^9, 
  3.832335879235589*^9}, {3.833046413458662*^9, 3.833046425662155*^9}, {
  3.8330464797216253`*^9, 3.83304649921472*^9}, {3.834147981103958*^9, 
  3.8341479845364695`*^9}, {3.835102251187663*^9, 
  3.8351022930357*^9}},ExpressionUUID->"bc180c50-fc29-48ee-9d9f-97fb7c0e6eef"],

Cell["Silvia Hao (TA)", "Item",
 CellChangeTimes->{{3.802186374730517*^9, 3.802186375456683*^9}, {
  3.802186730191574*^9, 3.802186731523522*^9}, {3.8323358194918003`*^9, 
  3.832335879235589*^9}, {3.833046413458662*^9, 3.833046425662155*^9}, {
  3.8330464797216253`*^9, 3.83304649921472*^9}, {3.834147981103958*^9, 
  3.8341479845364695`*^9}, {3.835102251187663*^9, 3.835102290086669*^9}, {
  3.8351023596987047`*^9, 
  3.8351023780337143`*^9}},ExpressionUUID->"8ebef079-df48-450a-84fd-\
3f033b7fa266"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.802186344523418*^9, 3.802186360670889*^9}},
 CellTags->"Keywords",
 CellID->1137237116],

Cell["https://thume.ca/2017/06/17/tree-diffing/", "Item",
 CellChangeTimes->{{3.802186382533594*^9, 3.802186383585804*^9}, {
   3.802186733203268*^9, 3.8021867345244904`*^9}, {3.832335887743041*^9, 
   3.832335889639061*^9}, 
   3.835102958806607*^9},ExpressionUUID->"c90a4631-f42e-4150-b700-\
a673f28b6ab3"],

Cell["https://evolution.gs.washington.edu/phylip/doc/treedist.html", "Item",
 CellChangeTimes->{{3.802186382533594*^9, 3.802186386161345*^9}, {
  3.8351029981081257`*^9, 3.8351029988701305`*^9}, {3.835106043752825*^9, 
  3.8351060437548237`*^9}},ExpressionUUID->"89c668d2-d86c-4f73-ae93-\
ea1f87f96f60"],

Cell["http://reference.wolfram.com/language/guide/Expressions.html", "Item",
 CellChangeTimes->{{3.802186382533594*^9, 3.802186386161345*^9}, {
  3.8351029981081257`*^9, 3.8351029988701305`*^9}, {3.835106044642827*^9, 
  3.8351060488228273`*^9}},ExpressionUUID->"75739d03-29c0-4392-aa6f-\
f8443e0f5116"],

Cell["http://reference.wolfram.com/language/ref/EditDistance.html", "Item",
 CellChangeTimes->{{3.802186382533594*^9, 3.802186386161345*^9}, {
  3.8351029981081257`*^9, 3.8351029988701305`*^9}, {3.835106044642827*^9, 
  3.8351060590554934`*^9}},ExpressionUUID->"01adfff5-0c87-4082-979c-\
088571a49866"],

Cell["http://reference.wolfram.com/language/ref/Inactivate.html", "Item",
 CellChangeTimes->{{3.802186382533594*^9, 3.802186386161345*^9}, {
  3.8351029981081257`*^9, 3.8351029988701305`*^9}, {3.835106044642827*^9, 
  3.8351060724565344`*^9}},ExpressionUUID->"853a048a-5f86-43b3-b572-\
21a78146b427"]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->"EditBar",
WindowSize->{1857, 1037},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.9490196078431372, 0.4627450980392157, 0.15294117647058825`], 
      FontFamily -> "Source Sans Pro", FontWeight -> "Heavy", FontSize -> 40], 
     StyleBox["SUMMER SCHOOL 2021", 
      RGBColor[0.9490196078431372, 0.4627450980392157, 0.15294117647058825`], 
      FontFamily -> "Source Sans Pro", FontWeight -> "Plain", FontSize -> 
      40]}], CellFrameMargins -> 20, Background -> 
   RGBColor[0.9921568627450981, 0.8980392156862745, 0.5568627450980392]]},
PrivateNotebookOptions->{"CloudPublishPath"->"ProjectTemplateWSS21MadsV3.nb"},\

CellFrameMargins->20,
Magnification:>1.2 Inherited,
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (May 13, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"1bcf43c3-7fb0-4fc5-8373-f5a45171f423"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Keywords"->{
  Cell[778674, 16197, 190, 3, 82, "Section",ExpressionUUID->"55366c72-1773-4c7a-85a4-dc3be77c9345",
   CellTags->"Keywords",
   CellID->442466898],
  Cell[780458, 16243, 198, 3, 82, "Section",ExpressionUUID->"db342ebb-082f-4ffe-849c-40f4564a4bad",
   CellTags->"Keywords",
   CellID->1836614011],
  Cell[782117, 16278, 139, 3, 82, "Section",ExpressionUUID->"061ffee8-81ef-46ca-adaf-d1701585859f",
   CellTags->"Keywords",
   CellID->1137237116]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Keywords", 784867, 16343}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 391, 6, 117, "Title",ExpressionUUID->"9b462709-6300-40eb-b960-40368eae64f0"],
Cell[974, 30, 460, 7, 37, "Author",ExpressionUUID->"2169de90-e7e5-4e73-8c80-70235ea5535f"],
Cell[1437, 39, 287, 4, 37, "Affiliation",ExpressionUUID->"df296095-5950-478c-8570-ee1aa705eb9f"],
Cell[1727, 45, 1800, 30, 155, "Abstract",ExpressionUUID->"320a3b73-8e08-413f-a5e3-7d72ff652fac"],
Cell[CellGroupData[{
Cell[3552, 79, 325, 5, 82, "Section",ExpressionUUID->"1dbe4d29-2fc4-4236-b812-2c50be4f515c"],
Cell[3880, 86, 878, 14, 95, "Text",ExpressionUUID->"ba2c2c56-e5f2-495a-9c95-b877a6a6f993"],
Cell[CellGroupData[{
Cell[4783, 104, 306, 5, 65, "Subsection",ExpressionUUID->"aca49f06-88a7-4141-9b4a-7e938b749c16"],
Cell[5092, 111, 11557, 248, 1455, "Code",ExpressionUUID->"bc47e768-9434-4522-b73e-25a4d6dc6ad6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16686, 364, 208, 6, 65, "Subsection",ExpressionUUID->"0d7d98e8-0875-4a56-93b6-5bc4c0cffec5"],
Cell[16897, 372, 1366, 29, 63, "Item",ExpressionUUID->"a2158b14-0b1b-412d-ae55-ec45202bcdab"],
Cell[18266, 403, 1046, 23, 38, "Item",ExpressionUUID->"910f4e47-5fef-454a-88de-ae8110d3fd35"],
Cell[19315, 428, 1037, 19, 38, "Item",ExpressionUUID->"599a0a6d-d491-4f47-85ab-1000a966ec71"],
Cell[20355, 449, 1158, 20, 63, "Item",ExpressionUUID->"94d21516-a1a0-46a9-a60e-a6b235582971"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21550, 474, 227, 3, 64, "Subsection",ExpressionUUID->"84d98b43-0a93-4966-85df-0fea38298e67"],
Cell[21780, 479, 309, 9, 90, "Code",ExpressionUUID->"773c9b7b-139e-4ba6-819d-a82d0bbae8f2"],
Cell[22092, 490, 359, 7, 41, "Text",ExpressionUUID->"745437a0-8241-4b2b-ac34-7e8a9f89415f"],
Cell[22454, 499, 928, 25, 179, "Code",ExpressionUUID->"5353f3fa-1fb7-4457-b98a-f68dfdb2d75d"],
Cell[23385, 526, 504, 10, 41, "Text",ExpressionUUID->"d0559c3c-025c-4c59-a2e2-0c3769965d33"],
Cell[23892, 538, 2228, 55, 333, "Code",ExpressionUUID->"273e331d-a94d-4ba7-9f73-70976bea474f"],
Cell[26123, 595, 803, 21, 68, "Text",ExpressionUUID->"53c6bae6-fa7d-4dd3-885a-aece020d08cf"],
Cell[26929, 618, 6043, 136, 795, "Code",ExpressionUUID->"4937ebe5-c9b0-4c7a-b4bc-45ae149c7b46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33009, 759, 193, 4, 64, "Subsection",ExpressionUUID->"d7c96465-a0f3-48af-ac9a-049c5c150fff"],
Cell[33205, 765, 194, 3, 41, "Text",ExpressionUUID->"553cf567-73cd-4de1-84f6-cd72e24a1c94"],
Cell[CellGroupData[{
Cell[33424, 772, 152, 3, 38, "Item",ExpressionUUID->"3300189d-c9d3-412d-9b00-11f63e7c5604"],
Cell[CellGroupData[{
Cell[33601, 779, 359, 7, 90, "Code",ExpressionUUID->"2f64d1d9-3b95-40aa-8ab0-00458245e496"],
Cell[33963, 788, 168, 3, 39, "Output",ExpressionUUID->"fc2e8e84-ad76-4356-ac21-85511a7cbd47"]
}, Open  ]]
}, Open  ]],
Cell[34158, 795, 2279, 55, 119, "Text",ExpressionUUID->"72e917d0-3c3d-4cad-a872-f3054c9fd210"],
Cell[CellGroupData[{
Cell[36462, 854, 154, 3, 38, "Item",ExpressionUUID->"7a2be333-d0b4-4557-81fa-da6cc03415fb"],
Cell[CellGroupData[{
Cell[36641, 861, 304, 6, 90, "Code",ExpressionUUID->"e23894b4-06fa-4198-9720-6ca7fb3de3d0"],
Cell[36948, 869, 239, 5, 40, "Output",ExpressionUUID->"db94c01f-9ba4-4b6a-90e0-01cda1afd48a"]
}, Open  ]]
}, Open  ]],
Cell[37214, 878, 5036, 125, 162, "Text",ExpressionUUID->"50d1920d-ffcc-434e-91d5-5c07c6337208"],
Cell[CellGroupData[{
Cell[42275, 1007, 300, 6, 90, "Code",ExpressionUUID->"b3afc38a-b176-475e-b31d-b1f511e7806e"],
Cell[42578, 1015, 180, 3, 40, "Output",ExpressionUUID->"42ffdeb8-1a96-4535-8077-32de962da413"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42795, 1023, 151, 3, 38, "Item",ExpressionUUID->"08a711b4-e732-4927-ac42-f8d73053723e"],
Cell[CellGroupData[{
Cell[42971, 1030, 348, 7, 90, "Code",ExpressionUUID->"02d1b623-f4fb-4abf-bb2c-d5fb62d6242a"],
Cell[43322, 1039, 277, 6, 39, "Output",ExpressionUUID->"622078d7-d055-4e92-aa51-f18e93e64614"]
}, Open  ]]
}, Open  ]],
Cell[43626, 1049, 869, 23, 95, "Text",ExpressionUUID->"c61a3ba7-e88f-47da-9434-b101426a38b3"],
Cell[CellGroupData[{
Cell[44520, 1076, 333, 7, 90, "Code",ExpressionUUID->"dc883b71-31a6-48b4-a126-19e490eb4ca5"],
Cell[44856, 1085, 198, 3, 39, "Output",ExpressionUUID->"01443a99-2f8b-457d-b092-8df4caed5d89"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45091, 1093, 153, 3, 38, "Item",ExpressionUUID->"47abbed9-571c-4eeb-94fc-70dc466e9f7a"],
Cell[CellGroupData[{
Cell[45269, 1100, 293, 6, 90, "Code",ExpressionUUID->"8a011e4f-cc42-4f0a-b39c-51dedecc1a82"],
Cell[45565, 1108, 206, 4, 39, "Output",ExpressionUUID->"9171b6bb-9cf8-42ab-a0ac-97707ff8ebb8"]
}, Open  ]]
}, Open  ]],
Cell[45798, 1116, 851, 22, 95, "Text",ExpressionUUID->"0dcd928c-ec2a-4e57-b707-a373bf6e4b65"],
Cell[CellGroupData[{
Cell[46674, 1142, 261, 5, 90, "Code",ExpressionUUID->"750896f2-a471-4fea-920c-c3e63aafa32e"],
Cell[46938, 1149, 171, 3, 39, "Output",ExpressionUUID->"bcde99c7-8b7a-4041-b196-6a3222e5f136"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47170, 1159, 364, 6, 82, "Section",ExpressionUUID->"ea3c9035-2b5f-485b-9672-9c996bb3ce9a"],
Cell[CellGroupData[{
Cell[47559, 1169, 161, 3, 54, "Subsubsection",ExpressionUUID->"47dd89b3-94f5-49ef-a8c7-01a0ff926ed1"],
Cell[CellGroupData[{
Cell[47745, 1176, 357, 7, 35, "Input",ExpressionUUID->"55646084-8a9b-4372-b3de-92779da73aaf"],
Cell[48105, 1185, 189, 3, 39, "Output",ExpressionUUID->"5e9d030b-3a4a-408e-8924-9f69a645e16f"]
}, Open  ]],
Cell[48309, 1191, 1752, 43, 90, "Input",ExpressionUUID->"4a571a9e-a948-401b-b4c0-950f6dfe14f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50098, 1239, 163, 3, 54, "Subsubsection",ExpressionUUID->"2fbc8c92-0ed3-46bd-9837-3fc82a8164ea"],
Cell[CellGroupData[{
Cell[50286, 1246, 325, 5, 35, "Input",ExpressionUUID->"36017ed2-b6b2-4779-b6f9-bab76bf875d7"],
Cell[50614, 1253, 306, 6, 39, "Output",ExpressionUUID->"472f4ca9-a904-4d01-a9ef-9991854c9cd8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50969, 1265, 212, 4, 54, "Subsubsection",ExpressionUUID->"3062cf99-9110-406a-badb-2ae173679cd4"],
Cell[CellGroupData[{
Cell[51206, 1273, 381, 7, 36, "Input",ExpressionUUID->"4ae281b2-8eb4-4218-a5be-8aba99c7e98c"],
Cell[51590, 1282, 338, 7, 40, "Output",ExpressionUUID->"b5d6123f-41e1-4a05-b2cb-d20e1254daeb"]
}, Open  ]],
Cell[51943, 1292, 3476, 86, 100, "Input",ExpressionUUID->"7017608b-b630-439d-b934-a01cc4290544"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55456, 1383, 210, 4, 54, "Subsubsection",ExpressionUUID->"d83730e0-de22-458c-9431-edd9b1ae8e9e"],
Cell[CellGroupData[{
Cell[55691, 1391, 405, 8, 35, "Input",ExpressionUUID->"5939ce16-a01b-4bb8-9d32-d441b709a699"],
Cell[56099, 1401, 322, 8, 39, "Output",ExpressionUUID->"3d8a8c78-d002-4b2a-9a11-2b66c8fc3e53"]
}, Open  ]],
Cell[56436, 1412, 4655, 117, 141, "Input",ExpressionUUID->"d099be57-d1c3-4e83-88bf-363367a47756"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61128, 1534, 212, 4, 54, "Subsubsection",ExpressionUUID->"688be116-9904-4d4a-bfda-e9bae8cfc9a3"],
Cell[CellGroupData[{
Cell[61365, 1542, 480, 10, 35, "Input",ExpressionUUID->"468fbb48-3d15-4263-af4a-729e68abc026"],
Cell[61848, 1554, 404, 10, 39, "Output",ExpressionUUID->"cb274683-3a37-40a9-bc26-47c2d2dad3ce"]
}, Open  ]],
Cell[62267, 1567, 7154, 176, 93, "Input",ExpressionUUID->"4ab68d89-961d-453a-8d72-32553c226435"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69458, 1748, 212, 4, 54, "Subsubsection",ExpressionUUID->"132a8ab6-6532-4a70-b783-eecd13bb21be"],
Cell[CellGroupData[{
Cell[69695, 1756, 397, 7, 36, "Input",ExpressionUUID->"1e35e6c1-b5f2-4bc6-98bf-906499a5b41a"],
Cell[70095, 1765, 388, 9, 40, "Output",ExpressionUUID->"352d9444-e9cd-4a24-901d-3ee1d3afdb4b"]
}, Open  ]],
Cell[70498, 1777, 3474, 86, 100, "Input",ExpressionUUID->"d2cf00ca-7e47-4131-b4f7-5292781f3881"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74009, 1868, 214, 4, 54, "Subsubsection",ExpressionUUID->"e8707df0-2cd4-429c-a3ec-a4d63a2b2fef"],
Cell[CellGroupData[{
Cell[74248, 1876, 430, 9, 36, "Input",ExpressionUUID->"c8b39709-cdd9-4423-bf98-d9a768795b01"],
Cell[74681, 1887, 371, 9, 40, "Output",ExpressionUUID->"6292c21e-f4ae-4d1f-8f79-f367ab8b2d61"]
}, Open  ]],
Cell[75067, 1899, 4160, 102, 137, "Input",ExpressionUUID->"af87f5be-430d-4461-8016-4244b3fb8ccf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79264, 2006, 212, 4, 54, "Subsubsection",ExpressionUUID->"9ced3756-a985-49e8-8105-aba949f6976c"],
Cell[CellGroupData[{
Cell[79501, 2014, 609, 15, 36, "Input",ExpressionUUID->"85f641ed-8229-46a6-bda9-e5d629053b1e"],
Cell[80113, 2031, 491, 12, 39, "Output",ExpressionUUID->"9671ec52-3771-4c42-ae71-e2e31b6682f5"]
}, Open  ]],
Cell[80619, 2046, 7956, 193, 441, "Input",ExpressionUUID->"215b162f-b7f3-4417-b2c8-9a53dffe6435"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88612, 2244, 211, 4, 54, "Subsubsection",ExpressionUUID->"8438e01f-41f0-4179-9162-6ac9c0533435"],
Cell[CellGroupData[{
Cell[88848, 2252, 577, 15, 35, "Input",ExpressionUUID->"9935d1d4-2539-4126-96f5-91b638580a77"],
Cell[89428, 2269, 478, 12, 39, "Output",ExpressionUUID->"dc662dd1-c43b-40da-b200-2486e3dabbac"]
}, Open  ]],
Cell[89921, 2284, 7869, 194, 245, "Input",ExpressionUUID->"004d9ae4-80f1-4b90-b9c5-780e827dd8b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97827, 2483, 263, 4, 54, "Subsubsection",ExpressionUUID->"969e3ae4-ac44-4e7d-8511-be6c55662045"],
Cell[CellGroupData[{
Cell[98115, 2491, 506, 11, 36, "Input",ExpressionUUID->"fa52033f-0eb9-4821-979c-041bcdd71e94"],
Cell[98624, 2504, 1182, 27, 63, "Output",ExpressionUUID->"73e4858b-f785-41c0-b2be-88f8dc8dce71"]
}, Open  ]],
Cell[99821, 2534, 14690, 359, 91, "Input",ExpressionUUID->"570d37d8-6250-4884-a657-08328c164718"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114548, 2898, 265, 4, 54, "Subsubsection",ExpressionUUID->"efd3a3ae-5db7-4e65-a6f6-2049fc19897b"],
Cell[CellGroupData[{
Cell[114838, 2906, 483, 9, 36, "Input",ExpressionUUID->"ca01f11a-a9ed-42bb-8923-413fe13a595d"],
Cell[115324, 2917, 775, 17, 39, "Output",ExpressionUUID->"4bee23a9-73ec-4f34-8e4c-44b2fff8c660"]
}, Open  ]],
Cell[116114, 2937, 15452, 374, 88, "Input",ExpressionUUID->"9ac9a5b4-9057-4ea9-a9f2-10c8addd8e0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131603, 3316, 261, 4, 54, "Subsubsection",ExpressionUUID->"3cca376b-3cd9-45ef-b88e-441a82ae4e62"],
Cell[CellGroupData[{
Cell[131889, 3324, 1056, 23, 48, "Input",ExpressionUUID->"218a7b5b-2db8-4390-b7ad-c9d72af24707"],
Cell[132948, 3349, 107393, 1833, 268, "Output",ExpressionUUID->"0fa8c464-3db1-4728-8bd6-53063237b817"]
}, Open  ]],
Cell[240356, 5185, 113238, 2771, 391, "Input",ExpressionUUID->"1aaf130d-45c5-41ea-bab5-890f53857993"],
Cell[353597, 7958, 389510, 7337, 357, "Input",ExpressionUUID->"d5ebbbe0-eac1-44c2-8e3e-27b9470f51fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[743144, 15300, 239, 4, 54, "Subsubsection",ExpressionUUID->"413ff685-55e5-470c-b7d5-5aff10982d48"],
Cell[CellGroupData[{
Cell[743408, 15308, 601, 11, 36, "Input",ExpressionUUID->"13aa6c2f-2bc1-4fda-92e0-bae135a4f796"],
Cell[744012, 15321, 515, 11, 39, "Output",ExpressionUUID->"181bc51b-89b3-4aca-bc0c-f40b57d2021d"]
}, Open  ]],
Cell[744542, 15335, 5523, 134, 97, "Input",ExpressionUUID->"6827f9f1-9389-41c7-a5cd-54c1ef1e86a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[750102, 15474, 236, 4, 54, "Subsubsection",ExpressionUUID->"143e037b-b303-4f6f-a92c-82e5d88c9f55"],
Cell[CellGroupData[{
Cell[750363, 15482, 631, 13, 36, "Input",ExpressionUUID->"85ca2dba-25f5-4026-a2c1-5a851cb6fbc2"],
Cell[750997, 15497, 649, 14, 40, "Output",ExpressionUUID->"2b8964c5-cf9f-4ffb-874b-420c6298b7ff"]
}, Open  ]],
Cell[751661, 15514, 5937, 143, 95, "Input",ExpressionUUID->"7551596a-5f95-471f-9197-e8ec9e8ec8e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[757635, 15662, 241, 4, 54, "Subsubsection",ExpressionUUID->"c7f9543b-2c05-4533-93c1-15fbab3c7232"],
Cell[CellGroupData[{
Cell[757901, 15670, 667, 14, 35, "Input",ExpressionUUID->"243a7a07-07c9-4dbf-8fbe-b94a10f8547d"],
Cell[758571, 15686, 445, 9, 39, "Output",ExpressionUUID->"2f30ffc5-47b0-4c0b-bc42-ec829b1623e7"]
}, Open  ]],
Cell[759031, 15698, 6713, 164, 191, "Input",ExpressionUUID->"62994d92-d2e5-47ec-a09d-783e3a5e25b8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[765793, 15868, 161, 3, 82, "Section",ExpressionUUID->"e7275e83-0036-4281-85f6-bbf00740d9dd"],
Cell[765957, 15873, 215, 5, 41, "Text",ExpressionUUID->"27d6da27-31d2-4bc8-bc25-60b62b9845cc"],
Cell[CellGroupData[{
Cell[766197, 15882, 283, 6, 54, "Subsubsection",ExpressionUUID->"8b154560-8948-4b7c-84ab-4bc3e4fbf05f"],
Cell[CellGroupData[{
Cell[766505, 15892, 4395, 106, 542, "Input",ExpressionUUID->"430c91b9-a8e6-41f4-938c-c48b0c374cea"],
Cell[770903, 16000, 394, 9, 34, "Message",ExpressionUUID->"d890078a-8cc6-4616-bf59-0d21a62bc782"],
Cell[771300, 16011, 396, 9, 34, "Message",ExpressionUUID->"6cba4858-7479-45b7-9b6d-540a031eabef"],
Cell[771699, 16022, 264, 6, 40, "Output",ExpressionUUID->"f87d276b-c26f-48a7-a777-ee8c32841098"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[772012, 16034, 248, 4, 54, "Subsubsection",ExpressionUUID->"35fa217b-0996-48b6-a662-67828fe2d45b"],
Cell[CellGroupData[{
Cell[772285, 16042, 469, 13, 40, "Input",ExpressionUUID->"bb1e3576-20be-4609-97c3-4e7bf79c996d"],
Cell[772757, 16057, 888, 22, 61, "Output",ExpressionUUID->"26fad351-08e3-437e-add9-529843dcb0bc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[773706, 16086, 163, 3, 82, "Section",ExpressionUUID->"29b14138-8419-474a-8ee4-caa448e86a23"],
Cell[773872, 16091, 862, 16, 63, "Item",ExpressionUUID->"d5bd7fa9-c4d3-44d2-bef1-0ceecd1965d2"],
Cell[774737, 16109, 798, 12, 63, "Item",ExpressionUUID->"d5b77c11-43af-4155-9113-cdd695fbb22a"],
Cell[775538, 16123, 977, 21, 63, "Item",ExpressionUUID->"533d20c2-6258-41fc-a3b6-ffe532400c2e"],
Cell[776518, 16146, 688, 13, 63, "Item",ExpressionUUID->"15c91930-fe13-471a-97e1-91057f6fb2bd"],
Cell[777209, 16161, 1428, 31, 63, "Item",ExpressionUUID->"dfaf71e3-082a-4849-81a4-36e4a1b37651"]
}, Open  ]],
Cell[CellGroupData[{
Cell[778674, 16197, 190, 3, 82, "Section",ExpressionUUID->"55366c72-1773-4c7a-85a4-dc3be77c9345",
 CellTags->"Keywords",
 CellID->442466898],
Cell[778867, 16202, 302, 5, 38, "Item",ExpressionUUID->"908d1f0a-329d-4157-955e-bfe72d382676"],
Cell[779172, 16209, 302, 5, 38, "Item",ExpressionUUID->"52b02a21-cc61-4f63-8da0-88340e06eac1"],
Cell[779477, 16216, 205, 4, 38, "Item",ExpressionUUID->"b5350d26-320b-4812-8402-214700ab3f93"],
Cell[779685, 16222, 207, 4, 38, "Item",ExpressionUUID->"55bbb78a-55cb-4f75-b36c-afdf87ca9c3e"],
Cell[779895, 16228, 260, 4, 38, "Item",ExpressionUUID->"386ee7ca-e4b3-492a-9615-1ee7f2330eab"],
Cell[780158, 16234, 263, 4, 38, "Item",ExpressionUUID->"09b93fca-70be-4d24-8e0c-7d617fe4507b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[780458, 16243, 198, 3, 82, "Section",ExpressionUUID->"db342ebb-082f-4ffe-849c-40f4564a4bad",
 CellTags->"Keywords",
 CellID->1836614011],
Cell[780659, 16248, 456, 7, 38, "Item",ExpressionUUID->"f3c13fc2-a689-4212-82e1-3c1eb50c2598"],
Cell[781118, 16257, 456, 6, 38, "Item",ExpressionUUID->"bc180c50-fc29-48ee-9d9f-97fb7c0e6eef"],
Cell[781577, 16265, 503, 8, 38, "Item",ExpressionUUID->"8ebef079-df48-450a-84fd-3f033b7fa266"]
}, Open  ]],
Cell[CellGroupData[{
Cell[782117, 16278, 139, 3, 82, "Section",ExpressionUUID->"061ffee8-81ef-46ca-adaf-d1701585859f",
 CellTags->"Keywords",
 CellID->1137237116],
Cell[782259, 16283, 308, 5, 38, "Item",ExpressionUUID->"c90a4631-f42e-4150-b700-a673f28b6ab3"],
Cell[782570, 16290, 303, 4, 38, "Item",ExpressionUUID->"89c668d2-d86c-4f73-ae93-ea1f87f96f60"],
Cell[782876, 16296, 303, 4, 38, "Item",ExpressionUUID->"75739d03-29c0-4392-aa6f-f8443e0f5116"],
Cell[783182, 16302, 302, 4, 38, "Item",ExpressionUUID->"01adfff5-0c87-4082-979c-088571a49866"],
Cell[783487, 16308, 300, 4, 38, "Item",ExpressionUUID->"853a048a-5f86-43b3-b572-21a78146b427"]
}, Open  ]]
}, Open  ]]
}
]
*)

